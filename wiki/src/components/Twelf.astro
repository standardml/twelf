---
import { spanHighlight } from "./twelf-highlight/tokenizer-highlighter";
import { twelfTokenizer } from "./twelf-highlight/twelf-tokenizer";

// import { response } from './twelf-highlight/evaluate.ts';

function trimSlightly(code: string): string {
  const code2 = code[0] === "\n" ? code.slice(1) : code;
  const code3 =
    code[code.length - 1] === "\n" ? code2.slice(0, code.length - 1) : code;
  return code3;
}

const { code = "" } = Astro.props;
function htmlEscape(code) {
  return code
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;");
}
const highlit = spanHighlight(twelfTokenizer, trimSlightly(code))
  .map(({ tag, contents }) => {
    switch (tag) {
      case "variableName":
        return `<span style="color: blue;">${htmlEscape(contents)}</span>`;
      case "keyword":
        return `<span style="color: green;">${htmlEscape(contents)}</span>`;
      case "comment":
        return `<span style="font-style: italic;">${htmlEscape(contents)}</span>`;
      case "invalid":
        return `<span style="color: red;">${htmlEscape(contents)}</span>`;
      case "literal":
        return `<span style="color: purple;">${htmlEscape(contents)}</span>`;
      case "meta":
        return `<span style="color: orange;">${htmlEscape(contents)}</span>`;
      default:
        return htmlEscape(contents);
    }
  })
  .join("");

// const text = await response;
---

<!-- pre set:html={typeof contents} / --><!-- pre set:text={JSON.stringify(newly)} / -->
<pre set:html={highlit} />
{Astro.props.checked ? "(placeholder for twelf's feedback)" : null}
<!-- pre set:html={text} /-->
<!-- pre set:html={response} /-->
