---
import { spanHighlight } from "./twelf-highlight/tokenizer-highlighter";
import { twelfTokenizer } from "./twelf-highlight/twelf-tokenizer";

// import { response } from './twelf-highlight/evaluate.ts';

function trimSlightly(code: string): string {
  const code2 = code[0] === "\n" ? code.slice(1) : code;
  const code3 =
    code[code.length - 1] === "\n" ? code2.slice(0, code.length - 1) : code;
  return code3;
}

const { code = "" } = Astro.props;
function htmlEscape(code: string) {
  return code
    .replaceAll("&", "&amp;")
    .replaceAll("<", "&lt;")
    .replaceAll(">", "&gt;");
}

const highlit = spanHighlight(twelfTokenizer, trimSlightly(code))
  .map((line) => {
    const htmlLine = line.map(({ tag, contents }) => {
      switch (tag) {
        case "variableName":
          return `<span class="tok-variableName">${htmlEscape(contents)}</span>`;
        case "variableName.special":
          return `<span class="tok-variableName2">${htmlEscape(contents)}</span>`;
        case "punctuation":
          return `<span class="tok-punctuation">${htmlEscape(contents)}</span>`;
        case "keyword":
          return `<span class="tok-keyword">${htmlEscape(contents)}</span>`;
        case "comment":
          return `<span class="tok-comment">${htmlEscape(contents)}</span>`;
        case "literal":
          return `<span class="tok-literal">${htmlEscape(contents)}</span>`;
        case "meta":
          return `<span class="tok-meta">${htmlEscape(contents)}</span>`;
        case "invalid":
          return `<span class="tok-invalid">${htmlEscape(contents)}</span>`;
        default:
          return htmlEscape(contents);
      }
    });
    return `${htmlLine.join("")}`;
  })
  .join("\n");

// const text = await response;
---

<!-- pre set:html={typeof contents} / --><!-- pre set:text={JSON.stringify(newly)} / -->
<pre tabindex="0" dir="ltr" set:html={highlit} />
{Astro.props.checked ? "(placeholder for twelf's feedback)" : null}
<!-- pre set:html={text} /-->
<!-- pre set:html={response} /-->
