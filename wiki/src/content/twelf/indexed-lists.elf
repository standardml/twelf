%%! title: "Indexed lists"

%{!
&lt;twelf check=true&gt;
% Lists
% By Carsten Varming 2006

tp : type.         %name tp Tp.
list : tp -&gt; type. %name list Ls.
stuff : tp.
%freeze tp.

cons : \{Tp\} list Tp -&gt; list Tp.
nil : \{Tp\} list Tp.
%freeze list.

eq : list Tp -&gt; list Tp -&gt; type.
%mode eq +Ls -Ls'.
eq_ref : eq Ls Ls.
%worlds () (eq _ _).
%freeze eq.

eq_symm : eq Ls Ls' -&gt; eq Ls' Ls -&gt; type.
%mode eq_symm +Q -Q'.
eq_symm_rule : eq_symm eq_ref eq_ref.
%worlds () (eq_symm _ _).
%freeze eq_symm.
%total \{\} (eq_symm _ _).

eq_trans : eq Ls Ls' -&gt; eq Ls' Ls_ -&gt; eq Ls Ls_ -&gt; type.
%mode eq_trans +Q +Q' -Q_.
eq_trans_rule : eq_trans eq_ref eq_ref eq_ref.
%worlds () (eq_trans _ _ _).
%freeze eq_trans.
%total \{\} (eq_trans _ _ _).
rev : list Tp -&gt; list Tp -&gt; list Tp -&gt; type.
%mode rev +Ls +Ls_ -Ls'.
rev_nil : rev (nil _) Ls' Ls'.
rev_cons : rev (cons E Ls) Ls_ Ls'
               &lt;- rev Ls (cons E Ls_) Ls'.
%worlds () (rev _ _ _).
%freeze rev.
%total D (rev D _ _).

rev_exists : \{Ls\} \{Ls'\} rev Ls Ls' Ls_ -&gt; type.
%mode rev_exists +Ls +Ls' -R.
rev_exists_nil : rev_exists (nil _) _ rev_nil.
rev_exists_cons : rev_exists (cons E Ls) Ls' (rev_cons Ls_)
            &lt;- rev_exists Ls (cons E Ls') Ls_.
%worlds () (rev_exists _ _ _).
%freeze rev_exists.
%total D (rev_exists D _ _).

revDet : rev Ls Ls' Ls3 -&gt; rev Ls Ls' Ls4 -&gt; eq Ls3 Ls4 -&gt; type.
%mode revDet +R +R' -Q.
revDet_nil : revDet rev_nil _ eq_ref.
revDet_cons : revDet (rev_cons R) (rev_cons R') Q
         &lt;- revDet R R' Q.
%worlds () (revDet _ _ _).
%freeze revDet.
%total D (revDet D _ _).

revrev_id_lem : rev Ls Ls' Ls_ -&gt; rev Ls_ (nil _) Ls4 -&gt; rev Ls' Ls Ls6 -&gt; eq Ls6 Ls4 -&gt; type.
%mode revrev_id_lem +R +R' +R_ -Q.

revrev_id_lem_nil : revrev_id_lem rev_nil F F' Q
          &lt;- revDet F' F Q. 
revrev_id_lem_cons : revrev_id_lem (rev_cons R) R' R_ Q
          &lt;- revrev_id_lem R R' (rev_cons R_) Q.

%worlds () (revrev_id_lem _ _ _ _).
%freeze revrev_id_lem.
%total D (revrev_id_lem D _ _ _).

revrev_id : rev Ls (nil Tp) Ls' -&gt; rev Ls' (nil Tp) Ls_ -&gt; eq Ls Ls_ -&gt; type.
%mode revrev_id +R +R' -Q.
revrev_id_rule : revrev_id R R' Q 
      &lt;- revrev_id_lem R R' rev_nil Q.
%worlds () (revrev_id _ _ _).
%freeze revrev_id.
%total \{\} (revrev_id _ _ _).

rev_injective : rev Ls (nil Tp) Ls' -&gt; rev Ls_ (nil Tp) Ls' -&gt; eq Ls Ls_ -&gt; type.
%mode rev_injective +R +R' -Q.
rev_injective_rule : rev_injective (R : rev Ls (nil Tp) Ls') R' Q
      &lt;- rev_exists Ls' (nil Tp) Rev
      &lt;- revrev_id R Rev Q'
      &lt;- eq_symm Q' Q**
      &lt;- revrev_id R' Rev Q_
      &lt;- eq_trans Q_ Q** Q1
      &lt;- eq_symm Q1 Q.
%worlds () (rev_injective _ _ _).
%freeze rev_injective.
%total D (rev_injective D _ _).

&lt;/twelf&gt;
!}%
