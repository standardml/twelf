%%! title: "POPL Tutorial/Session 5"

%{!
In this session, you'll get a flavor for the experience of defining systems and proving theorems in Twelf.  Break into small groups and pick an interesting problem or two to work on.  If you get stuck, ask a TA!  Refer to the solutions to check your work (though Server OK from Twelf should be assurance enough!)

&lt;big&gt;**_Please fill [https://spreadsheets.google.com/viewform?key=p0-89EvFXQhUXF827jjk_Dg feedback form]**_&lt;/big&gt;

#
# Beginner problems (Recommended)
* [POPL Tutorial/Sequent vs Natural Deduction](/wiki/popl-tutorial-sequent-vs-natural-deduction/) -- Prove the logical equivalence of Gentzen's intuitionistic sequent calculus and intuitionistic natural deduction. ([POPL Tutorial/Sequent vs Natural Deduction: Solution](/wiki/popl-tutorial-sequent-vs-natural-deduction-solution/))
* [POPL Tutorial/Big step, small step](/wiki/popl-tutorial-big-step-small-step/) -- Prove the operational equivalence of the big-step and small-step views of operational semantics.  ([POPL Tutorial/Big step, small step: Solution](/wiki/popl-tutorial-big-step-small-step-solution/))

#
# Intermediate problems
* [POPL Tutorial/cps-problem](/wiki/popl-tutorial-cps-problem/) -- Define an algorithm for converting lambda terms to continuation-passing style ([POPL Tutorial/CPS Solutions](/wiki/popl-tutorial-cps-solutions/))
* [POPL Tutorial/cps-problem2](/wiki/popl-tutorial-cps-problem2/) -- Define a higher-order variant of the CPS conversion that never creates administrative redexes ([POPL Tutorial/CPS Solution2](/wiki/popl-tutorial-cps-solution2/))
* [POPL Tutorial/Typed bracket abstraction](/wiki/popl-tutorial-typed-bracket-abstraction/) -- Explore the relation between the simply-typed lambda calculus and combinatory logic using Curry's classic bracket abstraction algorithm.  ([POPL Tutorial/Typed bracket abstraction (solution)](/wiki/popl-tutorial-typed-bracket-abstraction-solution/))
* [POPL Tutorial/Church Rosser (Problem)](/wiki/popl-tutorial-church-rosser-problem/) -- Prove Church and Rosser's seminal result via a Diamond Lemma for the untyped lambda calculus. ([POPL Tutorial/Church Rosser](/wiki/church-rosser-w-identity-reduction/))

#
# Advanced problems
* [POPL Tutorial/Exceptions-problem](/wiki/popl-tutorial-exceptions-problem/) -- Prove type safety for an extension of MinML with exceptions defined using structural operational semantics with a "raises" judgement.  ([POPL Tutorial/Exceptions](/wiki/popl-tutorial-exceptions/))
!}%
