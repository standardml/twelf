%%! title: "Division over the natural numbers"

%{!
This is a [case studies](/wiki/case-studies/) about **division over the natural numbers**. A number of arithmetic operations over the natural numbers will be defined, including division. The ultimate goal is to prove properties normally associated with division hold. Twelf muscles flexed in this study include [reasoning from false](/wiki/reasoning-from-false/) and using the [%reduces](/wiki/percent-reduces/) directive to use strong induction in a proof.

First the "false" type and natural numbers are defined.
&lt;twelf&gt;uninhabited : type.
%freeze uninhabited.



nat : type.

nat/z	: nat.
nat/s	: nat -&gt; nat.&lt;/twelf&gt;

Relations about arithmetic over the natural numbers are defined in the standard way. 

&lt;twelf&gt;
nat-plus : nat -&gt; nat -&gt; nat -&gt; type.

nat-plus/z	: nat-plus nat/z N N.

nat-plus/s	: nat-plus (nat/s N1) N2 (nat/s N3)
		   &lt;- nat-plus N1 N2 N3.



nat-mult : nat -&gt; nat -&gt; nat -&gt; type.

nat-mult/z      : nat-mult nat/z N nat/z.

nat-mult/s      : nat-mult (nat/s N1) N2 N3'
                   &lt;- nat-plus N2 N3 N3'
                   &lt;- nat-mult N1 N2 N3.



nat-less : nat -&gt; nat -&gt; type.

nat-less/z	: nat-less nat/z (nat/s _).

nat-less/s	: nat-less (nat/s N1) (nat/s N2)
		   &lt;- nat-less N1 N2. 



nat-leq	: nat -&gt; nat -&gt; type.

nat-leq/z	: nat-leq nat/z _.

nat-leq/s	: nat-leq (nat/s N1) (nat/s N2)
		   &lt;- nat-leq N1 N2.



nat-compare : nat -&gt; nat -&gt; type.

nat-compare/less	: nat-compare N1 N2
			   &lt;- nat-less N1 N2.

nat-compare/leq		: nat-compare N1 N2
			   &lt;- nat-leq N2 N1.



% nat-divmod DIVIDEND DIVISOR QUOTIENT REMAINDER

nat-divmod	: nat -&gt; nat -&gt; nat -&gt; nat -&gt; type.

nat-divmod/base	: nat-divmod N1 N2 nat/z N1
		   &lt;- nat-less N1 N2.

nat-divmod/rec	: nat-divmod N1 N2 (nat/s N3) N4
		   &lt;- nat-divmod N1' N2 N3 N4
		   &lt;- nat-plus N2 N1' N1.
&lt;/twelf&gt;

Some basic properties about arithmetic.

&lt;twelf&gt;
nat-leq-plus	: nat-leq N1 N2
		   -&gt; nat-plus N1 _ N2
		   -&gt; type.
%mode nat-leq-plus +D1 -D2.

-	: nat-leq-plus nat-leq/z nat-plus/z.

-	: nat-leq-plus (nat-leq/s DLQ) (nat-plus/s DNP)
	   &lt;- nat-leq-plus DLQ DNP.

%worlds () (nat-leq-plus _ _).
%total \{D1\} (nat-leq-plus D1 _).



nat-compare-resp-s	: nat-compare N1 N2
			   -&gt; nat-compare (nat/s N1) (nat/s N2)
			   -&gt; type.
%mode nat-compare-resp-s +D1 -D2.

-	: nat-compare-resp-s (nat-compare/less DL) 
	   (nat-compare/less (nat-less/s DL)).

-	: nat-compare-resp-s (nat-compare/leq DLQ) 
	   (nat-compare/leq (nat-leq/s DLQ)).

%worlds () (nat-compare-resp-s _ _).
%total \{\} (nat-compare-resp-s _ _).



can-nat-compare	: \{N1\}\{N2\}
		   nat-compare N1 N2
		   -&gt; type.
%mode can-nat-compare +D1 +D2 -D3.

-	: can-nat-compare _ _ (nat-compare/less nat-less/z).

-	: can-nat-compare _ _ (nat-compare/leq nat-leq/z).

-	: can-nat-compare (nat/s N1) (nat/s N2) DC'
	   &lt;- can-nat-compare N1 N2 DC
	   &lt;- nat-compare-resp-s DC DC'.

%worlds () (can-nat-compare _ _ _).
%total \{D1\} (can-nat-compare D1 _ _).



can-nat-plus : \{N1\} \{N2\}
                nat-plus N1 N2 N3
                -&gt; type.
%mode can-nat-plus +D1 +D2 -D3.

-       : can-nat-plus _ _ nat-plus/z.

-       : can-nat-plus _ _ (nat-plus/s DP)
           &lt;- can-nat-plus _ _ DP.

%worlds () (can-nat-plus _ _ _).
%total (D1) (can-nat-plus D1 _ _).



nat-plus-assoc : nat-plus N1 N2 N12
                  -&gt; nat-plus N2 N3 N23
                  -&gt; nat-plus N1 N23 N123
                  -&gt; nat-plus N12 N3 N123
                  -&gt; type.
%mode nat-plus-assoc +D1 +D2 +D3 -D4.

-       : nat-plus-assoc nat-plus/z DP nat-plus/z DP.

-       : nat-plus-assoc (nat-plus/s DP1) DP2 (nat-plus/s DP3) (nat-plus/s DP4)
           &lt;- nat-plus-assoc DP1 DP2 DP3 DP4.

%worlds () (nat-plus-assoc _ _ _ _).
%total (D1) (nat-plus-assoc D1 _ _ _).
&lt;/twelf&gt;

The first proof about division: The remainder is less than the divisor!

&lt;twelf&gt;nat-divmod-mod-less	: nat-divmod N1 N2 N3 N4
			   -&gt; nat-less N4 N2
			   -&gt; type. 
%mode nat-divmod-mod-less +D1 -D2.

-	: nat-divmod-mod-less (nat-divmod/base DL) DL.

-	: nat-divmod-mod-less (nat-divmod/rec _ DDM) DL
	   &lt;- nat-divmod-mod-less DDM DL.

%worlds () (nat-divmod-mod-less _ _).
%total \{D1\} (nat-divmod-mod-less D1 _).
&lt;/twelf&gt;

Division by zero does not happen.

&lt;twelf&gt;nat-divmod-z-uninhabited	: nat-divmod N1 nat/z N3 N4
				   -&gt; uninhabited
				   -&gt; type.
%mode nat-divmod-z-uninhabited +D1 -D2.

-	: nat-divmod-z-uninhabited (nat-divmod/rec nat-plus/z DDM) DU
	   &lt;- nat-divmod-z-uninhabited DDM DU.

%worlds () (nat-divmod-z-uninhabited _ _).
%total \{D1\} (nat-divmod-z-uninhabited D1 _).
&lt;/twelf&gt;

The following theorem uses the ``%reduces`` directive to verify that if a non-zero number is added to ``N2``, then the result is strictly larger than ``N2`` in the sub-term sense. This is powerful information, because Twelf verifies well-founded inductions over sub-term orderings. 

&lt;twelf&gt;
nat-plus-reduces-s	: \{N2\}\{N3\}
			   nat-plus (nat/s N1) N2 N3
			   -&gt; type.
%mode nat-plus-reduces-s +D1 +D2 +D3.

-	: nat-plus-reduces-s _ _ (nat-plus/s nat-plus/z).

-	: nat-plus-reduces-s _ _ (nat-plus/s DL)
	   &lt;- nat-plus-reduces-s _ _ DL.

%worlds () (nat-plus-reduces-s _ _ _).
%reduces N2 &lt; N3 (nat-plus-reduces-s N2 N3 _).
%total \{D1\} (nat-plus-reduces-s _ _ D1).
&lt;/twelf&gt;


The highlight of this example. Division is possible for any dividend as long as the divisor is non-zero. This proof is by induction over the dividend, which does get smaller as inductive calls are made. However, because Twelf can not figure this out on its own, calls to nat-plus-reduces-s are required so that this proof passes the totality checker.

&lt;twelf&gt;
can-nat-divmod*	: \{N1\}
		   nat-compare N1 (nat/s N2)
		   -&gt; nat-divmod N1 (nat/s N2) N3 N4
		   -&gt; type.
%mode can-nat-divmod* +D1 +D2 -D3.

-	: can-nat-divmod* _ (nat-compare/less DL) (nat-divmod/base DL).

-	: can-nat-divmod* N1 (nat-compare/leq DLQ) (nat-divmod/rec DP DDM)
	   &lt;- nat-leq-plus DLQ DP
	   &lt;- nat-plus-reduces-s N1' N1 DP
	   &lt;- can-nat-compare N1' (nat/s N2) DC
	   &lt;- can-nat-divmod* N1' DC DDM.

%worlds () (can-nat-divmod* _ _ _).
%total \{D1\} (can-nat-divmod* D1 _ _).



can-nat-divmod	: \{N1\}\{N2\}
		   nat-divmod N1 (nat/s N2) N3 N4
		   -&gt; type.
%mode can-nat-divmod +D1 +D2 -D3.

-	: can-nat-divmod N1 N2 DDM
	   &lt;- can-nat-compare N1 (nat/s N2) DC
	   &lt;- can-nat-divmod* N1 DC DDM.

%worlds () (can-nat-divmod _ _ _).
%total \{\} (can-nat-divmod _ _ _).&lt;/twelf&gt;

It is also useful to know the definition of division is correct with respect to multiplication.

&lt;twelf check="true"&gt;
nat-divmod-correct : nat-divmod N1 N2 N3 N4
                      -&gt; nat-mult N3 N2 N3'
                      -&gt; nat-plus N3' N4 N1
                      -&gt; type.
%mode nat-divmod-correct +D1 -D2 -D3.

-       : nat-divmod-correct (nat-divmod/base _) nat-mult/z nat-plus/z.

-       : nat-divmod-correct (nat-divmod/rec DP DD) (nat-mult/s DM DP_) DP**
           &lt;- nat-divmod-correct DD DM DP'
           &lt;- can-nat-plus N2 N3' DP_
           &lt;- nat-plus-assoc DP_ DP' DP DP**.

%worlds () (nat-divmod-correct _ _ _).
%total (D1) (nat-divmod-correct D1 _ _).
&lt;/twelf&gt;

In the above code, the division algorithm for natural numbers was defined. A few interesting properties about this judgment were proven. The first is that the remainder computed is strictly less than the divisor. The second is that the judgment is not inhabited when the divisor is zero. The third is an [effectiveness lemma](/wiki/effectiveness-lemma/) which shows that this judgment is inhabited for any dividend and any divisor greater than zero. Finally, the division relation was shown to be correct with respect to multiplication.

\{\{case study\}\}
[Category:Twelf code](/wiki/category-twelf-code/)
!}%
