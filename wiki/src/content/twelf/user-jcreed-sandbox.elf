%%! title: "User:Jcreed/Sandbox"

%{!  !}%
    
%{! (options removed from twelftag: check="false") !}%

pos : type.
neg : type.

+ :    pos -> pos -> pos.               % binary sums
void : pos.                             % void
* :    pos -> pos -> pos.               % binary products
unit : pos.                             % unit
=> :   pos -> neg -> neg.		% functions
|| :  neg -> neg -> neg.		% negative disjunction
down : neg -> pos.			% down shift
up :   pos -> neg.			% up shift
rec : (pos -> pos) -> pos.              % recursive types
\> :   neg -> pos -> pos.		% wtf?
↑ : pos -> neg -> neg.
↓ : neg -> neg -> neg.
%infix right 13 +. %infix right 14 *. %infix right 12 =>.
%infix right 12 \>. %infix right 13 ||.
%infix right 11 ↑. %infix right 10 ↓.

bool = unit + unit.                     % booleans
nat = rec [X] unit + X.                 % naturals
tree = [A] rec [X] A + X * X.		% binary trees
stream = [A] rec [X] unit + A * down (unit => up X).  % lazy lists
int : pos.                              % machine integers

i : type.
%mode i.
z : i.
s : i -> i.   %prefix 10 s.
add : i -> i -> i -> type.  %mode add +M +N -P.
add/z : add z N N.
add/s : add (s M) N (s P) <- add M N P.
%worlds () (add M _ _). %total (M) (add M _ _). %unique add +M +N -P.

mult : i -> i -> i -> type.  %mode mult +M +N -P.
mult/z : mult z N z.
mult/s : mult (s M) N Q <- mult M N P <- add P N Q.
%worlds () (mult M _ _). %total (M) (mult M _ _). %unique mult +M +N -P.

frame : type.
⋅ : frame.
, : frame -> frame -> frame.
vhol : neg -> frame.
khol : pos -> pos -> frame.
%infix right 11 ,.

pat+ : frame -> pos -> type.
pat- : (pos -> frame) -> neg -> type.
%mode pat+ -FΔ +A.
%mode pat- -FΔ +A.

n   : i -> pat+ ⋅ int.
inl : pat+ FΔ A -> pat+ FΔ (A + B).
inr : pat+ FΔ B -> pat+ FΔ (A + B).
u   : pat+ ⋅ unit.
pair : pat+ FΔ₁ A -> pat+ FΔ₂ B -> pat+ (FΔ₁ , FΔ₂) (A * B).
fold : pat+ FΔ (A (rec A)) -> pat+ FΔ (rec A).
app : pat+ FΔ₁ A -> pat- FΔ₂* B -> pat- ([C] FΔ₁ , FΔ₂* C) (A => B).
** : pat- FΔ₁* A -> pat+ (FΔ₁* B) (A \> B).
sw : pat- FΔ₁* A -> pat- FΔ₂* B -> pat- ([C] FΔ₁* C , FΔ₂* C) (A || B).
papp : pat+ FΔ₁ A -> pat- FΔ₂* B -> pat- ([C] FΔ₁ , FΔ₂* C) (A ↑ B).
bnd : pat- FΔ* B -> pat- ([C] vhol A , FΔ* C) (A ↓ B).

vvar : pat+ (vhol A) (down A).
kvar : pat- (khol A) (up A).

tt : pat+ ⋅ bool = inl u.
ff : pat+ ⋅ bool = inr u.
zz : pat+ ⋅ nat = fold (inl u).
ss : pat+ FΔ nat -> pat+ FΔ nat = [p] fold (inr p).  %prefix 9 ss.
leaf : pat+ FΔ A -> pat+ FΔ (tree A) = [p] fold (inl p).
node : pat+ FΔ₁ (tree A) -> pat+ FΔ₂ (tree A) -> pat+ (FΔ₁ , FΔ₂) (tree A) = [p₁] [p₂] fold (inr (pair p₁ p₂)).
nil : pat+ ⋅ (stream A) = fold (inl u).
cons : pat+ FΔ A -> pat+ (FΔ , vhol (unit => up (stream A))) (stream A) = [p] fold (inr (pair p vvar)).

j : type.
rfoc : pos -> j.
linv : pos -> pos -> j.
rinv : neg -> j.
lfoc : neg -> pos -> j.
all : frame -> j.
neu : pos -> j.
abs : (pos -> j) -> j.

tm : j -> type.
⊢ : frame -> j -> j.   %infix right 9 ⊢.

λ_ : tm J -> tm (FΔ ⊢ J).
λ, : tm (FΔ₁ ⊢ FΔ₂ ⊢ J) -> tm (FΔ₁ , FΔ₂ ⊢ J).
λval : (tm (rinv A) -> tm J) -> tm (vhol A ⊢ J).
λcon : (tm (linv A B) -> tm J) -> tm (khol A B ⊢ J).
λsub : (tm (all FΔ) -> tm J) -> tm (FΔ ⊢ J).
%prefix 9 λ_. %prefix 9 λ,. %prefix 9 λval. %prefix 9 λcon. %prefix 9 λsub.

val+ : pat+ FΔ A -> tm (all FΔ) -> tm (rfoc A).
con- : pat- FΔ* A -> tm (all (FΔ* B)) -> tm (lfoc A B).
par : ({p} tm (C p)) -> tm (abs C).

sval : tm (rinv A) -> tm (all (vhol A)).
scon : tm (linv A B) -> tm (all (khol A B)).
snil :  tm (all ⋅).
sjoin : tm (all FΔ₁) -> tm (all FΔ₂) -> tm (all (FΔ₁ , FΔ₂)).

return : tm (rfoc A) -> tm (neu A).
call- : tm (lfoc A B) -> tm (rinv A) -> tm (neu B).
call+ : tm (linv A B) -> tm (neu A) -> tm (neu B).
let : tm (all FΔ) -> tm (FΔ ⊢ neu A) -> tm (neu A).

kbody : tm (linv A B) -> pat+ FΔ A -> tm (FΔ ⊢ neu B) -> type.
%mode kbody +K +P -E.

vbody : tm (rinv A) -> pat- FΔ* A -> tm (abs [B] FΔ* B ⊢ neu B) -> type.
%mode vbody +V +D -E.

%worlds () (kbody K P _). %total P (kbody K P _). %unique kbody +K +P -E.
%worlds () (vbody V D _). %total D (vbody V D _). %unique vbody +V +D -E.

result : type.
halt : i -> result.

load : tm (all FΔ) -> tm (FΔ ⊢ J) -> tm J -> type.
step : tm (neu A) -> tm (neu A) -> type.
eval : tm (neu A) -> tm (rfoc A) -> type.
%mode load +Sσ +T -T'.
%mode step +E -E'.
%mode eval +E -V.

ld/_ : load Sσ (λ_ T) T.
ld/join : load (sjoin Sσ₁ Sσ₂) (λ, T) T'' <- load Sσ₁ T T' <- load Sσ₂ T' T''.
ld/val : load (sval V) (λval T*) (T* V).
ld/con : load (scon K) (λcon T*) (T* K).
ld/sub : load Sσ (λsub T) (T Sσ).

st/call- : step (call- (con- D Sσ) V) (let Sσ (E _))
   <- vbody V D (par E).
st/call+ : step (call+ K (return (val+ P Sσ))) (let Sσ E)
   <- kbody K P E.
st/cong : step (call+ K E) (call+ K E')
   <- step E E'.
st/let :  step (let Sσ E) E'
   <- load Sσ E E'.

ev/return : eval (return V) V.
ev/step : eval E V
	<- step E E'
	<- eval E' V.

%worlds () (load _ _ _). %total (Sσ) (load Sσ _ _). %unique load +Sσ +T -T.
% %worlds () (step _ _). %covers step +E -R. %unique step +E -R.
% %worlds () (eval _ _). %covers eval +E -R. %unique eval +E -R.

idk : tm (linv A A).
idk/x : kbody idk P (λsub [σ] return (val+ P σ)).

%total P (kbody K P _). %unique kbody +K +P -E.
%total D (vbody V D _). %unique vbody +V +D -E.

plus : tm (linv (int * int) int).
plus/mn : kbody plus (pair (n M) (n N)) (λ_ return (val+ (n P) snil))
             <- add M N P.

times : tm (linv (int * int) int).
times/mn : kbody times (pair (n M) (n N)) (λ_ return (val+ (n P) snil))
             <- mult M N P.

%total P (kbody K P _). %unique kbody +K +P -E.
%total D (vbody V D _). %unique vbody +V +D -E.

succ : tm (linv nat nat).
succ/n : kbody succ N (λsub [σ] return (val+ (ss N) σ)).

plus' : tm (linv (nat * nat) nat).
plus'/zn : kbody plus' (pair zz N) (λ, λ_ λsub [σ] return (val+ N σ)).
plus'/sn : kbody plus' (pair (ss M) N) (λ, λsub [σ₁] λsub [σ₂]
                call+ succ (call+ plus' (return (val+ (pair M N) (sjoin σ₁ σ₂))))).

add1 : tm (linv int int).
add1/n : kbody add1 (n N) (λ_ return (val+ (n (s N)) snil)).

%total P (kbody K P _). %unique kbody +K +P -E.
%total D (vbody V D _). %unique vbody +V +D -E.

n0 = n z.
n1 = n (s z).
n2 = n (s s z).
n3 = n (s s s z).
n4 = n (s s s s z).

%query 1 *
  eval (call+ add1 (return (val+ n2 snil))) R.

%query 1 *
  eval (call+ plus (return (val+ (pair n2 n2) (sjoin snil snil)))) R.

%query 1 *
  eval (call+ plus' (return (val+ (pair (ss ss zz) (ss ss zz)) (sjoin snil snil)))) R.

%% various useful continuations/values

fst : tm (linv (A * B) A).
fst/xy : kbody fst (pair P1 P2) (λ, λsub [σ₁] λsub [σ₂] return (val+ P1 σ₁)).
snd : tm (linv (A * B) B).
snd/xy : kbody snd (pair P1 P2) (λ, λsub [σ₁] λsub [σ₂] return (val+ P2 σ₂)).

case : tm (linv A C) -> tm (linv B C) -> tm (linv (A + B) C).
case/inl : kbody (case K1 K2) (inl P) E1 <- kbody K1 P E1.
case/inr : kbody (case K1 K2) (inr P) E2 <- kbody K2 P E2.

lam : tm (linv A B) -> tm (rinv (A => up B)).
lam/x : vbody (lam K) (app P kvar) (par [_] λ, λsub [σ] λcon [k] call+ k (call+ K (return (val+ P σ)))).

unlam : tm (rinv (A => up B)) -> tm (linv A B).
unlam/x : kbody (unlam V) P (λsub [σ] call- (con- (app P kvar) (sjoin σ (scon idk))) V).

con : ({Δ} pat+ Δ A -> tm (all Δ) -> tm (neu C)) -> tm (linv A C).
con/x : kbody (con K) P (λsub [σ] K _ P σ).

conV : (tm (rfoc A) -> tm (neu C)) -> tm (linv A C).
conV/x : kbody (conV K) P (λsub [σ] K (val+ P σ)).

fn : (tm (rfoc A) -> tm (rinv B)) -> tm (rinv (A => B)).
fn/x : vbody (fn V) (app P D) (par [_] λ, λsub [σ₁] λsub [σ₂] let σ₂ (E (val+ P σ₁) _))
	<- {x} vbody (V x) D (par (E x)).

letV : tm (neu A) -> (tm (rfoc A) -> tm (neu C)) -> tm (neu C) = [E] [f] call+ (conV f) E.

letVp : tm (neu A) -> ({Δ} pat+ Δ A -> tm (all Δ) -> tm (neu C)) -> tm (neu C) = [E] [f] call+ (con f) E.

∘ : tm (linv B C) -> tm (linv A B) -> tm (linv A C)
  = [K1] [K2] conV [x] call+ K1 (call+ K2 (return x)).
%infix left 12 ∘.

delay : tm (rinv A) -> tm (neu (down A))
 = [V] return (val+ vvar (sval V)).

grab : (tm (rinv A) -> tm (neu C)) -> tm (linv (down A) C).
grab/x : kbody (grab E*) vvar (λval E*).

thunk : tm (neu C) -> tm (linv unit C).
thunk/u : kbody (thunk E) u (λ_ E).

thunk' : tm (neu C) -> tm (rinv (up C)).
thunk'/k : vbody (thunk' E) kvar (par [_] λcon [k] call+ k E).

force : tm (neu (down A)) -> tm (rinv A).
force/u : vbody (force E) D (par [_] λsub [σ] call+ (grab [x] call- (con- D σ) x) E).

%% EFFECTS
%% effectful terms encoded as negative values of type (A -> B) -> C...

trip' : pos -> neg -> neg -> neg = [A] [B] [C] (A ↑ B) ↓ C.
trip : pos -> pos -> pos -> neg = [A] [B] [C] down (A => up B) => up C.
eff : pos -> pos -> pos -> j = [A] [B] [C] rinv (trip A B C).

shift : (tm (linv A B) -> tm (eff D D C)) -> tm (eff A B C).
shift/k : vbody (shift E) (app vvar kvar) (par [_] λ, λval [x] λcon [k]
       call- (con- (app vvar kvar) (sjoin (sval (lam idk)) (scon k))) (E (unlam x))).

reset : tm (eff B B A) -> tm (eff A C C).
reset/e : vbody (reset E) (app vvar kvar) (par [_] λ, λval [x] λcon [k]
       call+ k (call- (con- (app vvar kvar) (sjoin (sval (lam idk)) (scon (unlam x)))) E)).

plug : tm (eff A B C) -> tm (linv A B) -> tm (neu C)
   = [V] [k] call- (con- (app vvar kvar) (sjoin (sval (lam k)) (scon idk))) V.

! : tm (neu A) -> tm (eff A C C).
!/x : vbody (! E) (app vvar kvar) (par [_] λ, λval [x] λcon [k]
       call+ k (call+ (unlam x) E)).
%prefix 9 !.

eapp : tm (linv A B) -> tm (eff A C1 C2) -> tm (eff B C1 C2).
eapp/x : vbody (eapp K E) (app vvar kvar) (par [_] λ, λval [x] λcon [k]
       call- (con- (app vvar kvar) (sjoin (sval (lam ((unlam x) ∘ K))) (scon k))) E).

;; : tm (eff unit C2 C3) -> tm (eff unit C1 C2) -> tm (eff unit C1 C3)
   = [e1] [e2] shift [k] !
	       plug e1 (thunk (
	       plug e2 (thunk (call+ k (return (val+ u snil)))))).
%infix left 8 ;;.

%total P (kbody K P _). %unique kbody +K +P -E.
%total D (vbody V D _). %unique vbody +V +D -E.

%% stuff

caseB : tm (neu C) -> tm (neu C) -> tm (linv bool C)
 = [E1] [E2] case (conV [_] E1) (conV [_] E2).

cmpB : tm (linv (bool * bool) bool).
cmpB/tt : kbody cmpB (pair tt tt) (λ_ return (val+ tt snil)).
cmpB/ff : kbody cmpB (pair ff ff) (λ_ return (val+ tt snil)).
cmpB/tf : kbody cmpB (pair tt ff) (λ_ return (val+ ff snil)).
cmpB/ft : kbody cmpB (pair ff tt) (λ_ return (val+ ff snil)).

cmpI : tm (linv (int * int) bool).
cmpI/zz : kbody cmpI (pair (n z) (n z)) (λ_ return (val+ tt snil)).
cmpI/ss : kbody cmpI (pair (n (s N1)) (n (s N2))) (λ_ call+ cmpI (return (val+ (pair (n N1) (n N2)) (sjoin snil snil)))).
cmpI/zs : kbody cmpI (pair (n z) (n (s _))) (λ_ return (val+ ff snil)).
cmpI/zs : kbody cmpI (pair (n (s _)) (n z)) (λ_ return (val+ ff snil)).

&& : tm (neu bool) -> tm (neu bool) -> tm (neu bool)
   = [E1] [E2] call+ (caseB E2 (return (val+ ff snil))) E1.
%infix left 9 &&.

cmpS : tm (linv (A * A) bool) -> tm (linv (stream A * stream A) bool).
cmpS/nil :  kbody (cmpS F) (pair nil nil) (λ_ return (val+ tt snil)).
cmpS/cons : kbody (cmpS F) (pair (cons P1) (cons P2)) (λ, λ, λsub [σ₁] λval [x₁] λ, λsub [σ₂] λval [x₂]
	call+ F (return (val+ (pair P1 P2) (sjoin σ₁ σ₂))) &&
        call- (con- (app u kvar) (sjoin snil (scon (con [_] [p1'] [σ₁']
        call- (con- (app u kvar) (sjoin snil (scon (con [_] [p2'] [σ₂']
	     call+ (cmpS F) (return (val+ (pair p1' p2') (sjoin σ₁' σ₂')))))))
	    x₂)))) x₁).
cmpS/nc :  kbody (cmpS F) (pair nil (cons _)) (λ_ return (val+ ff snil)).
cmpS/cn :  kbody (cmpS F) (pair (cons _) nil) (λ_ return (val+ ff snil)).

visit : tm (linv (tree A) (down (trip unit (stream A) (stream A)))).
visit/leaf : kbody visit (leaf P) (λsub [σ]
	delay (shift [k] ! return (val+ (cons P) (sjoin σ (sval (lam k)))))).
visit/node : kbody visit (node P1 P2) (λ, λsub [σ₁] λsub [σ₂]
	delay (force (call+ visit (return (val+ P1 σ₁))) ;; force (call+ visit (return (val+ P2 σ₂))))).

fringe : tm (linv (tree A) (stream A))
  = conV [x] plug
     (reset ((force (call+ visit (return x))) ;; (fn [_] thunk' (return (val+ nil snil)))))
     idk.

same : tm (linv (tree int * tree int) bool).
same/xy : kbody same (pair P1 P2) (λ, λsub [σ₁] λsub [σ₂]
	letVp (call+ fringe (return (val+ P1 σ₁))) [_] [p1'] [σ₁']
	letVp (call+ fringe (return (val+ P2 σ₂))) [_] [p2'] [σ₂']
	call+ (cmpS cmpI) (return (val+ (pair p1' p2') (sjoin σ₁' σ₂')))).

%query 1 *
  eval (call+ same (return (val+ (pair (leaf n1) (leaf n1)) _))) S1.

%query 1 *
  eval (call+ same (return (val+ (pair (leaf n1) (leaf n0)) _))) S2.

%query 1 *
  eval (call+ same (return (val+ (pair (node (leaf n1) (leaf n2)) (node (leaf n1) (leaf n2))) _))) S3.

%query 1 *
  eval (call+ same (return (val+ (pair (node (node (leaf n1) (leaf n2)) (leaf n3)) (node (leaf n1) (node (leaf n2) (leaf n3)))) _))) S4.

%query 1 *
  eval (call+ same (return (val+ (pair (node (node (leaf n1) (leaf n2)) (leaf n3)) (node (leaf n1) (node (leaf n3) (leaf n3)))) _))) S5.

%total P (kbody K P _). %unique kbody +K +P -E.
%total D (vbody V D _). %unique vbody +V +D -E.

%% Direct-style with shift + reset

%abbrev expOf : pos -> pos -> pos -> type = [A] [B] [C] tm (eff A B C).
%abbrev valOf : pos -> type = [A] tm (rfoc A).
%abbrev conOf : pos -> pos -> type = [A] [B] tm (linv A B).

V : valOf A -> expOf A C C = [V] ! return V.
EApp : conOf A B -> expOf A C1 C2 -> expOf B C1 C2 = eapp.

Pair : expOf A C2 C3 -> expOf B C1 C2 -> expOf (A * B) C1 C3
   = [e1] [e2] shift [k] !
	       plug e1 (con [_] [p1] [σ₁]
	       plug e2 (con [_] [p2] [σ₂]
               call+ k (return (val+ (pair p1 p2) (sjoin σ₁ σ₂))))).

%abbrev Fst : expOf (A * B) C1 C2 -> expOf A C1 C2 = [e] eapp fst E.
%abbrev Snd : expOf (A * B) C1 C2 -> expOf B C1 C2 = [e] eapp snd E.

Inl : expOf A C1 C2 -> expOf (A + B) C1 C2
   = [e] shift [k] ! plug e (con [_] [p] [σ] call+ k (return (val+ (inl p) σ))).
Inr : expOf B C1 C2 -> expOf (A + B) C1 C2
   = [e] shift [k] ! plug e (con [_] [p] [σ] call+ k (return (val+ (inr p) σ))).
Case : expOf (A + B) C2 C3 -> (valOf A -> expOf C C1 C2) -> (valOf B -> expOf C C1 C2) -> expOf C C1 C3
   = [e] [f] [g] shift [k] !
	plug e (case (conV [x] plug (f x) k) (conV [y] plug (g y) k)).

Fn : (valOf A -> expOf B C1 C2) -> valOf (down (A => trip B C1 C2))
   = [f] val+ vvar (sval (fn f)).

App : expOf (down (A => trip B C1 C2)) C0 C3 -> expOf A C2 C0 -> expOf B C1 C3
   = [e1] [e2] shift [k] !
       plug e1 (grab [f]
       plug e2 (con [_] [p] [σ]
       call- (con- (app p (app vvar kvar)) (sjoin σ (sjoin (sval (lam k)) (scon idk)))) f)).

Shift : (conOf A B -> expOf D D C) -> expOf A B C = shift.
Reset : expOf B B A -> expOf A C C = reset.

Z : expOf int C C = ! (return (val+ (n z) snil)).
S : expOf int C1 C2 -> expOf int C1 C2 = [e] eapp add1 e.  %prefix 9 S.

Plus : expOf int C2 C3 -> expOf int C1 C2 -> expOf int C1 C3
   = [e1] [e2] shift [k] !
	       plug e1 (con [_] [p1] [σ₁]
	       plug e2 (con [_] [p2] [σ₂]
               call+ k (call+ plus (return (val+ (pair p1 p2) (sjoin σ₁ σ₂)))))).

Times : expOf int C2 C3 -> expOf int C1 C2 -> expOf int C1 C3
   = [e1] [e2] shift [k] !
	       plug e1 (con [_] [p1] [σ₁]
	       plug e2 (con [_] [p2] [σ₂]
               call+ k (call+ times (return (val+ (pair p1 p2) (sjoin σ₁ σ₂)))))).

Abort0 : expOf A B int = shift [k] ! return (val+ n0 snil).
Abort1 : expOf A B int = shift [k] ! return (val+ n1 snil).

%abbrev run : expOf A A int -> i -> type = [t] [x] eval (call- (con- (app vvar kvar) (sjoin (sval (lam idk)) (scon idk))) t) (val+ (n x) snil).

%query 1 * run (Plus (S S Z) (S S S Z)) N1.                     % N1 = 5
%query 1 * run (Plus (S S Z) Abort1) N2.                        % N2 = 1
%query 1 * run (Plus Abort0 Abort1) N3.                         % N3 = 0
%query 1 * run (Times (S S Z) (S S S Z)) N4.                    % N4 = 6
%query 1 * run (Times (S S Z) (Shift [k] Plus (S Z) (EApp k (EApp k (EApp k (S Z)))))) N5.       % N5 = 9
%query 1 * run (App (V (Fn [x] Plus (V x) (S Z))) (S Z)) N6.    % N6 = 2


%{!
-----
This page was copied from the MediaWiki version of the Twelf Wiki.
If anything looks wrong, you can refer to the
[wayback machine's version here](https://web.archive.org/web/20240303030303/http://twelf.org/wiki/User:Jcreed/Sandbox).
!}%
