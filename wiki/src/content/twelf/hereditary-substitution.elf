%%! title: "Hereditary substitution"

%{! [LF](/wiki/lf/) is defined so that only [canonical form](/wiki/canonical-form/)s exist.  However, canonical forms are not closed under substitution.  **Hereditary substitution** is an algorithm that directly computes the canonical result of an ordinary substiution of one canonical form into another.  This algorithm has been applied in several additional type theories as well.

\{\{needs|citations of said type theories.\}\}

## Example

Substitution &lt;math&gt;\mathsf\{\}[M'/x]M&lt;/math&gt; of one canonical form into another does not necessarily produce a canonical result.  For example:

&lt;math&gt;\mathsf\{\}[\lambda y.y/x](x \; z)  \; = \;(\lambda y.y) \; z&lt;/math&gt;

Even though both terms are canonical forms, the result is [beta-reducible](/wiki/beta-equivalence/).  

However, _hereditary substitution_ directly computes the canonical result of an ordinary substitution.  When ordinary substitution would return a non-canonical form, hereditary substitution continues to reduce by substituting the argument into the body of the function.  In the above example, the hereditary substitution 

&lt;math&gt;\mathsf\{\}[\lambda y.y/x](x \; z)  \; = \; [z/y] y \; = \; z &lt;/math&gt;

Whenever we use the notation &lt;math&gt;\mathsf\{\}[M'/x]M&lt;/math&gt; for LF, we mean hereditary substitution.

\{\{needs|an explanation of the hereditary substitution algorithm and its metatheory.\}\}

## See also
* The tutorial on [hereditary substitution for the STLC](/wiki/hereditary-substitution-for-the-stlc/) formalizes the hereditary substitution algorithm for a simply typed lambda-calculus in Twelf.

\{\{stub\}\} !}%

%{!
-----
This page was copied from the MediaWiki version of the Twelf Wiki.
If anything looks wrong, you can refer to the
[wayback machine's version here](https://web.archive.org/web/20240303030303/http://twelf.org/wiki/Hereditary_substitution).
!}%
