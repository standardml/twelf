%%! title: "Summer school 2008:Alternate typed arithmetic expressions with sums"

%{! 

\{\{Summer school 2008
  |prev=Typed arithmetic expressions
  |prevname=Typed arithmetic expressions
  |nonext=
\}\}

Arithmetic expressions with pairs and sums.  (There are two alternate solutions, [one by William](/wiki/summer-school-2008-typed-arithmetic-expressions-with-sums-2/) (involving output factoring) and [one by Dan](/wiki/summer-school-2008-typed-arithmetic-expressions-with-sums/) (involving output factoring and identity types).)

Numbers and strings are unchanged.

|hidden="true" !}%

nat : type.             %name nat M.
z : nat.
s : nat -> nat.

add : nat -> nat -> nat -> type.
%mode add +M +N -P.

add/z : add z N N.
add/s : add (s M) N (s P) <- add M N P.

%worlds () (add _ _ _).
%total M (add M _ _).

char : type.				%name char X.
a : char.
b : char.

str : type.				%name str S.
emp : str.
cons : char -> str -> str.

cat : str -> str -> str -> type.
%mode cat +S1 +S2 -S3.

cat/e : cat emp S S.
cat/c : cat (cons X S1) S2 (cons X S3) <- cat S1 S2 S3.

%worlds () (cat _ _ _).
%total S (cat S _ _).

%{! 

## Typed expressions

Add a type for disjoint sums:

!}%

tp : type.				%name tp T.
number : tp.
string : tp.
prod   : tp -> tp -> tp.
sum    : tp -> tp -> tp.

%{! 

Add injections as values, and case as an expression. Note that you can only case on a value.  This makes evaluation slightly easier; 
for versions with expression-case as a primitive; see the above alternate solutions.

!}%

val : tp -> type.			%name val V.  %postfix 1 val.
num : nat -> number val.
lit : str -> string val.
pair : T val -> U val -> (prod T U) val.
inl : T val -> (sum T U) val.
inr : U val -> (sum T U) val.

exp : tp -> type.			%name exp E.  %postfix 1 exp.
ret : T val -> T exp.
plus : number exp -> number exp -> number exp.
append : string exp -> string exp -> string exp.
let : T exp -> (T val -> U exp) -> U exp.
fst : (prod T U) exp -> T exp.
snd : (prod T U) exp -> U exp.
case : (sum T U) val -> (T val -> V exp) -> (U val -> V exp) -> V exp.

%{! 

Note that if we want to case on an expression, we can let-bind it:

!}%

ecase : (sum T U) exp -> (T val -> V exp) -> (U val -> V exp) -> V exp 
            = [esum] [e1] [e2] (let esum ([x] case x e1 e2)).

%{! 

Add eval cases for case.

!}%

eval : T exp -> T val -> type.
%mode eval +E1 -E2.

eval/val
   : eval (ret V) V.

eval/plus
   : eval (plus E1 E2) (num N)
      <- eval E1 (num N1)
      <- eval E2 (num N2)
      <- add N1 N2 N.

eval/append
   : eval (append E1 E2) (lit S)
      <- eval E1 (lit S1)
      <- eval E2 (lit S2)
      <- cat S1 S2 S.

eval/let
   : eval (let E1 ([x] E2 x)) A
      <- eval E1 V
      <- eval (E2 V) A.

eval/fst
   : eval (fst E) A
      <- eval E (pair A _).

eval/snd
   : eval (snd E) B
      <- eval E (pair _ B).

eval/case1
  : eval (case (inl A) ([x] E1 x) _) A1
      <- eval (E1 A) A1.

eval/case2
  : eval (case (inr A) _ ([x] E2 x)) A2
      <- eval (E2 A) A2.

%worlds () (eval _ _).
%total E (eval E _).

%{! 

\{\{Summer school 2008
  |prev=Exercises 1
  |prevname=Exercises 1
  |nonext=
\}\}

!}%

%{!
-----
This page was copied from the MediaWiki version of the Twelf Wiki.
If anything looks wrong, you can refer to the
[wayback machine's version here](https://web.archive.org/web/20240303030303/http://twelf.org/wiki/Summer_school_2008:Alternate_typed_arithmetic_expressions_with_sums).
!}%