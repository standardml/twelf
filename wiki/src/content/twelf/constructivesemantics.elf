%%! title: "ConstructiveSemantics"

%{!
A little proof of cut eliminiation for the logic FF in an unpublished paper by Reed and Pfenning.

&lt;twelf check="true"&gt;
% Termination metric

lo : type.
hi : type.
* : lo.
s : lo -&gt; hi.

% Syntax

t+ : type. % "terms" that go in positive atoms
t- : type. %name t- T. % "terms" that go in negative atoms
p : type. % positive props
o : type. % negative props
i : type. % worlds, frames

% Propositions
imp : p -&gt; o -&gt; o.
top : o.
s- : t- -&gt; o.
s+ : t+ -&gt; p.
v : o -&gt; p.

% Stub terms to make coverage nontrivial
t+/ : t+.
t-/ : t-.

% Judgments
j : type. %name j J.
/lfoc : o -&gt; t- -&gt; j.
/rinv : o -&gt; j.
/rfoc : p -&gt; j.
pf : j -&gt; type.
%abbrev lfoc = [A][T] pf (/lfoc A T).
%abbrev rinv = [A] pf (/rinv A).
%abbrev rfoc = [B] pf (/rfoc B).

&lt;= : t- -&gt; t- -&gt; type.
hyp : p -&gt; type.

% Stub judgment to make coverage nontrivial
refl : &lt;= T T.

% Inference Rules
s+R : hyp (s+ T) -&gt; rfoc (s+ T).
s-L : &lt;= T T0 -&gt; lfoc (s- T) T0.
vR : rinv A -&gt; rfoc (v A).
vL : lfoc A T -&gt; (hyp (v A) -&gt; rinv (s- T)).
topR : rinv top.
impR : rinv (imp B A) &lt;- (hyp B -&gt; rinv A).
impL : lfoc (imp B A) T &lt;- rfoc B &lt;- lfoc A T.

% Theorems

trans : &lt;= T1 T2 -&gt; &lt;= T2 T3 -&gt; &lt;= T1 T3 -&gt; type.
mono/rinv : &lt;= T1 T2 -&gt; rinv (s- T1) -&gt; rinv (s- T2) -&gt; type.
mono/lfoc : &lt;= T1 T2 -&gt; lfoc A T1 -&gt; lfoc A T2 -&gt; type.

cut/rfoc : \{B\} hi -&gt; rfoc B -&gt; (hyp B -&gt; pf J) -&gt; pf J -&gt; type.
cut/rinv : \{A\} hi -&gt; rinv A -&gt; (hyp (v A) -&gt; pf J) -&gt; pf J -&gt; type.
cut/pc : \{A\} lo -&gt; rinv A -&gt; lfoc A T -&gt; rinv (s- T) -&gt; type.

% mono/rinv proof
mono/rinv/ : mono/rinv LE (vL LF H) (vL LF' H) &lt;- mono/lfoc LE LF LF'.

% mono/lfoc proof
mono/lfoc/impL : mono/lfoc LE (impL LF RF) (impL LF' RF)
	      &lt;- mono/lfoc LE LF LF'.
mono/lfoc/s- : mono/lfoc LE (s-L LE') (s-L LE_)
	    &lt;- trans LE' LE LE_.

% cut/rfoc proof
cut/rfoc/v : cut/rfoc (v A) TM (vR RI) PF1 PF2 
	      &lt;- cut/rinv A TM RI PF1 PF2.
cut/rfoc/s+ : cut/rfoc (s+ T) TM (s+R H) PF (PF H).

% cut/pc proof
cut/pc/imp : cut/pc (imp B A) TM (impR RI) (impL LF RF) RI_
	      &lt;- cut/rfoc B (s TM) RF RI RI'
	      &lt;- cut/pc A TM RI' LF RI_.
cut/pc/s- : cut/pc (s- T) TM IN (s-L LE) OUT &lt;- mono/rinv LE IN OUT.

% cut/rinv proof
cut/rinv/impL : cut/rinv A TM RI ([x] impL (LF x) (RF x)) (impL LF' RF')
		 &lt;- cut/rinv A TM RI LF LF'
		 &lt;- cut/rinv A TM RI RF RF'.
cut/rinv/impR : cut/rinv A TM RI ([x] impR ([y] D x y)) (impR Y)
		 &lt;- \{y\} cut/rinv A TM RI ([x] D x y) (Y y).
cut/rinv/s-L : cut/rinv A TM RI ([x] s-L D) (s-L D).
cut/rinv/vL/hit : cut/rinv A (s TM) RI ([x] vL (LF x) x) Y
		   &lt;- cut/rinv A (s TM) RI LF Z
		   &lt;- cut/pc A TM RI Z Y.
cut/rinv/vL/miss : cut/rinv A TM RI ([x] vL (LF x) H) (vL LF' H)
		    &lt;- cut/rinv A TM RI LF LF'.
cut/rinv/vR : cut/rinv A TM RI ([x] vR (RI0 x)) (vR RI0')
		 &lt;- cut/rinv A TM RI RI0 RI0'.

cut/rinv/s+R : cut/rinv A TM RI ([x] s+R H) (s+R H).
cut/rinv/topR : cut/rinv A TM RI ([x] topR) topR.


% Checks
%block b : some \{P : p\} block \{x : hyp P\}.
%mode 
 (trans +A +B -C)
 (mono/rinv +A +B -C)
 (mono/lfoc +A +B -C).
%mode 
 (cut/rfoc +A +B +C +D -E)
 (cut/rinv +A +B +C +D -E)
 (cut/pc   +A +B +C +D -E).
%worlds (b) 
 (trans _ _ _)
 (mono/rinv _ _ _)
 (mono/lfoc _ _ _).
%worlds (b) 
(cut/rfoc _ _ _ _ _)
(cut/rinv _ _ _ _ _)
(cut/pc   _ _ _ _ _).

% Assume structure relation is transitive
%trustme %total LE1 (trans LE1 LE2 LE3).

%total (RI1 LF1) 
 (mono/rinv LE RI1 RI2)
 (mono/lfoc LE' LF1 LF2).

%total 
\{(B A A') (N1 N2 N3) [(RF RI RI' ) (PFRF1 PFRI1 LF )]\} 
(cut/rfoc B N1 RF PFRF1 PFRF2)
(cut/rinv A N2 RI PFRI1 PFRI2)
(cut/pc A' N3 RI' LF RI_).
&lt;/twelf&gt;
!}%
