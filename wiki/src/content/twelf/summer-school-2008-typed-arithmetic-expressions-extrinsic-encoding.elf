%%! title: "Summer school 2008:Typed arithmetic expressions (extrinsic encoding)"

%{! 

\{\{Summer school 2008
   |prev=Typed arithmetic expressions
   |prevname=Typed arithmetic expressions
   |next=Exercises 1
   |nextname=Exercises 1
   \}\}

Here we take a more traditional approach to representing syntax, by
first giving a definition of raw syntax, with a separate judgement
defining the well-typed expressions.  This is called an [extrinsic encoding](/wiki/intrinsic-and-extrinsic-encodings/).

Numbers and strings are as before.

|hidden="true" !}%

nat : type.             %name nat M.
z : nat.
s : nat -> nat.

add : nat -> nat -> nat -> type.
%mode add +M +N -P.

add/z : add z N N.
add/s : add (s M) N (s P) <- add M N P.

%% addition is a total function on closed terms of type nat

%worlds () (add _ _ _).
%total M (add M _ _).

char : type.				%name char X.
a : char.
b : char.

str : type.				%name str S.
emp : str.
cons : char -> str -> str.

cat : str -> str -> str -> type.
%mode cat +S1 +S2 -S3.

cat/e : cat emp S S.
cat/c : cat (cons X S1) S2 (cons X S3) <- cat S1 S2 S3.

%worlds () (cat _ _ _).
%total S (cat S _ _).

%{! 

## Raw syntax

!}%

tp : type.				%name tp T.
number : tp.
string : tp.

val : type.				%name val V.
num : nat -> val.
lit : str -> val.

exp : type.				%name exp E.
ret : val -> exp.
plus : exp -> exp -> exp.
append : exp -> exp -> exp.
let : exp -> (val -> exp) -> exp.

%{! 

## Typing judgement on raw syntax

!}%

ofv : val -> tp -> type.		%name ofv Dofv.
%mode ofv +V -T.

- : ofv (num _) number.
- : ofv (lit _) string.

of : exp -> tp -> type.			%name of Dof.
%mode of +E -T.

- : of (ret V) T <- ofv V T.
- : of (plus E1 E2) number <- of E1 number <- of E2 number.
- : of (append E1 E2) string <- of E1 string <- of E2 string.
- : of (let E1 ([x] E2 x)) T' <- of E1 T <- ({x:val} ofv x T -> of (E2 x) T').

%{! 

## Evaluation

### Answers

!}%

ans : type.				%name ans A.
anum : nat -> ans.
astr : str -> ans.

ofa : ans -> tp -> type.		%name ofa Dofa.
%mode ofa +A -T.

- : ofa (anum _) number.
- : ofa (astr _) string.

%{! 

### Evaluation judgement on raw syntax

!}%

eval : exp -> ans -> type.
%mode eval +E1 -E2.

eval/val/num
   : eval (ret (num N)) (anum N).

eval/val/lit
   : eval (ret (lit S)) (astr S).

eval/plus
   : eval (plus E1 E2) (anum N)
      <- eval E1 (anum N1)
      <- eval E2 (anum N2)
      <- add N1 N2 N.

eval/append
   : eval (append E1 E2) (astr S)
      <- eval E1 (astr S1)
      <- eval E2 (astr S2)
      <- cat S1 S2 S.

eval/let
   : eval (let E1 ([x] E2 x)) A
      <- eval E1 (anum N)
      <- eval (E2 (num N)) A.

%{! 

Evaluation is not total because of run-time type errors!  (e.g., try
appending two numbers).  

!}%

%worlds () (eval _ _).

%{! 

Twelf gives this error, refering to the first recursive call of ``eval/plus``.

&lt;twelf check="decl"&gt;
%total E (eval E _).
&lt;/twelf&gt;

\{\{Summer school 2008
   |prev=Typed arithmetic expressions
   |prevname=Typed arithmetic expressions
   |next=Exercises 1
   |nextname=Exercises 1
   \}\}

!}%

%{!
-----
This page was copied from the MediaWiki version of the Twelf Wiki.
If anything looks wrong, you can refer to the
[wayback machine's version here](https://web.archive.org/web/20240303030303/http://twelf.org/wiki/Summer_school_2008:Typed_arithmetic_expressions_(extrinsic_encoding)).
!}%