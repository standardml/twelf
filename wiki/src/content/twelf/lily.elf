%%! title: "Lily"

%{!
This [case studies](/wiki/case-studies/) concerns the metatheory of the [linear logic](/wiki/linear-logic/) Lily language. 

It is incomplete; ask [User:varming](/wiki/user-varming/) for updates.


In this example I will show examples of the following:
- Encoding of a linear type system.
- Definition of an abstract machine using evaluation frames.
- Correspondence between the big step semantics and the machine.
- Complete induction on the height of a derivation.

#
# Lily - the language
#
#
# Grammar
I define the grammar for the types
&lt;twelf&gt;
% Lily meta theory
% By Carsten Varming 2006
tp : type. %name tp Tp.

func : tp -&gt; tp -&gt; tp.
all : (tp -&gt; tp) -&gt; tp.
bang : tp -&gt; tp.
i : tp.
tensor : tp -&gt; tp -&gt; tp.
%freeze tp.
&lt;/twelf&gt;
and the grammar for the terms and values
&lt;twelf&gt;
term : type. %name term M.

lam : tp -&gt; (term -&gt; term) -&gt; term.
app : term -&gt; term -&gt; term.
tlam : (tp -&gt; term) -&gt; term.
tapp : term -&gt; tp -&gt; term.
thunk : tp -&gt; (term -&gt; term) -&gt; term.
letb : term -&gt; (term -&gt; term) -&gt; term.
unit : term.
letu : term -&gt; term -&gt; term.
tens : term -&gt; term -&gt; term.
lett : term -&gt; (term -&gt; term -&gt; term) -&gt; term.
%freeze term.

value : term -&gt; type.
%mode value +V.

val_lam : value (lam _ _).
val_tlam : value (tlam _).
val_thunk : value (thunk _ _).
val_unit : value unit.
val_tens : value (tens _ _).

%worlds () (value _).
%terminates \{\} (value _).
%freeze value.
&lt;/twelf&gt;
Next I define the call-by-name big step evaluation relation
&lt;twelf&gt;
\n/ : term -&gt; term -&gt; type.
%mode \n/ +M -V.
%name \n/ EV.
%infix none 500 \n/.

ev_lam : lam T M  \n/ lam T M.
ev_tlam : tlam M  \n/ tlam M.
ev_thunk : thunk T M  \n/ thunk T M.
ev_unit : unit \n/ unit.
ev_tens : tens M N \n/ tens M N.
ev_app : app M N \n/ V
       &lt;- M \n/ lam _ M'
       &lt;- M' N \n/ V.
ev_tapp : tapp M T \n/ V
       &lt;- M \n/ tlam M'
       &lt;- M' T \n/ V.
ev_letb : letb M N \n/ V
       &lt;- M \n/ thunk T M'
       &lt;- N (letb (thunk T M') M') \n/ V.
ev_letu : letu M N \n/ V
       &lt;- M \n/ unit
       &lt;- N \n/ V.
ev_lett : lett M N \n/ V
       &lt;- M \n/ tens M' M_
       &lt;- (N M' M_) \n/ V.
%worlds () (\n/ _ _).
%covers \n/ +M -V.
%freeze \n/.

\/ : term -&gt; type.
%postfix 500 \/.
%mode \/ +M.
terminate : M \/
         &lt;- M \n/ V.
%freeze \/.
&lt;/twelf&gt;
I also have an strict (call-by-value) evaluation relation for Lily.
&lt;twelf&gt;
\s/ : term -&gt; term -&gt; type.
%mode \s/ +M -V.
%name \s/ EV.
%infix none 500 \s/.

evs_lam : lam T M  \s/ lam T M.
evs_tlam : tlam M  \s/ tlam M.
evs_thunk : thunk T M  \s/ thunk T M.
evs_unit : unit \s/ unit.
evs_tens : tens M N \s/ tens M N.
evs_app : app M N \s/ V
       &lt;- M \s/ lam _ M'
       &lt;- N \s/ V'
       &lt;- M' V' \s/ V.
evs_tapp : tapp M T \s/ V
       &lt;- M \s/ tlam M'
       &lt;- M' T \s/ V.
evs_letb : letb M N \s/ V
       &lt;- M \s/ thunk T M'
       &lt;- N (letb (thunk T M') M') \s/ V.
evs_letu : letu M N \s/ V
       &lt;- M \s/ unit
       &lt;- N \s/ V.
evs_lett : lett M N \s/ V
       &lt;- M \s/ tens M' M_
       &lt;- (N M' M_) \s/ V.
%worlds () (\s/ _ _).
%covers \s/ +M -V.
%freeze \s/.
&lt;/twelf&gt;

#
#
# Value soundness
By now I can prove value soundness for the two evaluation relations.
&lt;twelf&gt;
value_soundness : M \n/ V -&gt; value V -&gt; type.
%mode value_soundness +D -V.

vs_lam : value_soundness ev_lam val_lam.
vs_tlam : value_soundness ev_tlam val_tlam.
vs_thunk : value_soundness ev_thunk val_thunk.
vs_unit : value_soundness ev_unit val_unit.
vs_tens : value_soundness ev_tens val_tens.
vs_app : value_soundness (ev_app D' _) V
            &lt;- value_soundness D' V.
vs_tapp : value_soundness (ev_tapp D' _) V
            &lt;- value_soundness D' V.
vs_letb : value_soundness (ev_letb D' _) V
            &lt;- value_soundness D' V.
vs_letu : value_soundness (ev_letu D' _) V
            &lt;- value_soundness D' V.
vs_lett : value_soundness (ev_lett D' _) V
            &lt;- value_soundness D' V.

%worlds () (value_soundness _ _).
%freeze value_soundness.
%total D (value_soundness D _).

value_soundness_s : M \s/ V -&gt; value V -&gt; type.
%mode value_soundness_s +D -V.

vs_lam : value_soundness_s evs_lam val_lam.
vs_tlam : value_soundness_s evs_tlam val_tlam.
vs_thunk : value_soundness_s evs_thunk val_thunk.
vs_unit : value_soundness_s evs_unit val_unit.
vs_tens : value_soundness_s evs_tens val_tens.
vs_app : value_soundness_s (evs_app D' _ _) V
            &lt;- value_soundness_s D' V.
vs_tapp : value_soundness_s (evs_tapp D' _) V
            &lt;- value_soundness_s D' V.
vs_letb : value_soundness_s (evs_letb D' _) V
            &lt;- value_soundness_s D' V.
vs_letu : value_soundness_s (evs_letu D' _) V
            &lt;- value_soundness_s D' V.
vs_lett : value_soundness_s (evs_lett D' _) V
            &lt;- value_soundness_s D' V.

%worlds () (value_soundness_s _ _).
%freeze value_soundness_s.
%total D (value_soundness_s D _).
&lt;/twelf&gt;
It is also neat to know that values evaluate to themselves.
&lt;twelf&gt;
selfeval : value V -&gt; (V \n/ V) -&gt; type.
%mode selfeval +V -E.

selfeval_lam : selfeval val_lam ev_lam.
selfeval_tlam : selfeval val_tlam ev_tlam.
selfeval_thunk : selfeval val_thunk ev_thunk.
selfeval_tens : selfeval val_tens ev_tens.
selfeval_unit : selfeval val_unit ev_unit.

%worlds () (selfeval _ _).
%freeze selfeval.
%total V (selfeval V _).

selfevals : value V -&gt; (V \s/ V) -&gt; type.
%mode selfevals +V -E.

selfevals_lam : selfevals val_lam evs_lam.
selfevals_tlam : selfevals val_tlam evs_tlam.
selfevals_thunk : selfevals val_thunk evs_thunk.
selfevals_tens : selfevals val_tens evs_tens.
selfevals_unit : selfevals val_unit evs_unit.

%worlds () (selfevals _ _).
%freeze selfevals.
%total V (selfevals V _).
&lt;/twelf&gt;

#
#
# Equalities
I need some equalities on types and terms:
&lt;twelf&gt;
eqt : tp -&gt; tp -&gt; type.
%mode eqt +T -T'.
eqt_ref : eqt T T.
%worlds () (eqt _ _).
%freeze eqt.
%total D (eqt D _).

eqt_symm : eqt T T' -&gt; eqt T' T -&gt; type.
%mode eqt_symm +Q -Q'.
eqt_symm_rule : eqt_symm eqt_ref eqt_ref.
%worlds () (eqt_symm _ _).
%freeze eqt_symm.
%total \{\} (eqt_symm _ _).

eqt_ctx : eqt T T' -&gt; \{C : tp -&gt; tp\} eqt (C T) (C T') -&gt; type.
%mode eqt_ctx +E +C -E'.
eqt_ctx_ref : eqt_ctx eqt_ref _ eqt_ref.
%worlds () (eqt_ctx _ _ _).
%freeze eqt_ctx.
%total D (eqt_ctx D _ _).

eqt_ctx2 : eqt T T' -&gt; eqt T2 T2' -&gt; \{C : tp -&gt; tp -&gt; tp\} eqt (C T T2) (C T' T2') -&gt; type.
%mode eqt_ctx2 +E +E' +C -E_.
eqt_ctx2_ref : eqt_ctx2 eqt_ref eqt_ref _ eqt_ref.
%worlds () (eqt_ctx2 _ _ _ _).
%freeze eqt_ctx2.
%total \{\} (eqt_ctx2 _ _ _ _).

eq : term -&gt; term -&gt; type.
%mode eq +M -M'.
eq_ref : eq M M.
%worlds () (eq _ _).
%freeze eq.
%total D (eq D _).

eq_ctx : eq M M' -&gt; \{C : term -&gt; term\} eq (C M) (C M') -&gt; type.
%mode eq_ctx +Q +C -Q'.
eq_ctx_ref : eq_ctx eq_ref _ eq_ref.
%worlds () (eq_ctx _ _ _).
%freeze eq_ctx.
%total D (eq_ctx D _ _).

eq_ctx2 : eq M M' -&gt; eq M2 M2' -&gt; \{C : term -&gt; term -&gt; term\} eq (C M M2) (C M' M2') -&gt; type.
%mode eq_ctx2 +Q +Q2 +C -Q'.
eq_ctx2_ref : eq_ctx2 eq_ref eq_ref _ eq_ref.
%worlds () (eq_ctx2 _ _ _ _).
%freeze eq_ctx2.
%total D (eq_ctx2 D _ _ _).

eq_eval : eq M M' -&gt; (M \n/ V) -&gt; (M' \n/ V) -&gt; type.
%mode eq_eval +Q +E -E'.
eq_eval_rule : eq_eval eq_ref E E.
%worlds () (eq_eval _ _ _).
%freeze eq_eval.
%total D (eq_eval D _ _).

eq_eval2 : eq V V' -&gt; (M \n/ V) -&gt; (M \n/ V') -&gt; type.
%mode eq_eval2 +Q +E -E'.
eq_eval2_rule : eq_eval2 eq_ref E E.
%worlds () (eq_eval2 _ _ _).
%freeze eq_eval2.
%total D (eq_eval2 D _ _).

eq_res_s : eq V V' -&gt; M \s/ V -&gt; M \s/ V' -&gt; type.
%mode eq_res_s +Q +E -E.
eq_res_s_rile : eq_res_s eq_ref E E.
%worlds () (eq_res_s _ _ _).
%freeze eq_res_s.
%total \{\} (eq_res_s _ _ _).

eq_evaluations : (M \n/ V) -&gt; (M' \n/ V') -&gt; type.
%mode eq_evaluations +EV -EV'.
eq_evaluations_ref : eq_evaluations E E.
%worlds () (eq_evaluations _ _).
%freeze eq_evaluations.
%total D (eq_evaluations D _).

eq_tens : eq (tens M1 M2) (tens M1' M2') -&gt; eq M1 M1' -&gt; eq M2 M2' -&gt; type.
%mode eq_tens +EQ1 -EQ2 -EQ3.
eq_tens_rule : eq_tens eq_ref eq_ref eq_ref.
%worlds () (eq_tens _ _ _).
%freeze eq_tens.
%total D (eq_tens D _ _).

eq_thunk : eq (thunk T E) (thunk T' E') -&gt; eq (letb (thunk T E) E) (letb (thunk T' E') E') -&gt; type.
%mode eq_thunk +EQ -EQ'.
eq_thunk_rule : eq_thunk eq_ref eq_ref.
%worlds () (eq_thunk _ _).
%freeze eq_thunk.
%total D (eq_thunk D _).

eq_lam : eq (lam T E) (lam T' E') -&gt; eq X X' -&gt; eq (E X) (E' X') -&gt; type.
%mode eq_lam +E +E' -E_.
eq_lam_rule : eq_lam eq_ref eq_ref eq_ref.
%worlds () (eq_lam _ _ _).
%freeze eq_lam.
%total D (eq_lam D _ _).

eq_tlam : eq (tlam E) (tlam E') -&gt; eqt X X' -&gt; eq (E X) (E' X') -&gt; type.
%mode eq_tlam +E +E' -E_.
eq_tlam_rule : eq_tlam eq_ref eqt_ref eq_ref.
%worlds () (eq_tlam _ _ _).
%freeze eq_tlam.
%total D (eq_tlam D _ _).

eq_sym : eq A B -&gt; eq B A -&gt; type.
%mode eq_sym +E -Q.
eq_sym_rule : eq_sym eq_ref eq_ref.
%worlds () (eq_sym _ _).
%freeze eq_sym.
%total D (eq_sym D _).
&lt;/twelf&gt;

#
#
# Determinism
Evaluation is deterministic. 
&lt;twelf&gt;
eval_determ : M \n/ V -&gt; M \n/ V' -&gt; eq V V' -&gt; type.
%mode eval_determ +E +E' -Q.

eval_determ_unit : eval_determ ev_unit ev_unit eq_ref.
eval_determ_tens : eval_determ ev_tens ev_tens eq_ref.
eval_determ_tlam : eval_determ ev_tlam ev_tlam eq_ref.
eval_determ_lam : eval_determ ev_lam ev_lam eq_ref.
eval_determ_thunk : eval_determ ev_thunk ev_thunk eq_ref.
eval_determ_app : eval_determ ((ev_app EV2 EV1) : (app M1 M2) \n/ V)
                              ((ev_app EV2' EV1') : (app M1 M2 \n/ V')) Q
         &lt;- eval_determ EV1 EV1' Q1
         &lt;- eq_lam Q1 (eq_ref : eq M2 M2) Q3
         &lt;- eq_sym Q3 Q4
         &lt;- eq_eval Q4 EV2' EV2s
         &lt;- eval_determ EV2 EV2s Q.

eval_determ_tapp : eval_determ ((ev_tapp EV2 EV1) : (tapp M1 T2) \n/ V)
                               ((ev_tapp EV2' EV1') : (tapp M1 T2 \n/ V')) Q
         &lt;- eval_determ EV1 EV1' Q1
         &lt;- eq_tlam Q1 (eqt_ref : eqt T2 T2) Q3
         &lt;- eq_sym Q3 Q4
         &lt;- eq_eval Q4 EV2' EV2s
         &lt;- eval_determ EV2 EV2s Q.

eval_determ_letb : eval_determ ((ev_letb EV2 EV1) : (letb M1 M2) \n/ V)
                               ((ev_letb EV2' EV1') : (letb M1 M2 \n/ V')) Q
         &lt;- eval_determ EV1 EV1' Q1
         &lt;- eq_thunk Q1 Q2
         &lt;- eq_ctx Q2 M2 Q3
         &lt;- eq_sym Q3 Q4
         &lt;- eq_eval Q4 EV2' EV2s
         &lt;- eval_determ EV2 EV2s Q.

eval_determ_letu : eval_determ ((ev_letu EV2 EV1) : (letu M1 M2) \n/ V)
                               ((ev_letu EV2' EV1') : (letu M1 M2 \n/ V')) Q
         &lt;- eval_determ EV2 EV2' Q.

eval_determ_lett : eval_determ ((ev_lett EV2 EV1) : (lett M1 M2) \n/ V)
                               ((ev_lett EV2' EV1') : (lett M1 M2 \n/ V')) Q
         &lt;- eval_determ EV1 EV1' Q1
         &lt;- eq_tens Q1 Q2 Q3
         &lt;- eq_ctx2 Q2 Q3 M2 Q4
         &lt;- eq_sym Q4 Q4'
         &lt;- eq_eval Q4' EV2' EV2s
         &lt;- eval_determ EV2 EV2s Q.

%worlds () (eval_determ _ _ _).
%freeze eval_determ.
%total D (eval_determ D _ _).
&lt;/twelf&gt;
And transitive:
&lt;twelf&gt;
eval_trans : M \n/ V -&gt; V \n/ V' -&gt; M \n/ V' -&gt; type.
%mode eval_trans +EV +EV' -EV_.

eval_trans_rule : eval_trans EV EV' EV_
                   &lt;- value_soundness EV Vv
                   &lt;- selfeval Vv EVv'
                   &lt;- eval_determ EVv' EV' Q
                   &lt;- eq_eval2 Q EV EV_.

%worlds () (eval_trans _ _ _).
%total \{\} (eval_trans _ _ _).

eq_val : eq M M' -&gt; value M -&gt; value M' -&gt; type.
%mode eq_val +Q +V -V'.
eq_val_rule : eq_val eq_ref V V.
%worlds () (eq_val _ _ _).
%freeze eval_trans.
%total \{\} (eq_val _ _ _).

&lt;/twelf&gt;

#
# Frame stack semantics
The abstract machine is defined as a relation on tuples consisting of a frame stack and a term to evaluate in that stack.

#
#
# Evaluation frames
The frame stack is a stack of evaluation frames that provides a context on which we will continue evaluation after we have computed a value for the current term.
&lt;twelf&gt;
frame : (term -&gt; term) -&gt; type. %name frame F.

fletb : \{M\} frame [a] letb a M.
fapp :  \{M\} frame [a] app a M.
ftapp : \{T\} frame [a] tapp a T.
fletu : \{M\} frame [a] letu a M.
flett : \{M\} frame [a] lett a M.
%freeze frame.
&lt;/twelf&gt;

Evaluation frames are functions from terms to terms and sometimes I need to apply such a function to a term.
&lt;twelf&gt;
frameapp : frame F -&gt; term -&gt; term -&gt; type.
%mode frameapp +F +M -M'.

frameapp_app : % \{F : frame F'\} 
         frameapp (F : frame F') M (F' M).

%worlds () (frameapp _ _ _).
%freeze frameapp.
%total D (frameapp D _ _).

frameapp_exists : \{F\}\{M\} (frameapp F M M') -&gt; type.
%mode frameapp_exists +F +M -FM.
frameapp_exists_rule : frameapp_exists F M frameapp_app.
%worlds () (frameapp_exists _ _ _).
%freeze frameapp_exists.
%total D (frameapp_exists D _ _).
&lt;/twelf&gt;

The definition of the frame stack and application of frame stacks to terms.
&lt;twelf&gt;
framestack : type. %name framestack Fs.

cons : frame F -&gt; framestack -&gt; framestack.
nil : framestack. %freeze framestack.

frameapply : framestack -&gt; term -&gt; term -&gt; type.
%mode frameapply +FS +M -M'.

frameapply_nil : frameapply nil M M.
frameapply_cons : frameapply (cons F Fs) M M'
                  &lt;- frameapp F M M_
                  &lt;- frameapply Fs M_ M'.

%worlds () (frameapply _ _ _).
%freeze frameapply.
%total D (frameapply D _ _).
&lt;/twelf&gt;
I should move you:
&lt;twelf&gt;
%block blam : block \{y:term\}.
&lt;/twelf&gt;

#
#
# Equalities on frame stacks
I also need some equational reasoning on frame stacks:
&lt;twelf&gt;
eqf : framestack -&gt; framestack -&gt; type.
%mode eqf +Fs -Fs'.
eqf_ref : eqf Fs Fs.
%freeze eqf.

eqf_symm : eqf Fs Fs' -&gt; eqf Fs' Fs -&gt; type.
%mode eqf_symm +Q -Q'.
eqf_symm_rule : eqf_symm eqf_ref eqf_ref.
%worlds (blam) (eqf_symm _ _).
%freeze eqf_symm.
%total \{\} (eqf_symm _ _).

eqf_trans : eqf Fs Fs' -&gt; eqf Fs' Fs_ -&gt; eqf Fs Fs_ -&gt; type.
%mode eqf_trans +Q +Q' -Q_.
eqf_trans_rule : eqf_trans eqf_ref eqf_ref eqf_ref.
%worlds (blam) (eqf_trans _ _ _).
%freeze eqf_trans.
%total \{\} (eqf_trans _ _ _).

eqf_extend : \{F\} eqf Fs Fs' -&gt; eqf (cons F Fs) (cons F Fs') -&gt; type.
%mode eqf_extend +F +Q -Q'.
eqf_extend_rule : eqf_extend _ eqf_ref eqf_ref.
%worlds (blam) (eqf_extend _ _ _).
%freeze eqf_extend.
%total \{\} (eqf_extend _ _ _).

frameapply_eq : eqf Fs Fs' -&gt; frameapply Fs M FsM -&gt; frameapply Fs' M FsM -&gt; type.
%mode frameapply_eq +Q +FA -FA.
frameapply_eq_rule : frameapply_eq eqf_ref FA FA.
%worlds (blam) (frameapply_eq _ _ _).
%freeze frameapply_eq.
%total \{\} (frameapply_eq _ _ _).

frameapply_nil_eq : frameapply nil M M' -&gt; eq M M' -&gt; type.
%mode frameapply_nil_eq +F -Q.
frameapply_nil_eq_rule : frameapply_nil_eq frameapply_nil eq_ref.
%worlds (blam) (frameapply_nil_eq _ _).
%freeze frameapply_nil_eq.
%total \{\} (frameapply_nil_eq _ _).
&lt;/twelf&gt;

#
#
#
# More metatheorems about frame application
&lt;twelf&gt;
frameapply_exists : \{Fs\}\{M\} (frameapply Fs M M') -&gt; type.
%mode frameapply_exists +Fs +M -A.
frameapply_exists_nil : frameapply_exists nil M frameapply_nil.
frameapply_exists_cons_letu : frameapply_exists (cons (fletu N) Fs) M
                                                (frameapply_cons FsA frameapp_app)
         &lt;- frameapply_exists Fs (letu M N) FsA.
frameapply_exists_cons_letb : frameapply_exists (cons (fletb N) Fs) M 
                                                (frameapply_cons FsA frameapp_app)
         &lt;- frameapply_exists Fs (letb M N) FsA.
frameapply_exists_cons_lett : frameapply_exists (cons (flett N) Fs) M
                                                (frameapply_cons FsA frameapp_app)
         &lt;- frameapply_exists Fs (lett M N) FsA.
frameapply_exists_cons_app : frameapply_exists (cons (fapp N) Fs) M
                                                (frameapply_cons FsA frameapp_app)
         &lt;- frameapply_exists Fs (app M N) FsA.
frameapply_exists_cons_tapp : frameapply_exists (cons (ftapp N) Fs) M
                                               (frameapply_cons FsA frameapp_app)
         &lt;- frameapply_exists Fs (tapp M N) FsA.
%worlds () (frameapply_exists _ _ _).
%freeze frameapply_exists.
%total D (frameapply_exists D _ _).
&lt;/twelf&gt;

#
#
# Frame stack evaluation
Here I define the evaluation relation for the abstract machine.
&lt;twelf&gt;
--&gt; : framestack -&gt; term -&gt; framestack -&gt; term -&gt; type.
%mode --&gt; +Fs +M -Fs' -M'.

evfs_letu : --&gt; Fs (letu M N) (cons (fletu N) Fs) M.
evfs_letb : --&gt; Fs (letb M N) (cons (fletb N) Fs) M.
evfs_lett : --&gt; Fs (lett M N) (cons (flett N) Fs) M.
evfs_app  : --&gt; Fs (app M N) (cons (fapp N) Fs) M.
evfs_tapp : --&gt; Fs (tapp M T) (cons (ftapp T) Fs) M.

evfs_lam : --&gt; (cons (fapp N) Fs) (lam _ M') Fs (M' N).
evfs_tlam : --&gt; (cons (ftapp T) Fs) (tlam M') Fs (M' T).
evfs_unit : --&gt; (cons (fletu N) Fs) unit Fs N.
evfs_tens : --&gt; (cons (flett N) Fs) (tens M1 M2) Fs (N M1 M2).
evfs_thunk : --&gt; (cons (fletb N) Fs) (thunk T M) Fs (N (letb (thunk T M) M)).

%worlds () (--&gt; _ _ _ _).
%covers --&gt; -Fs +M -Fs' -M'.
%freeze --&gt;.

eq_step : eq M M' -&gt; --&gt; Fs M Fs1 M1 -&gt; --&gt; Fs M' Fs1 M1 -&gt; type.
%mode eq_step +Q +S -S'.
eq_step_rule : eq_step eq_ref S S.
%worlds () (eq_step _ _ _).
%total \{\} (eq_step _ _ _).

--&gt;* : framestack -&gt; term -&gt; framestack -&gt; term -&gt; type.

--&gt;*_ref : --&gt;* Fs M Fs M.
--&gt;*_step : --&gt;* Fs M Fs' M' 
        &lt;- --&gt; Fs_ M_ Fs' M'
        &lt;- --&gt;* Fs M Fs_ M_.
%freeze --&gt;*.
&lt;/twelf&gt;

#
#
# Meta theory of the abstract machine
Here are some basic properties of the abstract machine:
&lt;twelf&gt;
concat--&gt;* : (--&gt;* Fs M Fs_ M_) -&gt; (--&gt;* Fs_ M_ Fs' M') -&gt; (--&gt;* Fs M Fs' M') -&gt; type.
%mode concat--&gt;* +S1 +S2 -S.

concatref : concat--&gt;* S --&gt;*_ref S.
concatstep : concat--&gt;* S' (--&gt;*_step Ss S) (--&gt;*_step Sc S)
       &lt;- concat--&gt;* S' Ss Sc.

%worlds () (concat--&gt;* _ _ _).
%freeze concat--&gt;*.
%total D (concat--&gt;* _ D _).

--&gt;*_impossible : --&gt; nil V Fs M -&gt; value V -&gt; --&gt;* Fs' M' Fs_ M_ -&gt; type.
%mode +\{V:term\} +\{Fs:framestack\} +\{M:term\} +\{Fs':framestack\} +\{M':term\}
   +\{Fs_:framestack\} +\{M_:term\} +\{S:--&gt; nil V Fs M\} +\{V1:value V\}
      -\{R:--&gt;* Fs' M' Fs_ M_\} (--&gt;*_impossible S V1 R).
%worlds () (--&gt;*_impossible _ _ _).
%freeze --&gt;*_impossible.
%total \{\} (--&gt;*_impossible _ _ _).

lemma44 : \{Fs : framestack\} \{M\} frameapply Fs M FsM -&gt; (--&gt;* nil FsM Fs M) -&gt; type.
%mode lemma44 +Fs +M +FA -E.

lemma44_nil : lemma44 nil M frameapply_nil --&gt;*_ref.
lemma44_cons_letu : lemma44 (cons (fletu N) Fs) M
                            (frameapply_cons FA frameapp_app) (--&gt;*_step MS evfs_letu)
             &lt;- lemma44 Fs (letu M N) FA MS.
lemma44_cons_letb : lemma44 (cons (fletb N) Fs) M
                            (frameapply_cons FA frameapp_app) (--&gt;*_step MS evfs_letb)
             &lt;- lemma44 Fs (letb M N) FA MS.
lemma44_cons_lett : lemma44 (cons (flett N) Fs) M
                            (frameapply_cons FA frameapp_app) (--&gt;*_step MS evfs_lett)
             &lt;- lemma44 Fs (lett M N) FA MS.
lemma44_cons_app : lemma44 (cons (fapp N) Fs) M
                           (frameapply_cons FA frameapp_app) (--&gt;*_step MS evfs_app)
             &lt;- lemma44 Fs (app M N) FA MS.
lemma44_cons_tapp : lemma44 (cons (ftapp N) Fs) M
                            (frameapply_cons FA frameapp_app) (--&gt;*_step MS evfs_tapp)
             &lt;- lemma44 Fs (tapp M N) FA MS.
%worlds () (lemma44 _ _ _ _).
%freeze lemma44.
%total D (lemma44 D _ _ _).

frameApplyUnique : (frameapply Fs M FsM) -&gt; (frameapply Fs M FsM') -&gt; (eq FsM FsM') -&gt; type.
%mode frameApplyUnique +FA1 +FA2 -Q.

frameApplyUnique_nil : frameApplyUnique frameapply_nil frameapply_nil eq_ref.
frameApplyUnique_cons : frameApplyUnique (frameapply_cons FsA frameapp_app)
                                         (frameapply_cons FsA' frameapp_app) Q
                  &lt;- frameApplyUnique FsA FsA' Q.

%worlds () (frameApplyUnique _ _ _).
%freeze frameApplyUnique.
%total D (frameApplyUnique D _ _).
&lt;/twelf&gt;

#
# Correspondence between the big step semantics and the abstract machine
&lt;twelf&gt;
lemma48 : \{Fs\} \{M\} (M \n/ V) -&gt; (--&gt;* Fs M Fs V) -&gt; type.
%mode lemma48 +Fs +M +E -Ss.

lemma48_lam : lemma48 _ _ ev_lam --&gt;*_ref.
lemma48_tens : lemma48 _ _ ev_tens --&gt;*_ref.
lemma48_thunk : lemma48 _ _ ev_thunk --&gt;*_ref.
lemma48_tlam : lemma48 _ _ ev_tlam --&gt;*_ref.
lemma48_unit : lemma48 _ _ ev_unit --&gt;*_ref.

lemma48_app : lemma48 Fs (app M1 M2) (ev_app EM' EM1) Sr
        &lt;- lemma48 (cons (fapp M2) Fs) M1 (EM1 : M1 \n/ (lam _ M')) SM1
        &lt;- lemma48  Fs (M' M2) (EM' : (M' M2) \n/ V) SM'
        &lt;- concat--&gt;* (--&gt;*_step SM1 evfs_lam) SM' S
        &lt;- concat--&gt;* (--&gt;*_step --&gt;*_ref evfs_app) S Sr.

lemma48_tapp : lemma48 Fs (tapp M1 T) (ev_tapp EM' EM1) Sr
        &lt;- lemma48 (cons (ftapp T) Fs) M1 (EM1 : M1 \n/ (tlam M')) SM1
        &lt;- lemma48  Fs (M' T) (EM' : (M' T) \n/ V) SM'
        &lt;- concat--&gt;* (--&gt;*_step SM1 evfs_tlam) SM' S
        &lt;- concat--&gt;* (--&gt;*_step --&gt;*_ref evfs_tapp) S Sr.

lemma48_letu : lemma48 Fs (letu M1 M2) (ev_letu EM' EM1) Sr
        &lt;- lemma48 (cons (fletu M2) Fs) M1 (EM1 : M1 \n/ unit) SM1
        &lt;- lemma48  Fs M2 (EM' : M2 \n/ V) SM'
        &lt;- concat--&gt;* (--&gt;*_step SM1 evfs_unit) SM' S
        &lt;- concat--&gt;* (--&gt;*_step --&gt;*_ref evfs_letu) S Sr.

lemma48_letb : lemma48 Fs (letb M1 M2) (ev_letb EM' EM1) Sr
        &lt;- lemma48 (cons (fletb M2) Fs) M1 (EM1 : M1 \n/ (thunk T M')) SM1
        &lt;- lemma48  Fs (M2 (letb (thunk T M') M')) (EM' : (M2 (letb (thunk T M') M')) \n/ V) SM'
        &lt;- concat--&gt;* (--&gt;*_step SM1 evfs_thunk) SM' S
        &lt;- concat--&gt;* (--&gt;*_step --&gt;*_ref evfs_letb) S Sr.

lemma48_lett : lemma48 Fs (lett M1 M2) (ev_lett EM' EM1) Sr
        &lt;- lemma48 (cons (flett M2) Fs) M1 (EM1 : M1 \n/ (tens M' M_)) SM1
        &lt;- lemma48  Fs (M2 M' M_) (EM' : (M2 M' M_) \n/ V) SM'
        &lt;- concat--&gt;* (--&gt;*_step SM1 evfs_tens) SM' S
        &lt;- concat--&gt;* (--&gt;*_step --&gt;*_ref evfs_lett) S Sr.

%worlds () (lemma48 _ _ _ _).
%freeze lemma48.
%total D (lemma48 _ _ D _).

lemma46a : \{Fs : framestack\} (M' \n/ V) -&gt; (frameapply Fs M M') -&gt;
                             (frameapply Fs V' N) -&gt; (M \n/ V') -&gt; (N \n/ V) -&gt; type.
lemma46b : \{Fs : framestack\} (M \n/ V') -&gt; (N \n/ V) -&gt; (frameapply Fs M M') -&gt;
                             (frameapply Fs V' N) -&gt; (M' \n/ V) -&gt; type.
%mode lemma46a +Fs +As +FaM -FV' -Res1 -Res2.
%mode lemma46b +Fs +As1 +As2 +FaM +FV' -Res1.

lemma46a_nil : lemma46a nil E frameapply_nil frameapply_nil E EV
        &lt;- (value_soundness E Vv)
        &lt;- (selfeval Vv EV).

lemma46a_letu : lemma46a (cons (fletu N) Fs) (E : M' \n/ V) (frameapply_cons FA frameapp_app)
                         (frameapply_cons FAu frameapp_app) RM E' 
        &lt;- lemma46a Fs E FA FA' (ev_letu (RN : N \n/ V') RM) (R2 : _ \n/ V)
        &lt;- frameapply_exists Fs (letu unit N) FAu
        &lt;- lemma46b Fs (ev_letu RN ev_unit : letu unit N \n/ V') R2 FAu FA' E'.

lemma46a_app : lemma46a (cons (fapp N) Fs) (E : M' \n/ V) (frameapply_cons FA frameapp_app)
                        (frameapply_cons FAu frameapp_app) RM E' 
        &lt;- lemma46a Fs E FA FA' (ev_app RN (RM : M \n/ (lam T M1))) R2
        &lt;- frameapply_exists Fs (app (lam T M1) N) FAu
        &lt;- lemma46b Fs (ev_app RN ev_lam) R2 FAu FA' E'.
lemma46a_tapp : lemma46a (cons (ftapp N) Fs) (E : M' \n/ V) (frameapply_cons FA frameapp_app)
                         (frameapply_cons FAu frameapp_app) RM E' 
        &lt;- lemma46a Fs E FA FA' (ev_tapp RN (RM : M \n/ (tlam T))) R2
        &lt;- frameapply_exists Fs (tapp (tlam T) N) FAu
        &lt;- lemma46b Fs (ev_tapp RN ev_tlam) R2 FAu FA' E'.

lemma46a_letb : lemma46a (cons (fletb N) Fs) (E : M' \n/ V) (frameapply_cons FA frameapp_app)
                         (frameapply_cons FAu frameapp_app) RM E' 
        &lt;- lemma46a Fs E FA FA' (ev_letb RN (RM : M \n/ (thunk T M1))) R2
        &lt;- frameapply_exists Fs (letb (thunk T M1) N) FAu
        &lt;- lemma46b Fs (ev_letb RN ev_thunk) R2 FAu FA' E'.

lemma46a_lett : lemma46a (cons (flett N) Fs) (E : M' \n/ V) (frameapply_cons FA frameapp_app)
                         (frameapply_cons FAu frameapp_app) RM E' 
        &lt;- lemma46a Fs E FA FA' (ev_lett RN (RM : M \n/ (tens M1 M2))) R2
        &lt;- frameapply_exists Fs (lett (tens M1 M2) N) FAu
        &lt;- lemma46b Fs (ev_lett RN ev_tens) R2 FAu FA' E'.

lemma46b_nil : lemma46b nil (E : M1 \n/ M2) E' frameapply_nil frameapply_nil E_
        &lt;- value_soundness E V
        &lt;- selfeval V EV
        &lt;- eval_determ EV E' Q
        &lt;- eq_eval2 Q E E_.

lemma46b_letu : lemma46b (cons (fletu M6) Fs1) E1 E2 (frameapply_cons X1 frameapp_app)
                         (frameapply_cons X2 frameapp_app) E3
        &lt;- lemma46a Fs1 E2 X2 X3 (ev_letu EM6 EM2) EN
        &lt;- eval_trans E1 EM2 EM1
        &lt;- lemma46b Fs1 (ev_letu EM6 EM1) EN X1 X3 E3.

lemma46b_lett : lemma46b (cons (flett M6) Fs1) E1 E2 (frameapply_cons X1 frameapp_app)
                         (frameapply_cons X2 frameapp_app) E3
        &lt;- lemma46a Fs1 E2 X2 X3 (ev_lett EM6 EM2) EN
        &lt;- eval_trans E1 EM2 EM1
        &lt;- lemma46b Fs1 (ev_lett EM6 EM1) EN X1 X3 E3.

lemma46b_app : lemma46b (cons (fapp M6) Fs1) E1 E2 (frameapply_cons X1 frameapp_app)
                        (frameapply_cons X2 frameapp_app) E3
        &lt;- lemma46a Fs1 E2 X2 X3 (ev_app EM6 EM2) EN
        &lt;- eval_trans E1 EM2 EM1
        &lt;- lemma46b Fs1 (ev_app EM6 EM1) EN X1 X3 E3.

lemma46b_tapp : lemma46b (cons (ftapp M6) Fs1) E1 E2 (frameapply_cons X1 frameapp_app)
                         (frameapply_cons X2 frameapp_app) E3
        &lt;- lemma46a Fs1 E2 X2 X3 (ev_tapp EM6 EM2) EN
        &lt;- eval_trans E1 EM2 EM1
        &lt;- lemma46b Fs1 (ev_tapp EM6 EM1) EN X1 X3 E3.

lemma46b_letb : lemma46b (cons (fletb M6) Fs1) E1 E2 (frameapply_cons X1 frameapp_app)
                         (frameapply_cons X2 frameapp_app) E3
        &lt;- lemma46a Fs1 E2 X2 X3 (ev_letb EM6 EM2) EN
        &lt;- eval_trans E1 EM2 EM1
        &lt;- lemma46b Fs1 (ev_letb EM6 EM1) EN X1 X3 E3.

%worlds () (lemma46a _ _ _ _ _ _) (lemma46b _ _ _ _ _ _).
%freeze lemma46b lemma46a.
%total (D E) (lemma46a D _ _ _ _ _) (lemma46b E _ _ _ _ _).

lemma47 : (--&gt; Fs M Fs' M') -&gt; (frameapply Fs' M' FsM') -&gt; (frameapply Fs M FsM) -&gt;
                               (FsM' \n/ V) -&gt; (FsM \n/ V) -&gt; type.
%mode lemma47 +S +FA' -FA +EV' -EV.

lemma47_letu : lemma47 evfs_letu (frameapply_cons X1 frameapp_app) X1 EV' EV'.
lemma47_letb : lemma47 evfs_letb (frameapply_cons X1 frameapp_app) X1 EV' EV'.
lemma47_lett : lemma47 evfs_lett (frameapply_cons X1 frameapp_app) X1 EV' EV'.
lemma47_app : lemma47 evfs_app (frameapply_cons X1 frameapp_app) X1 EV' EV'.
lemma47_tapp : lemma47 evfs_tapp (frameapply_cons X1 frameapp_app) X1 EV' EV'.

lemma47_unit : lemma47 evfs_unit X1 (frameapply_cons X3 frameapp_app) EV' EV
         &lt;- lemma46a Fs EV' X1 X2 (EM2 : M2 \n/ V') EN
         &lt;- frameapply_exists Fs (letu unit M2) X3
         &lt;- lemma46b Fs (ev_letu EM2 ev_unit) EN X3 X2 EV.

lemma47_tens : lemma47 evfs_tens X1 (frameapply_cons X3 frameapp_app) EV' EV
         &lt;- lemma46a Fs EV' X1 X2 EM2  EN
         &lt;- frameapply_exists Fs (lett (tens M3 M4) M2) X3
         &lt;- lemma46b Fs (ev_lett EM2 ev_tens) EN X3 X2 EV.

lemma47_thunk : lemma47 evfs_thunk X1 (frameapply_cons X3 frameapp_app) EV' EV
         &lt;- lemma46a Fs EV' X1 X2 EM2  EN
         &lt;- frameapply_exists Fs (letb (thunk T M4) M2) X3
         &lt;- lemma46b Fs (ev_letb EM2 ev_thunk) EN X3 X2 EV.

lemma47_lam : lemma47 evfs_lam X1 (frameapply_cons X3 frameapp_app) EV' EV
         &lt;- lemma46a Fs EV' X1 X2 EM2  EN
         &lt;- frameapply_exists Fs (app (lam T M4) M2) X3
         &lt;- lemma46b Fs (ev_app EM2 ev_lam) EN X3 X2 EV.

lemma47_tlam : lemma47 evfs_tlam X1 (frameapply_cons X3 frameapp_app) EV' EV
         &lt;- lemma46a Fs EV' X1 X2 EM2  EN
         &lt;- frameapply_exists Fs (tapp (tlam M4) M2) X3
         &lt;- lemma46b Fs (ev_tapp EM2 ev_tlam) EN X3 X2 EV.

%worlds () (lemma47 _ _ _ _ _).
%freeze lemma47.
%total S (lemma47 S _ _ _ _).

--&gt;r* : framestack -&gt; term -&gt; framestack -&gt; term -&gt; type.

--&gt;r*_ref : --&gt;r* Fs M Fs M.
--&gt;r*_step : --&gt;r* Fs M Fs' M' 
        &lt;- --&gt; Fs M Fs_ M_
        &lt;- --&gt;r* Fs_ M_ Fs' M'.
%freeze --&gt;r*.

concat--&gt;r* : --&gt;r* Fs M Fs' M' -&gt; --&gt;r* Fs' M' Fs_ M_ -&gt; --&gt;r* Fs M Fs_ M_ -&gt; type.
%mode concat--&gt;r* +A +B -C.

concat--&gt;r*_ref : concat--&gt;r* --&gt;r*_ref D D.
concat--&gt;r*_step : concat--&gt;r* (--&gt;r*_step R S) D (--&gt;r*_step D' S)
              &lt;- concat--&gt;r* R D D'.

%worlds () (concat--&gt;r* _ _ _).
%freeze concat--&gt;r*.
%total D (concat--&gt;r* D _ _).

--&gt;r*_impossible : --&gt; nil V Fs M -&gt; value V -&gt; --&gt;r* Fs' M' Fs_ M_ -&gt; type.
%mode +\{V:term\} +\{Fs:framestack\} +\{M:term\} +\{Fs':framestack\} +\{M':term\}
   +\{Fs_:framestack\} +\{M_:term\} +\{S:--&gt; nil V Fs M\} +\{V1:value V\}
      -\{R:--&gt;r* Fs' M' Fs_ M_\} (--&gt;r*_impossible S V1 R).
%worlds () (--&gt;r*_impossible _ _ _).
%freeze --&gt;r*_impossible.
%total \{\} (--&gt;r*_impossible _ _ _).

concat--&gt;r*_exists :  \{R : --&gt;r* F1 M1 Fs M\} 
                      \{S : --&gt;r* (Fs : framestack) (M : term) (Fs2 : framestack) (M2 : term)\}
                      (concat--&gt;r* R S RS) -&gt; type.
%mode concat--&gt;r*_exists +R +S -P.

concat--&gt;r*_exists_ref : concat--&gt;r*_exists --&gt;r*_ref _ concat--&gt;r*_ref.
concat--&gt;r*_exists_step : concat--&gt;r*_exists (--&gt;r*_step R S) B (concat--&gt;r*_step E)
            &lt;- concat--&gt;r*_exists R B E.

%worlds () (concat--&gt;r*_exists _ _ _).
%freeze concat--&gt;r*_exists.
%total D (concat--&gt;r*_exists D _ _).

--&gt;*_to_--&gt;r*_lem : --&gt;* Fs M Fs' M' -&gt; --&gt;r* Fs M Fs' M' -&gt; type.
%mode --&gt;*_to_--&gt;r*_lem +F -R.

--&gt;*_to_--&gt;r*_lem_ref : --&gt;*_to_--&gt;r*_lem --&gt;*_ref --&gt;r*_ref.

--&gt;*_to_--&gt;r*_lem_step : --&gt;*_to_--&gt;r*_lem (--&gt;*_step R S) R_
            &lt;- --&gt;*_to_--&gt;r*_lem R R'
            &lt;- concat--&gt;r* R' (--&gt;r*_step --&gt;r*_ref S) R_.

%worlds () (--&gt;*_to_--&gt;r*_lem _ _).
%freeze --&gt;*_to_--&gt;r*_lem.
%total D (--&gt;*_to_--&gt;r*_lem D _).

--&gt;r*_to_--&gt;*_lem : --&gt;r* Fs M Fs' M' -&gt; --&gt;* Fs M Fs' M' -&gt; type.
%mode --&gt;r*_to_--&gt;*_lem +F -R.

--&gt;r*_to_--&gt;*_lem_ref : --&gt;r*_to_--&gt;*_lem --&gt;r*_ref --&gt;*_ref.

--&gt;r*_to_--&gt;*_lem_step : --&gt;r*_to_--&gt;*_lem (--&gt;r*_step R S) R_
            &lt;- --&gt;r*_to_--&gt;*_lem R R'
            &lt;- concat--&gt;* (--&gt;*_step --&gt;*_ref S) R' R_.

%worlds () (--&gt;r*_to_--&gt;*_lem _ _).
%freeze --&gt;r*_to_--&gt;*_lem.
%total D (--&gt;r*_to_--&gt;*_lem D _).

--&gt;r*_add_step : (--&gt; Fs M Fs' M') -&gt; (--&gt;r* Fs M nil V) -&gt; (value V) -&gt;
                                      (--&gt;r* Fs' M' nil V) -&gt; type.
%mode --&gt;r*_add_step +S +R +V -R'.

--&gt;r*_add_step_ref : --&gt;r*_add_step S --&gt;r*_ref V R
          &lt;- --&gt;r*_impossible S V R.

--&gt;r*_add_step_step : --&gt;r*_add_step S (--&gt;r*_step Rr S) V Rr.

%worlds () (--&gt;r*_add_step _ _ _ _).
%freeze --&gt;r*_add_step.
%total \{\} (--&gt;r*_add_step _ _ _ _).

--&gt;*_add_step : (--&gt; Fs M Fs' M') -&gt; (--&gt;* Fs M nil V) -&gt; (value V) -&gt;
                                     (--&gt;* Fs' M' nil V) -&gt; type.
%mode --&gt;*_add_step +S +R +V -R'.

--&gt;*_add_step_rule : --&gt;*_add_step S R V R'
            &lt;- --&gt;*_to_--&gt;r*_lem R Rr
            &lt;- --&gt;r*_add_step S Rr V R'r
            &lt;- --&gt;r*_to_--&gt;*_lem R'r R'.

%worlds () (--&gt;*_add_step _ _ _ _).
%freeze --&gt;*_add_step.
%total \{\} (--&gt;*_add_step _ _ _ _).

--&gt;*_to_--&gt;r*_lem_exists : \{S : --&gt;* _ _ _ _\} --&gt;*_to_--&gt;r*_lem S R -&gt; type.
%mode --&gt;*_to_--&gt;r*_lem_exists +S -P.

--&gt;*_to_--&gt;r*_lem_exists_ref : --&gt;*_to_--&gt;r*_lem_exists --&gt;*_ref --&gt;*_to_--&gt;r*_lem_ref.

--&gt;*_to_--&gt;r*_lem_exists_step : --&gt;*_to_--&gt;r*_lem_exists (--&gt;*_step R S) (--&gt;*_to_--&gt;r*_lem_step R_ R')
         &lt;- --&gt;*_to_--&gt;r*_lem_exists R (R' : --&gt;*_to_--&gt;r*_lem R Rr)
         &lt;- concat--&gt;r*_exists Rr (--&gt;r*_step --&gt;r*_ref S) R_.

%worlds () (--&gt;*_to_--&gt;r*_lem_exists _ _).
%freeze --&gt;*_to_--&gt;r*_lem_exists.
%total D (--&gt;*_to_--&gt;r*_lem_exists D _).

eq_frame_eval_lemma : --&gt;r* Fs M nil V -&gt; value V -&gt; frameapply Fs M FsM -&gt; FsM \n/ V -&gt; type.
%mode eq_frame_eval_lemma +V +L -FA -EV.

eq_frame_eval_lemma_z : eq_frame_eval_lemma --&gt;r*_ref V frameapply_nil EV
             &lt;- selfeval V EV.

eq_frame_eval_lemma_s : eq_frame_eval_lemma (--&gt;r*_step R S) V FA EV
             &lt;- eq_frame_eval_lemma R V FA' EV'
             &lt;- lemma47 S FA' FA EV' EV.

%worlds () (eq_frame_eval_lemma _ _ _ _) .
%freeze eq_frame_eval_lemma.
%total D (eq_frame_eval_lemma D _ _ _).

eq_frame_eval : --&gt;* Fs M nil V -&gt; value V -&gt; frameapply Fs M FsM -&gt; FsM \n/ V -&gt; type.
%mode eq_frame_eval +V +L -FA -EV.

eq_frame_eval_rule : eq_frame_eval FE V FA E
        &lt;- --&gt;*_to_--&gt;r*_lem FE R
        &lt;- eq_frame_eval_lemma R V FA E.

%worlds () (eq_frame_eval _ _ _ _).
%freeze eq_frame_eval.
%total D (eq_frame_eval D _ _ _).

--&gt;*_skew : --&gt;* Fs M nil V -&gt; (value V) -&gt; (--&gt;* Fs M Fs' M') -&gt; (--&gt;* Fs' M' nil V) -&gt; type.
%mode --&gt;*_skew +R +V +R' -R_.

--&gt;*_skew_ref : --&gt;*_skew R V --&gt;*_ref R.

--&gt;*_skew_step : --&gt;*_skew R V (--&gt;*_step Rest S) RI
       &lt;- --&gt;*_skew R V Rest RI'
       &lt;- --&gt;*_add_step S RI' V RI.

%worlds () (--&gt;*_skew _ _ _ _) .
%freeze --&gt;*_skew.
%total D (--&gt;*_skew _ _ D _).

eq_eval_frame : (frameapply Fs M FsM) -&gt; (FsM \n/ V) -&gt; (--&gt;* Fs M nil V) -&gt; type.
%mode eq_eval_frame +FA +EV -R.

eq_eval_frame_rule : eq_eval_frame (FA : frameapply Fs M FsM) EV R
            &lt;- lemma44 Fs M FA R_
            &lt;- lemma48 nil FsM EV R'
            &lt;- value_soundness EV V
            &lt;- --&gt;*_skew R' V R_ R.

%worlds () (eq_eval_frame _ _ _).
%freeze eq_eval_frame.
%total \{\} (eq_eval_frame _ _ _).
&lt;/twelf&gt;

#
#
#
# Termination relation on the abstract machine
&lt;twelf&gt;
frameterm : framestack -&gt; term -&gt; type.

frameterm_val : frameterm nil V &lt;- value V. 
frameterm_app : frameterm Fs (app M1 M2) &lt;- frameterm (cons (fapp M2) Fs) M1.
frameterm_tapp : frameterm Fs (tapp M T) &lt;- frameterm (cons (ftapp T) Fs) M.
frameterm_letu : frameterm Fs (letu M1 M2) &lt;- frameterm (cons (fletu M2) Fs) M1.
frameterm_letb : frameterm Fs (letb M1 M2) &lt;- frameterm (cons (fletb M2) Fs) M1.
frameterm_lett : frameterm Fs (lett M1 M2) &lt;- frameterm (cons (flett M2) Fs) M1.
frameterm_lam : frameterm (cons (fapp M2) Fs) (lam T M1) &lt;- frameterm Fs (M1 M2).
frameterm_tlam : frameterm (cons (ftapp T) Fs) (tlam M1) &lt;- frameterm Fs (M1 T).
frameterm_tens : frameterm (cons (flett M3) Fs) (tens M1 M2) &lt;- frameterm Fs (M3 M1 M2).
frameterm_thunk : frameterm (cons (fletb M2) Fs) (thunk T M1) &lt;- frameterm Fs (M2 (letb (thunk T M1) M1)).
frameterm_unit : frameterm (cons (fletu M3) Fs) unit &lt;- frameterm Fs M3.
%freeze frameterm.

frameterm_eq_frames : eqf Fs Fs' -&gt; eq M M' -&gt; frameterm Fs M -&gt; frameterm Fs' M' -&gt; type.
%mode frameterm_eq_frames +Q +Q' +Ft -Ft.
frameterm_eq_frames_rule : frameterm_eq_frames eqf_ref eq_ref Ft Ft.
%worlds () (frameterm_eq_frames _ _ _ _).
%freeze frameterm_eq_frames.
%total \{\} (frameterm_eq_frames _ _ _ _).

eq_frameterms : frameterm Fs M -&gt; frameterm Fs M -&gt; type.
%mode eq_frameterms +FT -FT'.
eq_frameterms_ref : eq_frameterms F F.
%worlds () (eq_frameterms _ _).
%freeze eq_frameterms.
%total \{\} (eq_frameterms _ _).

inverse_ft_app : frameterm Fs (app M1 M2) -&gt; frameterm (cons (fapp M2) Fs) M1 -&gt; type.
%mode inverse_ft_app +Ft -Ft'.
inverse_ft_app_rule : inverse_ft_app (frameterm_app Ft) Ft.
%worlds () (inverse_ft_app _ _).
%reduces D &lt; E (inverse_ft_app E D).
%total \{\} (inverse_ft_app _ _).

inverse_ft_tapp : frameterm Fs (tapp M1 M2) -&gt; frameterm (cons (ftapp M2) Fs) M1 -&gt; type.
%mode inverse_ft_tapp +Ft -Ft'.
inverse_ft_tapp_rule : inverse_ft_tapp (frameterm_tapp Ft) Ft.
%worlds () (inverse_ft_tapp _ _).
%reduces D &lt; E (inverse_ft_tapp E D).
%total \{\} (inverse_ft_tapp _ _).

inverse_ft_letu : frameterm Fs (letu M1 M2) -&gt; frameterm (cons (fletu M2) Fs) M1 -&gt; type.
%mode inverse_ft_letu +Ft -Ft'.
inverse_ft_letu_rule : inverse_ft_letu (frameterm_letu Ft) Ft.
%worlds () (inverse_ft_letu _ _).
%reduces D &lt; E (inverse_ft_letu E D).
%total \{\} (inverse_ft_letu _ _).

inverse_ft_lett : frameterm Fs (lett M1 M2) -&gt; frameterm (cons (flett M2) Fs) M1 -&gt; type.
%mode inverse_ft_lett +Ft -Ft'.
inverse_ft_lett_rule : inverse_ft_lett (frameterm_lett Ft) Ft.
%worlds () (inverse_ft_lett _ _).
%reduces D &lt; E (inverse_ft_lett E D).
%total \{\} (inverse_ft_lett _ _).

inverse_ft_letb : frameterm Fs (letb M1 M2) -&gt; frameterm (cons (fletb M2) Fs) M1 -&gt; type.
%mode inverse_ft_letb +Ft -Ft'.
inverse_ft_letb_rule : inverse_ft_letb (frameterm_letb Ft) Ft.
%worlds () (inverse_ft_letb _ _).
%reduces D &lt; E (inverse_ft_letb E D).
%total \{\} (inverse_ft_letb _ _).
&lt;/twelf&gt;

The termination relation is really about the machine.
&lt;twelf&gt;
frameterm_eq_f : frameterm Fs M -&gt; --&gt;r* Fs M nil V -&gt; value V -&gt; type.
%mode frameterm_eq_f +FT -R -V.

frameterm_eq_f_val : frameterm_eq_f (frameterm_val V) --&gt;r*_ref V.
frameterm_eq_f_app : frameterm_eq_f (frameterm_app FT) (--&gt;r*_step R evfs_app) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_tapp : frameterm_eq_f (frameterm_tapp FT) (--&gt;r*_step R evfs_tapp) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_letu : frameterm_eq_f (frameterm_letu FT) (--&gt;r*_step R evfs_letu) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_letb : frameterm_eq_f (frameterm_letb FT) (--&gt;r*_step R evfs_letb) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_lett : frameterm_eq_f (frameterm_lett FT) (--&gt;r*_step R evfs_lett) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_lam : frameterm_eq_f (frameterm_lam FT) (--&gt;r*_step R evfs_lam) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_tlam : frameterm_eq_f (frameterm_tlam FT) (--&gt;r*_step R evfs_tlam) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_tens : frameterm_eq_f (frameterm_tens FT) (--&gt;r*_step R evfs_tens) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_unit : frameterm_eq_f (frameterm_unit FT) (--&gt;r*_step R evfs_unit) V
        &lt;- frameterm_eq_f FT R V.
frameterm_eq_f_thunk : frameterm_eq_f (frameterm_thunk FT) (--&gt;r*_step R evfs_thunk) V
        &lt;- frameterm_eq_f FT R V.

%worlds () (frameterm_eq_f _ _ _).
%freeze frameterm_eq_f.
%total D (frameterm_eq_f D _ _).

frameterm_eq1 : frameterm Fs M -&gt; --&gt;* Fs M nil V -&gt; value V -&gt; type.
%mode frameterm_eq1 +FT -R -V.
frameterm_eq1_rule : frameterm_eq1 FT R V
         &lt;- frameterm_eq_f FT R' V
         &lt;- --&gt;r*_to_--&gt;*_lem R' R.
%worlds () (frameterm_eq1 _ _ _).
%freeze frameterm_eq1.
%total \{\} (frameterm_eq1 _ _ _).

frameterm_eq2_r : --&gt;r* Fs M nil V -&gt; value V -&gt; frameterm Fs M -&gt; type.
%mode frameterm_eq2_r +R +V -FT.

frameterm_eq2_r_ref : frameterm_eq2_r --&gt;r*_ref V (frameterm_val V).
frameterm_eq2_r_app : frameterm_eq2_r (--&gt;r*_step R evfs_app) V (frameterm_app F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_tapp : frameterm_eq2_r (--&gt;r*_step R evfs_tapp) V (frameterm_tapp F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_letu : frameterm_eq2_r (--&gt;r*_step R evfs_letu) V (frameterm_letu F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_letb : frameterm_eq2_r (--&gt;r*_step R evfs_letb) V (frameterm_letb F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_lett : frameterm_eq2_r (--&gt;r*_step R evfs_lett) V (frameterm_lett F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_lam : frameterm_eq2_r (--&gt;r*_step R evfs_lam) V (frameterm_lam F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_tlam : frameterm_eq2_r (--&gt;r*_step R evfs_tlam) V (frameterm_tlam F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_tens : frameterm_eq2_r (--&gt;r*_step R evfs_tens) V (frameterm_tens F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_unit : frameterm_eq2_r (--&gt;r*_step R evfs_unit) V (frameterm_unit F)
              &lt;- frameterm_eq2_r R V F.
frameterm_eq2_r_thunk : frameterm_eq2_r (--&gt;r*_step R evfs_thunk) V (frameterm_thunk F)
              &lt;- frameterm_eq2_r R V F.

%worlds () (frameterm_eq2_r _ _ _).
%freeze frameterm_eq2_r.
%total D (frameterm_eq2_r D _ _).

frameterm_eq2 : --&gt;* Fs M nil V -&gt; value V -&gt; frameterm Fs M -&gt; type.
%mode frameterm_eq2 +R +V -FT.
frameterm_eq2_rule : frameterm_eq2 R V F
            &lt;- --&gt;*_to_--&gt;r*_lem R R'
            &lt;- frameterm_eq2_r R' V F.
%worlds () (frameterm_eq2 _ _ _).
%freeze frameterm_eq2.
%total \{\} (frameterm_eq2 _ _ _).

eval_frameterm : M \n/ V -&gt; frameterm nil M -&gt; type.
%mode eval_frameterm +EV -FT.
eval_frameterm_rule : eval_frameterm EV FT
           &lt;- value_soundness EV Vv
           &lt;- eq_eval_frame frameapply_nil EV R
           &lt;- frameterm_eq2 R Vv FT.
%worlds () (eval_frameterm _ _).
%freeze eval_frameterm.
%total \{\} (eval_frameterm _ _).

frameterm_eval : frameterm nil M -&gt; M \n/ V -&gt; type.
%mode frameterm_eval +FT -EV.
frameterm_eval_rule : frameterm_eval FT EV
      &lt;- frameterm_eq1 FT R V
      &lt;- eq_frame_eval R V FA EV'
      &lt;- frameapply_nil_eq FA Q
      &lt;- eq_sym Q Q'
      &lt;- eq_eval Q' EV' EV.
%worlds () (frameterm_eval _ _).
%freeze frameterm_eval.
%total \{\} (frameterm_eval _ _).
&lt;/twelf&gt;
Excellent. We now know that termination in the frame stack semantics is the same as evaluation in the big step semantics. The nice thing about the termination relation is that it supplies us with an inductive description of termination.

#
#
#
# Termination is invariant under evaluation
&lt;twelf&gt;
lemma413a : --&gt;* Fs M Fs' M' -&gt; frameterm Fs M -&gt; frameterm Fs' M' -&gt; type.
%mode lemma413a +R +FT -FT'.

lemma413a_ref : lemma413a --&gt;*_ref FT FT.
lemma413a_thunk : lemma413a (--&gt;*_step R evfs_thunk) FT FT'
        &lt;- lemma413a R FT (frameterm_thunk FT').
lemma413a_app : lemma413a (--&gt;*_step R evfs_app) FT FT'
        &lt;- lemma413a R FT (frameterm_app FT').
lemma413a_tapp : lemma413a (--&gt;*_step R evfs_tapp) FT FT'
        &lt;- lemma413a R FT (frameterm_tapp FT').
lemma413a_letu : lemma413a (--&gt;*_step R evfs_letu) FT FT'
        &lt;- lemma413a R FT (frameterm_letu FT').
lemma413a_letb : lemma413a (--&gt;*_step R evfs_letb) FT FT'
        &lt;- lemma413a R FT (frameterm_letb FT').
lemma413a_lett : lemma413a (--&gt;*_step R evfs_lett) FT FT'
        &lt;- lemma413a R FT (frameterm_lett FT').
lemma413a_lam : lemma413a (--&gt;*_step R evfs_lam) FT FT'
        &lt;- lemma413a R FT (frameterm_lam FT').
lemma413a_tlam : lemma413a (--&gt;*_step R evfs_tlam) FT FT'
        &lt;- lemma413a R FT (frameterm_tlam FT').
lemma413a_tens : lemma413a (--&gt;*_step R evfs_tens) FT FT'
        &lt;- lemma413a R FT (frameterm_tens FT').
lemma413a_unit : lemma413a (--&gt;*_step R evfs_unit) FT FT'
        &lt;- lemma413a R FT (frameterm_unit FT').

%worlds () (lemma413a _ _ _).
%freeze lemma413a.
%total D (lemma413a D _ _).

lemma413b : --&gt;r* Fs M Fs' M' -&gt; frameterm Fs' M' -&gt; frameterm Fs M -&gt; type.
%mode lemma413b +R +FT -FT'.

lemma413b_ref : lemma413b --&gt;r*_ref FT FT.
lemma413b_thunk : lemma413b (--&gt;r*_step R evfs_thunk) FT (frameterm_thunk FT')
        &lt;- lemma413b R FT FT'.
lemma413b_app : lemma413b (--&gt;r*_step R evfs_app) FT (frameterm_app FT')
        &lt;- lemma413b R FT FT'.
lemma413b_tapp : lemma413b (--&gt;r*_step R evfs_tapp) FT (frameterm_tapp FT')
        &lt;- lemma413b R FT FT'.
lemma413b_letu : lemma413b (--&gt;r*_step R evfs_letu) FT (frameterm_letu FT')
        &lt;- lemma413b R FT FT'.
lemma413b_letb : lemma413b (--&gt;r*_step R evfs_letb) FT (frameterm_letb FT')
        &lt;- lemma413b R FT FT'.
lemma413b_lett : lemma413b (--&gt;r*_step R evfs_lett) FT (frameterm_lett FT')
        &lt;- lemma413b R FT FT'.
lemma413b_lam : lemma413b (--&gt;r*_step R evfs_lam) FT (frameterm_lam FT')
        &lt;- lemma413b R FT FT'.
lemma413b_tlam : lemma413b (--&gt;r*_step R evfs_tlam) FT (frameterm_tlam FT')
        &lt;- lemma413b R FT FT'.
lemma413b_tens : lemma413b (--&gt;r*_step R evfs_tens) FT (frameterm_tens FT')
        &lt;- lemma413b R FT FT'.
lemma413b_unit : lemma413b (--&gt;r*_step R evfs_unit) FT (frameterm_unit FT')
        &lt;- lemma413b R FT FT'.

%worlds () (lemma413b _ _ _).
%freeze lemma413b.
%total D (lemma413b D _ _).

lemma413c : --&gt;* Fs M Fs' M' -&gt; frameterm Fs' M' -&gt; frameterm Fs M -&gt; type.
%mode lemma413c +R +FT -FT'.

lemma413b_rule : lemma413c R FT FT'
        &lt;- --&gt;*_to_--&gt;r*_lem R R'
        &lt;- lemma413b R' FT FT'.

%worlds () (lemma413c _ _ _).
%freeze lemma413c.
%total \{\} (lemma413c _ _ _).
&lt;/twelf&gt;

#
# The Lily type system
#
#
#
# Linearity
I encode linearity as a predicate on LF functions. Thus if linear([x].F) then we know that F is linear in x.
&lt;twelf&gt;
linear : (term -&gt; term) -&gt; type.
%name linear L.
% mode linear +E.

linear_id : linear ([x] x).

linear_app1 : linear ([x] app (E1 x) E2)
         &lt;- linear E1.

linear_app2 : linear ([x] app E1 (E2 x))
         &lt;- linear E2.

linear_lam : linear ([x] (lam T ([y] E x y)))
         &lt;- (\{y\} linear ([x] E x y)).

linear_tlam : linear  ([x] (tlam ([y] F x y)))
         &lt;- (\{t : tp\} linear ([z] (F z t))).

linear_tapp : linear ([x] tapp (E x) T)
         &lt;- linear [y] E y.

% linear_thunk : No Rule as thunks have no free linear variables.

linear_letb1 : linear ([x] letb (E1 x) E2)
          &lt;- linear E1.

linear_letb2 : linear ([x] letb E1 ([y] E2 x y))
          &lt;- \{y\} linear ([x] E2 x y).

% linear_unit : No Rule as units has no free linear variables.

linear_letu1 : linear ([x] letu (E1 x) E2)
          &lt;- linear [x] E1 x.

linear_letu2 : linear ([x] letu E1 (E2 x))
          &lt;- linear [x] E2 x.

linear_tens1 : linear ([x] tens (E1 x) E2)
          &lt;- linear [x] E1 x.

linear_tens2 : linear ([x] tens E1 (E2 x))
          &lt;- linear [x] E2 x.

linear_lett1 : linear ([x] lett (E x) F)
          &lt;- linear [x] E x.

linear_lett2 : linear ([x] lett E ([y] [z] F x y z))
          &lt;- (\{y\} \{z\} linear [x] F x y z).

%block btlam : block \{t:tp\}.
%worlds (blam | btlam) (linear _).
%freeze linear.

sub_linear : linear M1 -&gt; linear M2 -&gt; linear ([x] M1 (M2 x)) -&gt; type.
%mode sub_linear +L1 +L2 -L3.

sub_linear_id : sub_linear linear_id L2 L2.
sub_linear_app1 : sub_linear (linear_app1 L1) L2 (linear_app1 L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_app2 : sub_linear (linear_app2 L1) L2 (linear_app2 L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_lam : sub_linear (linear_lam L1) L2 (linear_lam [y] L3 y)
       &lt;- \{y\} sub_linear (L1 y) L2 (L3 y).
sub_linear_tlam : sub_linear (linear_tlam L1) L2 (linear_tlam [t] L3 t)
       &lt;- (\{t\} sub_linear (L1 t) L2 (L3 t)).
sub_linear_tapp : sub_linear (linear_tapp L1) L2 (linear_tapp L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_letb1 : sub_linear (linear_letb1 L1) L2 (linear_letb1 L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_letb2 : sub_linear (linear_letb2 L1) L2 (linear_letb2 L3)
       &lt;- (\{y\} sub_linear (L1 y) L2 (L3 y)).
sub_linear_letu1 : sub_linear (linear_letu1 L1) L2 (linear_letu1 L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_letu2 : sub_linear (linear_letu2 L1) L2 (linear_letu2 L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_lett1 : sub_linear (linear_lett1 L1) L2 (linear_lett1 L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_lett2 : sub_linear (linear_lett2 L1) L2 (linear_lett2 L3)
       &lt;- (\{y\}\{z\} sub_linear (L1 y z) L2 (L3 y z)).
sub_linear_tens1 : sub_linear (linear_tens1 L1) L2 (linear_tens1 L3)
       &lt;- sub_linear L1 L2 L3.
sub_linear_tens2 : sub_linear (linear_tens2 L1) L2 (linear_tens2 L3)
       &lt;- sub_linear L1 L2 L3.

%block bsub_linear_lam1 : block \{y:term\}.
%block bsub_linear_lam2 : block \{y:tp\}.
%worlds (bsub_linear_lam1 | bsub_linear_lam2) (sub_linear _ _ _).
%freeze sub_linear.
%total D (sub_linear D _ _).
&lt;/twelf&gt;

Some proofs are easier with relevance than with linearity.

&lt;twelf&gt;
relavant : (term -&gt; term) -&gt; type.
%name relavant R.
%mode relavant +E.

relavant_id : relavant ([x] x).
relavant_app1 : relavant ([x] app (E1 x) (E2 x))
        &lt;- relavant E1.
relavant_app2 : relavant ([x] app (E1 x) (E2 x))
        &lt;- relavant E2.
relavant_lam : relavant ([x] (lam T ([y] F x y))) 
        &lt;- (\{y\} relavant ([x] F x y)).
relavant_tlam : relavant ([x] (tlam ([y] F x y)))
        &lt;- (\{t:tp\} relavant ([z] (F z t))).
relavant_tapp : relavant ([x] tapp (E x) T)
        &lt;- relavant E.
relavant_letb1 : relavant ([x] letb (E1 x) ([y] E2 x y))
        &lt;- relavant E1.
relavant_letb2 : relavant ([x] letb (E1 x) ([y] E2 x y))
        &lt;- (\{y\} relavant [x] E2 x y).
% linear_unit : No Rule as units has no free variables.

relavant_thunk : relavant ([x] thunk T ([y] E x y)) 
        &lt;- (\{y\} relavant ([x] E x y)).
relavant_letu1 : relavant ([x] letu (E1 x) (E2 x))
        &lt;- relavant E1.
relavant_letu2 : relavant ([x] letu (E1 x) (E2 x))
        &lt;- relavant ([x] E2 x).
relavant_tens1 : relavant ([x] tens (E1 x) (E2 x))
        &lt;- relavant E1.
relavant_tens2 : relavant ([x] tens (E1 x) (E2 x))
        &lt;- relavant E2.
relavant_lett1 : relavant ([x] lett (E1 x) ([y][z] E2 x y z))
        &lt;- relavant E1.
relavant_lett2 : relavant ([x] lett (E1 x) ([y][z] E2 x y z))
        &lt;- (\{y\}\{z\} relavant ([x] E2 x y z)).

%worlds (blam | btlam) (relavant _).
%freeze relavant.

linear_relavant : linear L -&gt; relavant L -&gt; type.
%mode linear_relavant +L' -R.
linear_relavant_id : linear_relavant linear_id relavant_id.
linear_relavant_app1 : linear_relavant (linear_app1 L) (relavant_app1 R)
          &lt;- linear_relavant L R.
linear_relavant_app2 : linear_relavant (linear_app2 L) (relavant_app2 R)
          &lt;- linear_relavant L R.
linear_relavant_lam : linear_relavant (linear_lam L) (relavant_lam R)
          &lt;- \{y\} linear_relavant (L y) (R y).
linear_relavant_tlam : linear_relavant (linear_tlam L) (relavant_tlam R)
          &lt;- \{y\} linear_relavant (L y) (R y).
linear_relavant_tapp : linear_relavant (linear_tapp L) (relavant_tapp R)
          &lt;- linear_relavant L R.
linear_relavant_letu1 : linear_relavant (linear_letu1 L) (relavant_letu1 R)
          &lt;- linear_relavant L R.
linear_relavant_letu2 : linear_relavant (linear_letu2 L) (relavant_letu2 R)
          &lt;- linear_relavant L R.
linear_relavant_letb1 : linear_relavant (linear_letb1 L) (relavant_letb1 R)
          &lt;- linear_relavant L R.
linear_relavant_letb2 : linear_relavant (linear_letb2 L) (relavant_letb2 R)
          &lt;- \{y\} linear_relavant (L y) (R y).
linear_relavant_tens1 : linear_relavant (linear_tens1 L) (relavant_tens1 R)
          &lt;- linear_relavant L R.
linear_relavant_tens2 : linear_relavant (linear_tens2 L) (relavant_tens2 R)
          &lt;- linear_relavant L R.
linear_relavant_lett1 : linear_relavant (linear_lett1 L) (relavant_lett1 R)
          &lt;- linear_relavant L R.
linear_relavant_lett2 : linear_relavant (linear_lett2 L) (relavant_lett2 R)
          &lt;- \{y\}\{z\} linear_relavant (L y z) (R y z).
%worlds (blam | btlam) (linear_relavant _ _).
%freeze linear_relavant.
%total D (linear_relavant D _).

eq_relavant : (\{m\} eq (R m) (R' m)) -&gt; relavant R -&gt; relavant R' -&gt; type.
%mode eq_relavant +EQ +R -R'.
eq_relavant_rule : eq_relavant ([m] eq_ref) R R.
%worlds (blam) (eq_relavant _ _ _).
%freeze eq_relavant.
%total \{\} (eq_relavant _ _ _).

eq_linear : (\{m\} eq (R m) (R' m)) -&gt; linear R -&gt; linear R' -&gt; type.
%mode eq_linear +EQ +R -R'.
eq_linear_rule : eq_linear ([m] eq_ref) R R.
%worlds (blam) (eq_linear _ _ _).
%freeze eq_linear.
%total \{\} (eq_linear _ _ _).
&lt;/twelf&gt;

#
#
#
# Typing rules
&lt;twelf&gt;
? : term -&gt; tp -&gt; type.
% mode ? +M -T.
%name ? D.
%infix none 500 ?.

of_lam : lam T ([x] M x) ? func T T'
        &lt;- (\{x:term\} x ? T -&gt; (M x) ? T')
        &lt;- linear M.

of_app : app M1 M2 ? T
        &lt;- M1 ? func T' T
        &lt;- M2 ? T'.

of_tlam : tlam M ? all T
        &lt;- (\{t:tp\} (M t) ? T t).

of_tapp : \{t:tp\} (tapp M t ? T t
                    &lt;- M ? all T).

of_thunk : thunk T M ? bang T
        &lt;- (\{x\} x ? T -&gt; (M x) ? T).

of_letb : letb M N ? T'
        &lt;- M ? bang T
        &lt;- (\{x\} x ? T -&gt; (N x) ? T').

of_unit : unit ? i.

of_letu : letu M N ? T
        &lt;- M ? i
        &lt;- N ? T.

of_tens : tens M N ? tensor T T'
        &lt;- M ? T
        &lt;- N ? T'.

of_lett : lett M N ? T_
        &lt;- M ? tensor T T'
        &lt;- (\{x\} x ? T -&gt; \{y\} y ? T' -&gt; (N x y) ? T_)
        &lt;- (\{y\} linear ([x] N x y))
        &lt;- (\{x\} linear ([y] N x y)).

%block blam_t : some \{T : tp\} block \{x : term\} \{u : x ? T\}.
%block btlam_t : block \{t : tp\}.
%worlds (blam_t | btlam_t) (? _ _).
%covers ? +M -T.
%freeze ?.
&lt;/twelf&gt;
Take note of how I require functions and products to be linear.

#
#
# Type preservation
As we have a type system we should prove soundness of it.
&lt;twelf&gt;
tpres : M ? T -&gt; M \n/ V -&gt; V ? T -&gt; type.
%mode tpres +D +E -E'.

tpres_lam : tpres (of_lam L D) ev_lam (of_lam L D).
tpres_tlam : tpres (of_tlam D) ev_tlam (of_tlam D).
tpres_thunk : tpres (of_thunk D) ev_thunk (of_thunk D).
tpres_unit : tpres of_unit ev_unit of_unit.
tpres_tens : tpres (of_tens D' D) ev_tens (of_tens D' D).

tpres_app_aux : lam T1 M ? func T3 T2 -&gt; (\{M'\} M' ? T3 -&gt; M M' ? T2) -&gt; type.
%mode tpres_app_aux +D -F.

tpres_app_aux_rule : tpres_app_aux (of_lam _ F) F.
%worlds () (tpres_app_aux _ _).
%freeze tpres_app_aux.
%total D (tpres_app_aux D _).

tpres_app : tpres (of_app D2 D1) (ev_app E' E) D
           &lt;- tpres D1 E D'
           &lt;- tpres_app_aux D' F
           &lt;- tpres (F _ D2) E' D.
tpres_tapp : \{D_ : \{t : tp\} M t ? T t\}
             tpres (of_tapp _ D') (ev_tapp E' E) D
           &lt;- tpres D' E (of_tlam D_)
           &lt;- tpres (D_ _) E' D.

tpres_letb_aux : thunk T3 M ? bang T1 -&gt; (\{M'\} M' ? T1 -&gt; M M' ? T1) -&gt; type.
%mode tpres_letb_aux +D -F.
tpres_letb_aux_rule : tpres_letb_aux (of_thunk F) F.

%worlds () (tpres_letb_aux _ _).
%freeze tpres_letb_aux.
%total D (tpres_letb_aux D _).

tpres_letb : tpres (of_letb D' D) (ev_letb E' E) D_
           &lt;- tpres D E DT
           &lt;- tpres_letb_aux DT Dt
           &lt;- tpres (D' _ (of_letb Dt DT)) E' D_.

tpres_letu : tpres (of_letu D' _) (ev_letu E' _) D_
           &lt;- tpres D' E' D_.

tpres_lett : tpres (of_lett _ _ D' D) (ev_lett E' E) D_
           &lt;- tpres D E (of_tens Dn Dm)
           &lt;- tpres (D' _ Dm _ Dn) E' D_.

%worlds () (tpres _ _ _).
%freeze tpres.
%total D (tpres _ D _).

tpres_s : M ? T -&gt; M \s/ V -&gt; V ? T -&gt; type.
%mode tpres_s +D +E -E'.

tpres_s_lam : tpres_s (of_lam L D) evs_lam (of_lam L D).
tpres_s_tlam : tpres_s (of_tlam D) evs_tlam (of_tlam D).
tpres_s_thunk : tpres_s (of_thunk D) evs_thunk (of_thunk D).
tpres_s_unit : tpres_s of_unit evs_unit of_unit.
tpres_s_tens : tpres_s (of_tens D' D) evs_tens (of_tens D' D).

tpres_s_app_aux : lam T1 M ? func T3 T2 -&gt; (\{M'\} M' ? T3 -&gt; M M' ? T2) -&gt; type.
%mode tpres_s_app_aux +D -F.

tpres_s_app_aux_rule : tpres_s_app_aux (of_lam _ F) F.
%worlds () (tpres_s_app_aux _ _).
%freeze tpres_s_app_aux.
%total D (tpres_s_app_aux D _).

tpres_s_app : tpres_s (of_app D2 D1) (evs_app E3 E2 E1) D
           &lt;- tpres_s D1 E1 D'
           &lt;- tpres_s_app_aux D' F
           &lt;- tpres_s D2 E2 D4
           &lt;- tpres_s (F _ D4) E3 D.

tpres_s_tapp : \{D_ : \{t : tp\} M t ? T t\}
             tpres_s (of_tapp _ D') (evs_tapp E' E) D
           &lt;- tpres_s D' E (of_tlam D_)
           &lt;- tpres_s (D_ _) E' D.

tpres_s_letb_aux : thunk T3 M ? bang T1 -&gt; (\{M'\} M' ? T1 -&gt; M M' ? T1) -&gt; type.
%mode tpres_s_letb_aux +D -F.
tpres_s_letb_aux_rule : tpres_s_letb_aux (of_thunk F) F.

%worlds () (tpres_s_letb_aux _ _).
%freeze tpres_s_letb_aux.
%total D (tpres_s_letb_aux D _).

tpres_s_letb : tpres_s (of_letb D' D) (evs_letb E' E) D_
           &lt;- tpres_s D E DT
           &lt;- tpres_s_letb_aux DT Dt
           &lt;- tpres_s (D' _ (of_letb Dt DT)) E' D_.

tpres_s_letu : tpres_s (of_letu D' _) (evs_letu E' _) D_
           &lt;- tpres_s D' E' D_.

tpres_s_lett : % \{D' : \{x : term\} \{y : term\} x ? T -&gt; y ? T' -&gt; N x y ? T_\}
             tpres_s (of_lett _ _ D' D) (evs_lett E' E) D_
           &lt;- tpres_s D E (of_tens Dn Dm)
           &lt;- tpres_s (D' _ Dm _ Dn) E' D_.

%worlds () (tpres_s _ _ _).
%freeze tpres_s.
%total D (tpres_s _ D _).
&lt;/twelf&gt;

#
#
# Equalities and inversions
&lt;twelf&gt;
%block bts_tlam : block \{t:tp\}.
eq_typings : M ? T -&gt; M ? T -&gt; type.
%mode eq_typings +D -D'.
eq_typings_ref : eq_typings D D.
%worlds (blam | bts_tlam) (eq_typings _ _).
%freeze eq_typings.
%total D (eq_typings D _).

eq_type : eq M M' -&gt; M ? T -&gt; M' ? T -&gt; type.
%mode eq_type +Q +D -D.
eq_typing_rule : eq_type eq_ref D D.
%worlds () (eq_type _ _ _).
%freeze eq_type.
%total \{\} (eq_type _ _ _).

eq_type1 : eqt T1 T2 -&gt; M ? T1 -&gt; M ? T2 -&gt; type.
%mode eq_type1 +Q +D -D'.
eq_type1_rule : eq_type1 eqt_ref D D.
%worlds () (eq_type1 _ _ _).
%freeze eq_type1.
%total \{\} (eq_type1 _ _ _).

inverse_lam : lam T M ? func T1 T2 -&gt; (\{a\} a ? T1 -&gt; (M a) ? T2) -&gt; linear M -&gt; type.
%mode inverse_lam +D -D' -L.
inverse_lam_rule : inverse_lam (of_lam L D) D L.
%worlds () (inverse_lam _ _ _).
%total \{\} (inverse_lam _ _ _).

inverse_tapp : tapp M T ? T' -&gt; M ? all T1 -&gt; type.
%mode inverse_tapp +D -D'.
inverse_tapp_rule : inverse_tapp (of_tapp T D) D.
%worlds () (inverse_tapp _ _).
%total \{\} (inverse_tapp _ _).

eq_thunk_type : thunk T M ? bang T' -&gt; eqt T T' -&gt; type.
%mode eq_thunk_type +D -Q.
eq_thunk_type_rule : eq_thunk_type (of_thunk _) eqt_ref.
%worlds () (eq_thunk_type _ _).
%freeze eq_thunk_type.
%total \{\} (eq_thunk_type _ _).

eq_val_funs : value M -&gt; M ? func T1 T2 -&gt; eq M (lam T1 M') -&gt; type.
%mode eq_val_funs +V +D -Q.
eq_val_funs_rule : eq_val_funs val_lam (of_lam _ _) eq_ref.
%worlds () (eq_val_funs _ _ _).
%freeze eq_val_funs.
%total \{\} (eq_val_funs _ _ _).

eq_val_all : value M -&gt; M ? all T1 -&gt; eq M (tlam M') -&gt; type.
%mode eq_val_all +V +D -Q.
eq_val_all_rule : eq_val_all val_tlam (of_tlam _) eq_ref.
%worlds () (eq_val_all _ _ _).
%freeze eq_val_all.
%total \{\} (eq_val_all _ _ _).

eq_val_unit : value M -&gt; M ? i -&gt; eq M unit -&gt; type.
%mode eq_val_unit +V +D -Q.
eq_val_unit_rule : eq_val_unit val_unit of_unit eq_ref.
%worlds () (eq_val_unit _ _ _).
%freeze eq_val_unit.
%total \{\} (eq_val_unit _ _ _).

eq_val_tensor : value M -&gt; M ? tensor _ _ -&gt; eq M (tens M1 M2) -&gt; type.
%mode eq_val_tensor +V +D -Q.
eq_val_tensor_rule : eq_val_tensor val_tens (of_tens _ _) eq_ref.
%worlds () (eq_val_tensor _ _ _).
%freeze eq_val_tensor.
%total \{\} (eq_val_tensor _ _ _).

eq_val_bang : value M -&gt; M ? bang _ -&gt; eq M (thunk T M') -&gt; type.
%mode eq_val_bang +V +D -Q.
eq_val_bang_rule : eq_val_bang val_thunk (of_thunk _) eq_ref.
%worlds () (eq_val_bang _ _ _).
%freeze eq_val_bang.
%total \{\} (eq_val_bang _ _ _).
&lt;/twelf&gt;

#
# Abstract machine types
&lt;twelf&gt;
fstp : framestack -&gt; tp -&gt; tp -&gt; type.
% mode fstp +FST +T -T'.
%name fstp FsT.

ftp_nil : fstp nil T T.
ftp_cons : fstp (cons (F : frame F') Fs) T T'
            &lt;- (\{a\} a ? T -&gt; (F' a) ? T_)
            &lt;- fstp Fs T_ T'.

%worlds () (fstp _ _ _).
%covers fstp +FST +T -T'.
%freeze fstp.

eqf_fstp : eqf Fs Fs' -&gt; fstp Fs T T' -&gt; fstp Fs' T T' -&gt; type.
%mode eqf_fstp +Q +Ft -Ft.
eqf_fstp_rule : eqf_fstp eqf_ref F F.
%worlds (blam) (eqf_fstp _ _ _).
%freeze eqf_fstp.
%total \{\} (eqf_fstp _ _ _).

applysound : \{Fs : framestack\} (fstp Fs T T') -&gt; M ? T -&gt; (frameapply Fs M M') -&gt; M' ? T' -&gt; type.
%mode applysound +Fs +F +D +A -D'.

as_ftp_nil : applysound nil ftp_nil D frameapply_nil D.
as_ftp_cons_letb :
           applysound (cons (fletb N) Fs)
         (ftp_cons FsT (Ft : \{m:term\} m ? T -&gt; letb m N ? T_)) D1 (frameapply_cons Fap frameapp_app) D2
             &lt;- applysound Fs FsT (Ft M D1) Fap D2.

as_ftp_cons_app :
           applysound (cons (fapp N) Fs)
         (ftp_cons FsT (Ft : \{m:term\} m ? T -&gt; app m N ? T_)) D1 (frameapply_cons Fap frameapp_app) D2
             &lt;- applysound Fs FsT (Ft M D1) Fap D2.

as_ftp_cons_fletu :
           applysound (cons (fletu N) Fs)
         (ftp_cons FsT (Ft : \{m:term\} m ? T -&gt; letu m N ? T_)) D1 (frameapply_cons Fap frameapp_app) D2
             &lt;- applysound Fs FsT (Ft M D1) Fap D2.

as_ftp_cons_flett :
           applysound (cons (flett N) Fs)
         (ftp_cons FsT (Ft : \{m:term\} m ? T -&gt; lett m N ? T_)) D1 (frameapply_cons Fap frameapp_app) D2
             &lt;- applysound Fs FsT (Ft M D1) Fap D2.

as_ftp_cons_ftapp :
           applysound (cons (ftapp T3) Fs)
         (ftp_cons FsT (Ft : \{m:term\} m ? T1 -&gt; tapp m T3 ? T4)) D1 (frameapply_cons Fap frameapp_app) D2
             &lt;- applysound Fs FsT (Ft M D1) Fap D2.

%worlds () (applysound _ _ _ _ _).
%freeze applysound.
%total D (applysound D _ _ _ _).
eqt_tapp : (tapp M T) ? T' -&gt; M ? all T1 -&gt; eqt (T1 T) T' -&gt; type.
%mode eqt_tapp +D -D' -Q.
eqt_tapp_rule : eqt_tapp (of_tapp T D) D eqt_ref.
%worlds () (eqt_tapp _ _ _).
%freeze eqt_tapp.
%total \{\} (eqt_tapp _ _ _).
&lt;/twelf&gt;

#
#
# Preservation
Now I can prove soundness of the type system for the frame stack semantics:
&lt;twelf&gt;

typed_step : (fstp Fs T T') -&gt; M ? T -&gt; --&gt; Fs M Fs' M' -&gt; (fstp Fs' T_ T') -&gt; M' ? T_ -&gt; type.
%mode typed_step +FsT +D +S -FsT' -D'.

typed_step_letu : typed_step FsT (of_letu DN Di) evfs_letu (ftp_cons FsT [a][da] of_letu DN da) Di.
typed_step_letb : typed_step FsT (of_letb DN DM) evfs_letb (ftp_cons FsT [a][da] of_letb DN da) DM.
typed_step_lett : typed_step FsT (of_lett L1 L2 DN DM) evfs_lett (ftp_cons FsT [a][da] of_lett L1 L2 DN da) DM.
typed_step_fapp : typed_step FsT (of_app DN DM) evfs_app (ftp_cons FsT [a][da] of_app DN da) DM.
typed_step_ftapp : typed_step FsT (of_tapp T DM) evfs_tapp (ftp_cons FsT [a][da] of_tapp T da) DM.

typed_step_unit : typed_step (ftp_cons FsT Ft) of_unit evfs_unit FsT D
          &lt;- eq_typings (Ft unit of_unit) (of_letu D _).

typed_step_lam : typed_step (ftp_cons FsT Ft) D1 evfs_lam FsT (D2 _ D)
          &lt;- eq_typings (Ft _ D1) (of_app D (of_lam _ D2)).

typed_step_thunk : typed_step (ftp_cons FsT Ft) (of_thunk D1) evfs_thunk FsT (DN _ (of_letb DT (of_thunk DT)))
          &lt;- eq_typings (Ft _ (of_thunk D1)) (of_letb DN (of_thunk DT)).

typed_step_tlam : 
           typed_step (ftp_cons FsT Ft) D1 (evfs_tlam : --&gt; (cons (ftapp T1) Fs) _ _ _) FsT D5
           &lt;- eqt_tapp (Ft (tlam M1) D1) (of_tlam F) Q
           &lt;- eq_type1 Q (F T1) D5.

typed_step_tens : typed_step (ftp_cons FsT Ft) (of_tens D2 D1) evfs_tens FsT (D' M1 D1ss M2 D2ss)
          &lt;- eq_typings (Ft (tens M1 M2) (of_tens D2 D1)) (of_lett L1 L2 D' (of_tens D2ss D1ss)).

%worlds () (typed_step _ _ _ _ _) .
%freeze typed_step.
%total \{\} (typed_step _ _ _ _ _).

frame_pres_lem : --&gt;r* Fs M Fs' M' -&gt; fstp Fs T Te -&gt; M ? T -&gt; fstp Fs' T' Te -&gt; M' ? T' -&gt; type.
%mode frame_pres_lem +Ss +FsTp +D -FsTp' -D'.

frame_pres_lem_ref : frame_pres_lem --&gt;r*_ref FsTp D FsTp D.
frame_pres_lem_step : frame_pres_lem (--&gt;r*_step Ss S) FsTp D FsTp' D'
                   &lt;- typed_step FsTp D S FsTp_ D_
                   &lt;- frame_pres_lem Ss FsTp_ D_ FsTp' D'.

%worlds () (frame_pres_lem _ _ _ _ _).
%total Ss (frame_pres_lem Ss _ _ _ _).

frame_pres : --&gt;* Fs M Fs' M' -&gt; fstp Fs T Te -&gt; M ? T -&gt; fstp Fs' T' Te -&gt; M' ? T' -&gt; type.
%mode frame_pres +Ss +FsTp +D -FsTp' -D'.

frame_pres_rule : frame_pres Ss FsTp D FsTp' D'
              &lt;- --&gt;*_to_--&gt;r*_lem Ss Ss'
              &lt;- frame_pres_lem Ss' FsTp D FsTp' D'.

%worlds () (frame_pres _ _ _ _ _).
%total Ss (frame_pres Ss _ _ _ _).
&lt;/twelf&gt;

#
#
#
# Progress
Progress and preservation seem to be in fashion.
I will not rely on progress elsewhere.
&lt;twelf&gt;
progress_good : framestack -&gt; term -&gt; type.
%mode progress_good +Fs +M.
progress_good_v : progress_good nil V &lt;- value V.
progress_good_s : progress_good Fs M &lt;- --&gt; Fs M Fs' M'.
%freeze progress_good.

frame_progress : \{F' : frame F\} \{Fs\} (F V) ? T -&gt; value V -&gt; --&gt; (cons F' Fs) V Fs M -&gt; type.
%mode frame_progress +Fr +Fs +D +V -S.

frame_progress_app : frame_progress (fapp M2) Fs (of_app D2 D1) V S
       &lt;- eq_val_funs V D1 Q
       &lt;- eq_sym Q Q'
       &lt;- eq_step Q' evfs_lam S.

frame_progress_tapp : frame_progress (ftapp T) Fs (of_tapp T D1) V S
       &lt;- eq_val_all V D1 Q
       &lt;- eq_sym Q Q'
       &lt;- eq_step Q' evfs_tlam S.

frame_progress_lett : frame_progress (flett M2) Fs (of_lett _ _ _ D1) V S
       &lt;- eq_val_tensor V D1 Q
       &lt;- eq_sym Q Q'
       &lt;- eq_step Q' evfs_tens S.

frame_progress_letb : frame_progress (fletb M2) Fs (of_letb _ D1) V S
       &lt;- eq_val_bang V D1 Q
       &lt;- eq_sym Q Q'
       &lt;- eq_step Q' evfs_thunk S.

frame_progress_letu : frame_progress (fletu M2) Fs (of_letu _ D1) V S
       &lt;- eq_val_unit V D1 Q
       &lt;- eq_sym Q Q'
       &lt;- eq_step Q' evfs_unit S.

%worlds () (frame_progress _ _ _ _ _).
%total \{\} (frame_progress _ _ _ _ _).

progress_val : fstp Fs T T' -&gt; M ? T -&gt; value M -&gt; progress_good Fs M -&gt; type.
%mode progress_val +Ft +D +V -G.

progress_nil_val : progress_val ftp_nil D V (progress_good_v V).

progress_cons_rule : progress_val (ftp_cons FsTp Ftp : fstp (cons F Fs) _ _) D V (progress_good_s S)
                   &lt;- frame_progress F Fs (Ftp _ D) V S.

%worlds () (progress_val _ _ _ _).
%total \{\} (progress_val _ _ _ _).

progress : fstp Fs T T' -&gt; M ? T -&gt; progress_good Fs M -&gt; type.
%mode progress +Ft +D -G.
progress_lam : progress FsTp D G
                  &lt;- progress_val FsTp D val_lam G.
progress_tlam : progress FsTp D G
                  &lt;- progress_val FsTp D val_tlam G.
progress_thunk : progress FsTp D G
                  &lt;- progress_val FsTp D val_thunk G.
progress_tens : progress FsTp D G
                  &lt;- progress_val FsTp D val_tens G.
progress_unit : progress FsTp D G
                  &lt;- progress_val FsTp D val_unit G.
progress_app : progress _ _ (progress_good_s evfs_app).
progress_tapp : progress _ _ (progress_good_s evfs_tapp).
progress_letu : progress _ _ (progress_good_s evfs_letu).
progress_letb : progress _ _ (progress_good_s evfs_letb).
progress_lett : progress _ _ (progress_good_s evfs_lett).

%worlds () (progress _ _ _).
%total \{\} (progress _ _ _).
&lt;/twelf&gt;

#
# Strictness lemma
#
#
# Stack manipulations
There are two natural ways to define application of a frame stack to a term. I need them both and I need to show how they relate. As stacks are represented as lists this code is a nice example of how to prove classic theorems about lists.
&lt;twelf&gt;
frameapply' : framestack -&gt; term -&gt; term -&gt; type.
%mode frameapply' +Fs +M -M'.
frameapply'_nil : frameapply' nil M M.
frameapply'_cons : frameapply' (cons F Fs') M M'
           &lt;- frameapply' Fs' M M_
           &lt;- frameapp F M_ M'.
%worlds () (frameapply' _ _ _).
%freeze frameapply'.
%total D (frameapply' D _ _).

frameapply'_exists : \{Fs\} \{M\} (frameapply' Fs M M') -&gt; type.
%mode frameapply'_exists +Fs +M -A.
frameapply'_exists_nil : frameapply'_exists nil M frameapply'_nil.
frameapply'_exists_cons_letu : frameapply'_exists (cons (fletu N) Fs) M
                     (frameapply'_cons frameapp_app FsA)
         &lt;- frameapply'_exists Fs M FsA.
frameapply'_exists_cons_letb : frameapply'_exists (cons (fletb N) Fs) M
                     (frameapply'_cons frameapp_app FsA)
         &lt;- frameapply'_exists Fs M FsA.
frameapply'_exists_cons_lett : frameapply'_exists (cons (flett N) Fs) M
                     (frameapply'_cons frameapp_app FsA)
         &lt;- frameapply'_exists Fs M FsA.
frameapply'_exists_cons_app : frameapply'_exists (cons (fapp N) Fs) M
                     (frameapply'_cons frameapp_app FsA)
         &lt;- frameapply'_exists Fs M FsA.
frameapply'_exists_cons_tapp : frameapply'_exists (cons (ftapp N) Fs) M
                     (frameapply'_cons frameapp_app FsA)
         &lt;- frameapply'_exists Fs M FsA.
%worlds (blam) (frameapply'_exists _ _ _).
%freeze frameapply'_exists.
%total D (frameapply'_exists D _ _).

frameapply'_eq : eqf Fs Fs' -&gt; frameapply' Fs M FsM -&gt; frameapply' Fs' M FsM -&gt; type.
%mode frameapply'_eq +Q +FA -FA.
frameapply'_eq_rule : frameapply'_eq eqf_ref FA FA.
%worlds (blam) (frameapply'_eq _ _ _).
%freeze frameapply'_eq.
%total \{\} (frameapply'_eq _ _ _).

frameapply'_nil_eq : frameapply' nil M M' -&gt; eq M M' -&gt; type.
%mode frameapply'_nil_eq +F -Q.
frameapply'_nil_eq_rule : frameapply'_nil_eq frameapply'_nil eq_ref.
%worlds (blam) (frameapply'_nil_eq _ _).
%freeze frameapply'_nil_eq.
%total \{\} (frameapply'_nil_eq _ _).

revFs : framestack -&gt; framestack -&gt; framestack -&gt; type.
%mode revFs +Fs +Fs_ -Fs'.
revFs_nil : revFs nil Fs' Fs'.
revFs_cons : revFs (cons F Fs) Fs_ Fs'
               &lt;- revFs Fs (cons F Fs_) Fs'.
%worlds () (revFs _ _ _).
%freeze revFs.
%total D (revFs D _ _).

revFs_exists : \{Fs\} \{Fs'\} revFs Fs Fs' Fs_ -&gt; type.
%mode revFs_exists +Fs +Fs' -R.
revFs_exists_nil : revFs_exists nil _ revFs_nil.
revFs_exists_cons : revFs_exists (cons F Fs) Fs' (revFs_cons Fs_)
            &lt;- revFs_exists Fs (cons F Fs') Fs_.
%worlds (blam) (revFs_exists _ _ _).
%freeze revFs_exists.
%total D (revFs_exists D _ _).

revDet : revFs Fs Fs' Fs3 -&gt; revFs Fs Fs' Fs4 -&gt; eqf Fs3 Fs4 -&gt; type.
%mode revDet +R +R' -Q.
revDet_nil : revDet revFs_nil _ eqf_ref.
revDet_cons : revDet (revFs_cons R) (revFs_cons R') Q
         &lt;- revDet R R' Q.
%worlds (blam) (revDet _ _ _).
%freeze revDet.
%total D (revDet D _ _).

revrev_id_lem : revFs Fs Fs' Fs_ -&gt; revFs Fs_ nil Fs4 -&gt; revFs Fs' Fs Fs6 -&gt; eqf Fs6 Fs4 -&gt; type.
%mode revrev_id_lem +R +R' +R_ -Q.

revrev_id_lem_nil : revrev_id_lem revFs_nil F F' Q
          &lt;- revDet F' F Q. 
revrev_id_lem_cons : revrev_id_lem (revFs_cons R) R' R_ Q
          &lt;- revrev_id_lem R R' (revFs_cons R_) Q.

%worlds (blam) (revrev_id_lem _ _ _ _).
%freeze revrev_id_lem.
%total D (revrev_id_lem D _ _ _).

revrev_id : revFs Fs nil Fs' -&gt; revFs Fs' nil Fs_ -&gt; eqf Fs Fs_ -&gt; type.
%mode revrev_id +R +R' -Q.
revrev_id_rule : revrev_id R R' Q 
      &lt;- revrev_id_lem R R' revFs_nil Q.
%worlds (blam) (revrev_id _ _ _).
%freeze revrev_id.
%total \{\} (revrev_id _ _ _).

rev_injective : revFs Fs nil Fs' -&gt; revFs Fs_ nil Fs' -&gt; eqf Fs Fs_ -&gt; type.
%mode rev_injective +R +R' -Q.
rev_injective_rule : rev_injective (R : revFs Fs nil Fs') R' Q
      &lt;- revFs_exists Fs' nil Rev
      &lt;- revrev_id R Rev Q'
      &lt;- eqf_symm Q' Q**
      &lt;- revrev_id R' Rev Q_
      &lt;- eqf_trans Q_ Q** Q1
      &lt;- eqf_symm Q1 Q.
%worlds (blam) (rev_injective _ _ _).
%freeze rev_injective.
%total D (rev_injective D _ _).

rev_eq1 : eqf Fs Fs' -&gt; revFs Fs F1 F2 -&gt; revFs Fs' F1 F2 -&gt; type.
%mode rev_eq1 +Q +R -R.
rev_eq1_rule : rev_eq1 eqf_ref R R.
%worlds (blam) (rev_eq1 _ _ _).
%freeze rev_eq1.
%total \{\} (rev_eq1 _ _ _).

rev_eq2 : eqf Fs Fs' -&gt; revFs F1 F2 Fs -&gt; revFs F1 F2 Fs' -&gt; type.
%mode rev_eq2 +Q +R -R.
rev_eq2_rule : rev_eq2 eqf_ref R R.
%worlds (blam) (rev_eq2 _ _ _).
%freeze rev_eq2.
%total \{\} (rev_eq2 _ _ _).

frameapply_e : revFs Fs Fs' Fs_ -&gt; frameapply' Fs' M M_ -&gt; frameapply Fs M_ M' -&gt;
               frameapply' Fs_ M M' -&gt; type.
%mode frameapply_e +R +FA +FA_ -FA'.

frameapply_e_nil : frameapply_e revFs_nil FA frameapply_nil FA.
frameapply_e_cons : frameapply_e (revFs_cons R) FA' (frameapply_cons FA frameapp_app) FA_
             &lt;- frameapply_e R (frameapply'_cons frameapp_app FA') FA FA_.

%worlds (blam) (frameapply_e _ _ _ _).
%freeze frameapply_e.
%total D (frameapply_e _ _ D _).

frameapply_e2 : revFs Fs nil Fs' -&gt; frameapply Fs M M' -&gt; frameapply' Fs' M M' -&gt; type.
%mode frameapply_e2 +R +FA' -FA.
frameapply_e2_rule : frameapply_e2 R FA' FA
         &lt;- frameapply_e R frameapply'_nil FA' FA.
%worlds (blam) (frameapply_e2 _ _ _).
%freeze frameapply_e2.
%total \{\} (frameapply_e2 _ _ _).

frameapply'_e : revFs Fs Fs' Fs** -&gt; revFs Fs** nil Fs_ -&gt; frameapply' Fs' M M_ -&gt;
                frameapply Fs M_ M' -&gt; frameapply Fs_ M M' -&gt; type.
%mode frameapply'_e +R +R' +FA +FA_ -FA'.

frameapply'_e_nil : frameapply'_e R R' frameapply'_nil FA FA'
        &lt;- revrev_id R R' Q
        &lt;- frameapply_eq Q FA FA'.
frameapply'_e_cons : frameapply'_e R R' (frameapply'_cons frameapp_app FA') FA FA_
             &lt;- frameapply'_e (revFs_cons R) R' FA' (frameapply_cons FA frameapp_app) FA_.

%worlds (blam) (frameapply'_e _ _ _ _ _).
%freeze frameapply'_e.
%total D (frameapply'_e _ _ D _ _).

frameapply_e1 : revFs Fs nil Fs' -&gt; frameapply' Fs M M' -&gt; frameapply Fs' M M' -&gt; type.
%mode frameapply_e1 +R +FA' -FA.
frameapply_e1_rule : frameapply_e1 R FA' FA
         &lt;- frameapply'_e revFs_nil R FA' (frameapply_nil) FA.
%worlds (blam) (frameapply_e1 _ _ _).
%freeze frameapply_e1.
%total \{\} (frameapply_e1 _ _ _).
&lt;/twelf&gt;

#
#
# Some degenerate lemmas
The next lemma is degenerate and needed to take care of other degenerate cases.
&lt;twelf&gt;
lem45 : \{M:term -&gt; term\} (\{m:term\} frameapply' (Fs m) (N m) R) -&gt;
                         (\{m:term\} frameapply' (Fs m) (M (N m)) R') -&gt; type.
%mode lem45 +M +FA -FA'.

lem45_nil : lem45 _ ([m] frameapply'_nil) ([m] frameapply'_nil) .
lem45_app : lem45 M ([m] frameapply'_cons (frameapp_app : frameapp (fapp (_)) _ _)
                    (FA m)) ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem45 M FA FA'.
lem45_tapp : lem45 M ([m] frameapply'_cons (frameapp_app : frameapp (ftapp (_)) _ _)
                     (FA m)) ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem45 M FA FA'.
lem45_letb : lem45 M ([m] frameapply'_cons (frameapp_app : frameapp (fletb (_)) _ _)
                     (FA m)) ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem45 M FA FA'.
lem45_lett : lem45 M ([m] frameapply'_cons (frameapp_app : frameapp (flett (_)) _ _)
                     (FA m)) ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem45 M FA FA'.
lem45_letu : lem45 M ([m] frameapply'_cons (frameapp_app : frameapp (fletu (_)) _ _)
                     (FA m)) ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem45 M FA FA'.
%worlds (blam) (lem45 _ _ _).
%freeze lem45.
%total D (lem45 _ D _).
&lt;/twelf&gt;

#
#
# Frames are linear
&lt;twelf&gt;
redex : term -&gt; term -&gt; type. %name redex R.
% mode redex +M +M'.
redex_app  : redex (app (lam T M1) M2) (M1 M2).
redex_tapp : redex (tapp (tlam M) T) (M T).
redex_lett : redex (lett (tens M1 M2) M3) (M3 M1 M2).
redex_letu : redex (letu unit M) M.
redex_letb : redex (letb (thunk T M1) M2) (M2 (letb (thunk T M1) M1)).
%freeze redex.

ctp : type.
ctp_0 : ctp.
ctp_1 : linear M -&gt; ctp.
ctp_2 : (\{m:term\} linear ([n:term] M n m)) -&gt; (\{m:term\} linear ([n:term] M m n)) -&gt; ctp.
%freeze ctp.

redex_tp : (\{m:term\} redex (M m) (M' m)) -&gt; ctp -&gt; type.
redex_tp_app : \{L:linear (M N)\} redex_tp ([m:term] redex_app : redex (app (lam T (M m)) (M2 m)) _)
                                (ctp_1 L).
redex_tp_tapp : redex_tp ([m] redex_tapp : (redex (tapp (tlam (M m)) T) (M m T))) ctp_0.
redex_tp_lett : \{L1 : \{m:term\} linear ([n:term] M3 N n m)\}
                \{L2 : \{m:term\} linear ([n:term] M3 N m n)\}
                  redex_tp ([m:term] redex_lett : redex (lett (tens (M1 m) (M2 m)) (M3 m)) _)
                           (ctp_2 L1 L2).
redex_tp_letu : redex_tp ([m] redex_letu) ctp_0.
redex_tp_letb : redex_tp ([m] redex_letb : redex (letb (thunk T (M1 m)) (M2 m)) (M2 m (letb (thunk T (M1 m)) (M1 m)))) ctp_0.
%freeze redex_tp.

lem33 : (\{m:term\} redex (M m) (M' m)) -&gt; (\{m:term\} frameapply' (Fs m) (M m) R) -&gt;
                                         (\{m:term\} frameapply' (Fs m) (M' m) R') -&gt; type.
%mode lem33 +C +FA -FA.
lem33_nil : lem33 C ([m] frameapply'_nil) ([m] frameapply'_nil) .
lem33_app : lem33 C ([m] frameapply'_cons (frameapp_app : frameapp (fapp (_)) _ _) (FA m))
                                          ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem33 C FA FA'.
lem33_tapp : lem33 C ([m] frameapply'_cons (frameapp_app : frameapp (ftapp (_)) _ _) (FA m))
                                           ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem33 C FA FA'.
lem33_letb : lem33 C ([m] frameapply'_cons (frameapp_app : frameapp (fletb (_)) _ _) (FA m))
                                           ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem33 C FA FA'.
lem33_lett : lem33 C ([m] frameapply'_cons (frameapp_app : frameapp (flett (_)) _ _) (FA m))
                                           ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem33 C FA FA'.
lem33_letu : lem33 C ([m] frameapply'_cons (frameapp_app : frameapp (fletu (_)) _ _) (FA m))
                                           ([m] frameapply'_cons (frameapp_app) (FA' m))
             &lt;- lem33 C FA FA'.
%worlds (blam) (lem33 _ _ _).
%total D (lem33 _ D _).

lem31 : (\{m:term\} value (M m)) -&gt; (\{a:term\} frameapply' (Fs a) (N a) (M a)) -&gt;
                                  (\{a\} eq (N a) (M a)) -&gt; type.
%mode lem31 +V +FA -Q.
lem31_rule : lem31 _ ([m] frameapply'_nil) ([m] eq_ref).
%worlds (blam) (lem31 _ _ _).
%total \{\} (lem31 _ _ _).

lem32 : \{Fs\}\{M\} (\{m\} value (B m)) -&gt; (\{m:term\} redex (N1 m) (N2 m)) -&gt; (\{m:term\} eq (N1 m) (B m)) -&gt; 
            (\{m:term\} frameapply' (Fs m) (N2 m) (M m)) -&gt; type.
%mode lem32 +Fs +M +V +C +Q -FA.
%worlds (blam) (lem32 _ _ _ _ _ _).
%total \{\} (lem32 _ _ _ _ _ _).

lem34 :  (\{a:term\} frameapply' (Fs a) (N a) a) -&gt; (\{a\} eqf (Fs a) nil) -&gt; type.
%mode lem34 +FA -Q.
lem34_rule : lem34 ([m] frameapply'_nil) ([m] eqf_ref).
%worlds (blam) (lem34 _ _).
%total \{\} (lem34 _ _).

lem35 : \{Fs\}\{M\} (\{m:term\} redex (N1 m) (N2 m)) -&gt; (\{m:term\} eq (N1 m) m) -&gt; 
            (\{m:term\} frameapply' (Fs m) (N2 m) (M m)) -&gt; type.
%mode lem35 +Fs +M +C +Q -FA.
%worlds (blam) (lem35 _ _ _ _ _).
%total \{\} (lem35 _ _ _ _ _).
&lt;/twelf&gt;

Here I am building up rather technical lemmas that are needed in the strictness lemma.
Take note of how easy it is to deal with linearity.
&lt;twelf&gt;
frame_linear_lem2 : 
                    redex_tp (C : \{m:term\} redex (M m) (M' m)) Ct -&gt;
                   (\{m:term\} frameapply' (Fs m) (M m) (R m)) -&gt; linear R -&gt;
                   (\{m\} frameapply' (Fs m) (M' m) (R' m)) -&gt; linear R' -&gt; type.
%mode frame_linear_lem2 +C +FA +L -FA' -L'.

frame_linear_lem2_nil1 : frame_linear_lem2 _ ([m] frameapply'_nil : frameapply' _ (app _ M2) _) 
                                              (linear_app1 (linear_lam L)) ([m] frameapply'_nil) (L M2).

frame_linear_lem2_nil2 : frame_linear_lem2 (redex_tp_app L2)
                                                   ([m] frameapply'_nil : frameapply' _ (app _ (M' m)) _)
                                                   (linear_app2 L) ([m] frameapply'_nil) L'
                      &lt;- sub_linear L2 L L'.

frame_linear_tens_lem2_nil1 : frame_linear_lem2 (redex_tp_lett L1 L2)
                                           ([m] frameapply'_nil : frameapply' _ (lett (tens _ M2) M3) _)
                                           (linear_lett1 (linear_tens1 L)) ([m] frameapply'_nil) L'
                                            &lt;- sub_linear (L1 M2) L L'.

frame_linear_tens_lem2_nil2 : frame_linear_lem2 (redex_tp_lett L1 L2)
                                           ([m] frameapply'_nil : frameapply' _ (lett (tens M1 _) M3) _)
                                           (linear_lett1 (linear_tens2 L)) ([m] frameapply'_nil) L'
                                            &lt;- sub_linear (L2 M1) L L'.

frame_linear_tens_lem2_nil3 : frame_linear_lem2 C
                                 ([m] frameapply'_nil : frameapply' _ (lett (tens M1 M2) (M3 m)) _)
                                 (linear_lett2 L) ([m] frameapply'_nil) (L M1 M2).

frame_linear_unit_lem_nil2 : frame_linear_lem2 C
                                 ([m] frameapply'_nil : frameapply' _ (letu unit (M3 m)) _)
                                 (linear_letu2 L) ([m] frameapply'_nil) L.

frame_linear_thunk_lem_nil2 : frame_linear_lem2 C
                                 ([m] frameapply'_nil : frameapply' _ (letb (thunk T M1) (M2 m)) _)
                                 (linear_letb2 L) ([m] frameapply'_nil) (L (letb (thunk T M1) M1)).

frame_linear_tlam_lem_nil1 : frame_linear_lem2 C
                                 ([m] frameapply'_nil : frameapply' _ (tapp _ T) _)
                                 (linear_tapp (linear_tlam L)) ([m] frameapply'_nil) (L T).

frame_linear_cons_app1 : frame_linear_lem2 C 
                             ([m] frameapply'_cons (frameapp_app : frameapp (fapp M2) (M1 m) _) (FA m))
                             (linear_app1 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_app1 L')
                      &lt;- frame_linear_lem2 C FA L FA' L'.

frame_linear_cons_tapp1 : frame_linear_lem2 C
                             ([m] frameapply'_cons (frameapp_app : frameapp (ftapp T) (M1 m) _) (FA m))
                             (linear_tapp L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_tapp L')
                      &lt;- frame_linear_lem2 C FA L FA' L'.

frame_linear_cons_letu1 : frame_linear_lem2 C
                             ([m] frameapply'_cons (frameapp_app : frameapp (fletu T) (M1 m) _) (FA m))
                             (linear_letu1 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_letu1 L')
                      &lt;- frame_linear_lem2 C FA L FA' L'.

frame_linear_cons_letb1 : frame_linear_lem2 C
                             ([m] frameapply'_cons (frameapp_app : frameapp (fletb T) (M1 m) _) (FA m))
                             (linear_letb1 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_letb1 L')
                      &lt;- frame_linear_lem2 C FA L FA' L'.

frame_linear_cons_lett1 : frame_linear_lem2 C
                             ([m] frameapply'_cons (frameapp_app : frameapp (flett T) (M1 m) _) (FA m))
                             (linear_lett1 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_lett1 L')
                      &lt;- frame_linear_lem2 C FA L FA' L'.

frame_linear_cons_letu2 : frame_linear_lem2 (C : redex_tp C' _)
                             ([m] frameapply'_cons (frameapp_app : frameapp (fletu (M2 m)) M1 _) (FA m))
                             (linear_letu2 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_letu2 L)
                      &lt;- lem33 C' FA FA'.

frame_linear_cons_letb2 : frame_linear_lem2 (C : redex_tp C' _)
                             ([m] frameapply'_cons (frameapp_app : frameapp (fletb (M2 m)) M1 _) (FA m))
                             (linear_letb2 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_letb2 L)
                      &lt;- lem33 C' FA FA'.

frame_linear_cons_lett2 : frame_linear_lem2 (C : redex_tp C' _)
                             ([m] frameapply'_cons (frameapp_app : frameapp (flett (M2 m)) M1 _) (FA m))
                             (linear_lett2 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_lett2 L)
                      &lt;- lem33 C' FA FA'.

frame_linear_cons_app2 : frame_linear_lem2 (C : redex_tp C' _)
                             ([m] frameapply'_cons (frameapp_app : frameapp (fapp (M2 m)) M1 _) (FA m))
                             (linear_app2 L) ([m] frameapply'_cons frameapp_app (FA' m)) (linear_app2 L)
                      &lt;- lem33 C' FA FA'.

frame_linear_cons_tens1 : frame_linear_lem2 (C : redex_tp C' _)
                              (FA:\{m\} frameapply' (Fs m) (M1 m) (tens (M3 m) M4))
                              (linear_tens1 L) FA' (linear_tens1 L)
                      &lt;- lem31 ([m] val_tens) FA Q
                      &lt;- lem32 Fs ([m] tens (M3 m) M4) ([m] val_tens) C' Q FA'.

frame_linear_cons_tens2 : frame_linear_lem2 (C : redex_tp C' _)
                              (FA:\{m\} frameapply' (Fs m) (M1 m) (tens M3 (M4 m)))
                              (linear_tens2 L) FA' (linear_tens2 L)
                      &lt;- lem31 ([m] val_tens) FA Q
                      &lt;- lem32 Fs ([m] tens M3 (M4 m)) ([m] val_tens) C' Q FA'.

frame_linear_cons_tlam : frame_linear_lem2 (C : redex_tp C' _)
                              (FA:\{m\} frameapply' (Fs m) (M1 m) (tlam (M4 m)))
                              (linear_tlam L) FA' (linear_tlam L)
                      &lt;- lem31 ([m] val_tlam) FA Q
                      &lt;- lem32 Fs ([m] tlam (M4 m)) ([m] val_tlam) C' Q FA'.

frame_linear_cons_lam_lem2 : frame_linear_lem2 (C : redex_tp C' _)
                              (FA:\{m:term\} frameapply' (Fs m) (M1 m) (lam T1 (M4 m)))
                              (linear_lam L) FA' (linear_lam L)
                      &lt;- lem31 ([m] val_lam) FA Q
                      &lt;- lem32 Fs ([m] lam T1 (M4 m)) ([m] val_lam) C' Q FA'.

frame_linear_lam_lem2_id : frame_linear_lem2 (C : redex_tp C' _)
                              (FA:\{m\} frameapply' (Fs m) (M1 m) m) linear_id FA' linear_id
                      &lt;- lem34 FA Q
                      &lt;- (\{m\} frameapply'_eq (Q m) (FA m) (FA_ m))
                      &lt;- (\{m\} frameapply'_nil_eq (FA_ m) (Q' m))
                      &lt;- lem35 Fs ([m] m) C' Q' FA'.

%worlds (blam) (frame_linear_lem2 _ _ _ _ _).
%total FA (frame_linear_lem2 _ FA _ _ _).

frame_linear_lem1 :
               redex_tp (C : \{m:term\} redex (M m) (M' m)) Ct -&gt;
               (\{m:term\} frameapply (Fs m) (M m) (R m)) -&gt; linear R -&gt;
               (\{m\} frameapply (Fs m) (M' m) (R' m)) -&gt; linear R' -&gt; type.
               
%mode frame_linear_lem1 +C +FA +L -FA' -L'.

frame_linear_lem1_rule : frame_linear_lem1 C (FA : \{m\} frameapply (Fs m) _ _) LR FA' LR'
               &lt;- (\{m\} revFs_exists (Fs m) nil (Rev m : revFs (Fs m) nil (Fs' m)))
               &lt;- (\{m\} frameapply_e2 (Rev m) (FA m) (FA_ m))
               &lt;- frame_linear_lem2 C FA_ LR FA3 LR'
               &lt;- (\{m\} revFs_exists (Fs' m) nil (Rev' m))
               &lt;- (\{m\} revrev_id (Rev m) (Rev' m) (Q m))
               &lt;- (\{m\} frameapply_e1 (Rev' m) (FA3 m) (FA4 m))
               &lt;- (\{m\} eqf_symm (Q m) (Q' m))
               &lt;- (\{m\} frameapply_eq (Q' m) (FA4 m) (FA' m)).

%worlds (blam) (frame_linear_lem1 _ _ _ _ _).
%total \{\} (frame_linear_lem1 _ _ _ _ _).

frame_linear : (\{m\} redex (M m) (M' m)) -&gt; (M A) ? T -&gt;
                (\{m:term\} frameapply (Fs m) (M m) (R m)) -&gt; linear R -&gt; 
                (\{m\} frameapply (Fs m) (M' m) (R' m)) -&gt; linear R' -&gt; type.
%mode frame_linear +R +D +FA +L -FA' -L'.

frame_linear_app : frame_linear ([m] redex_app) (of_app D2 (of_lam LM _)) FA LR FA' LR'
                &lt;- frame_linear_lem1 (redex_tp_app LM
                                  : redex_tp ([m:term] (redex_app : redex (app (lam T (M1 m)) _) _)) _)
                      FA LR FA' LR'.

frame_linear_lett : frame_linear ([m] redex_lett) (of_lett L1 L2 _ _) FA LR FA' LR'
                &lt;- frame_linear_lem1 (redex_tp_lett L2 L1
                      : redex_tp ([m:term] (redex_lett : redex (lett (tens (M1 m) (M2 m)) (M3 m)) _)) _)
                      FA LR FA' LR'.

frame_linear_letu : frame_linear ([m] redex_letu) _ FA LR FA' LR'
                &lt;- frame_linear_lem1 redex_tp_letu FA LR FA' LR'.

frame_linear_letb : frame_linear ([m] redex_letb) _ FA LR FA' LR'
                &lt;- frame_linear_lem1 redex_tp_letb FA LR FA' LR'.

frame_linear_tapp : frame_linear ([m] redex_tapp) _ FA LR FA' LR'
                &lt;- frame_linear_lem1 redex_tp_tapp FA LR FA' LR'.

%worlds () (frame_linear _ _ _ _ _ _).
%total \{\} (frame_linear _ _ _ _ _ _).
&lt;/twelf&gt;

#
#
# Termination is invariant to redexes
&lt;twelf&gt;
add_redex_steps : redex M M' -&gt; frameterm Fs M' -&gt; frameterm Fs M -&gt; type.
%mode add_redex_steps +R +Ft -Ft'.
add_redex_steps_app : add_redex_steps redex_app Ft (frameterm_app (frameterm_lam Ft)).
add_redex_steps_tapp : add_redex_steps redex_tapp Ft (frameterm_tapp (frameterm_tlam Ft)).
add_redex_steps_lett : add_redex_steps redex_lett Ft (frameterm_lett (frameterm_tens Ft)).
add_redex_steps_letu : add_redex_steps redex_letu Ft (frameterm_letu (frameterm_unit Ft)).
add_redex_steps_letb : add_redex_steps redex_letb Ft (frameterm_letb (frameterm_thunk Ft)).
%worlds () (add_redex_steps _ _ _).
%total \{\} (add_redex_steps _ _ _).

lem42 : \{Fs\} \{N\} redex M M' -&gt; frameterm (Fs M') (N M') -&gt; frameterm (Fs M) (N M) -&gt; type.
%mode lem42 +Fs +N +R +Ft -Ft'.

lem42_val : lem42 ([a] nil) ([a] a) R (frameterm_val V) Ft
                &lt;- add_redex_steps R (frameterm_val V) Ft.

lem42_base1 : lem42 ([a:term] nil) ([a] (lam T _))   _ (frameterm_val _) (frameterm_val val_lam).
lem42_base2 : lem42 ([a:term] nil) ([a] (tlam _))    _ (frameterm_val _) (frameterm_val val_tlam).
lem42_base3 : lem42 ([a:term] nil) ([a] (tens _ _))  _ (frameterm_val _) (frameterm_val val_tens).
lem42_base4 : lem42 ([a:term] nil) ([a] (thunk T _)) _ (frameterm_val _) (frameterm_val val_thunk).
lem42_base5 : lem42 ([a:term] nil) ([a] unit)        _ (frameterm_val _) (frameterm_val val_unit).

lem42_app : lem42 Fs ([a] a) R (frameterm_app Ft) Ft'
                 &lt;- lem42 ([a] cons (fapp M2) (Fs a)) ([a] M1) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_app Ft_) Ft'.

lem42_tapp : lem42 Fs ([a] a) R (frameterm_tapp Ft) Ft'
                 &lt;- lem42 ([a] cons (ftapp T) (Fs a)) ([a] M1) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_tapp Ft_) Ft'.

lem42_lett : lem42 Fs ([a] a) R (frameterm_lett Ft) Ft'
                 &lt;- lem42 ([a] cons (flett T) (Fs a)) ([a] M1) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_lett Ft_) Ft'.

lem42_letu : lem42 Fs ([a] a) R (frameterm_letu Ft) Ft'
                 &lt;- lem42 ([a] cons (fletu T) (Fs a)) ([a] M1) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_letu Ft_) Ft'.

lem42_letb : lem42 Fs ([a] a) R (frameterm_letb Ft) Ft'
                 &lt;- lem42 ([a] cons (fletb T) (Fs a)) ([a] M1) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_letb Ft_) Ft'.

lem42_unit : lem42 ([a] cons (fletu (M2 a)) (Fs a)) ([a] a) R (frameterm_unit Ft) Ft'
                 &lt;- lem42 Fs ([a] M2 a) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_unit Ft_) Ft'.

lem42_tlam : lem42 ([a] cons (ftapp T) (Fs a)) ([a] a) R
                   (frameterm_tlam Ft : frameterm _ (tlam M)) Ft'
                 &lt;- lem42 Fs ([a] M T) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_tlam Ft_) Ft'.

lem42_lam : lem42 ([a] cons (fapp (M2 a)) (Fs a)) ([a] a) R
                  (frameterm_lam Ft : frameterm _ (lam T M1')) Ft'
                 &lt;- lem42 Fs ([a] M1' (M2 a)) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_lam Ft_) Ft'.

lem42_tens : lem42 ([a] cons (flett (M3 a)) (Fs a)) ([a] a) R
                   (frameterm_tens Ft : frameterm _ (tens M1 M2)) Ft'
                 &lt;- lem42 Fs ([a] M3 a M1 M2) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_tens Ft_) Ft'.

lem42_thunk : lem42 ([a] cons (fletb (M2 a)) (Fs a)) ([a] a) R
                    (frameterm_thunk Ft : frameterm _ (thunk T M1)) Ft'
                 &lt;- lem42 Fs ([a] M2 a (letb (thunk T M1) M1)) R Ft Ft_
                 &lt;- add_redex_steps R (frameterm_thunk Ft_) Ft'.

lem42_lam2 : lem42 ([a] cons (fapp (M2 a)) (Fs a)) ([a] lam T (M1' a)) R
                   (frameterm_lam Ft) (frameterm_lam Ft')
               &lt;- lem42 Fs ([a] M1' a (M2 a)) R Ft Ft'.

lem42_tens2 : lem42 ([a] cons (flett (M3 a)) (Fs a)) ([a] tens (M1 a) (M2 a)) R
                    (frameterm_tens Ft) (frameterm_tens Ft')
               &lt;- lem42 Fs ([a] M3 a (M1 a) (M2 a)) R Ft Ft'.

lem42_tlam2 : lem42 ([a] cons (ftapp T) (Fs a)) ([a] tlam (M1' a)) R
                    (frameterm_tlam Ft) (frameterm_tlam Ft')
               &lt;- lem42 Fs ([a] M1' a T) R Ft Ft'.

lem42_unit2 : lem42 ([a] cons (fletu (M2 a)) (Fs a)) ([a] unit) R
                    (frameterm_unit Ft) (frameterm_unit Ft')
               &lt;- lem42 Fs ([a] (M2 a)) R Ft Ft'.

lem42_thunk2 : lem42 ([a] cons (fletb (M2 a)) (Fs a)) ([a] thunk T (M1 a)) R
                     (frameterm_thunk Ft) (frameterm_thunk Ft')
               &lt;- lem42 Fs ([a] (M2 a (letb (thunk T (M1 a)) (M1 a)))) R Ft Ft'.

lem42_app2 : lem42 Fs ([a] app (M1 a) (M2 a)) R Ft (frameterm_app Ft')
               &lt;- inverse_ft_app Ft Ft2
               &lt;- lem42 ([a] cons (fapp (M2 a)) (Fs a)) M1 R Ft2 Ft'.

lem42_tapp2 : lem42 Fs ([a] tapp (M1 a) T) R Ft (frameterm_tapp Ft')
               &lt;- inverse_ft_tapp Ft Ft2
               &lt;- lem42 ([a] cons (ftapp T) (Fs a)) M1 R Ft2 Ft'.

lem42_letu2 : lem42 Fs ([a] letu (M1 a) (M2 a)) R Ft (frameterm_letu Ft')
               &lt;- inverse_ft_letu Ft Ft2
               &lt;- lem42 ([a] cons (fletu (M2 a)) (Fs a)) M1 R Ft2 Ft'.

lem42_letb2 : lem42 Fs ([a] letb (M1 a) (M2 a)) R Ft (frameterm_letb Ft')
               &lt;- inverse_ft_letb Ft Ft2
               &lt;- lem42 ([a] cons (fletb (M2 a)) (Fs a)) M1 R Ft2 Ft'.

lem42_lett2 : lem42 Fs ([a] lett (M1 a) (M2 a)) R Ft (frameterm_lett Ft')
               &lt;- inverse_ft_lett Ft Ft2
               &lt;- lem42 ([a] cons (flett (M2 a)) (Fs a)) M1 R Ft2 Ft'.

%worlds () (lem42 _ _ _ _ _).
%total D (lem42 _ _ _ D _).

lem20 : \{M:term\}\{M':term\} (\{a:term\} value (B a)) -&gt; (\{a\} frameapply' (Fs a) (N a) (B a)) -&gt;
                          eqf (Fs M) (Fs M') -&gt; type.
%mode lem20 +M +M' +V +FA -Q.
lem20_rule : lem20 M M' _ ([a] frameapply'_nil) eqf_ref.
%worlds (blam) (lem20 _ _ _ _ _).
%freeze lem20.
%total \{\} (lem20 _ _ _ _ _).

lem26 : \{F1\}\{F2\} (\{m\} frameapp (F m) m M1) -&gt; eqf F1 F2 -&gt; type.
%mode lem26 +F +F' +FA -Q.
%worlds (blam) (lem26 _ _ _ _).
%freeze lem26.
%total \{\} (lem26 _ _ _ _).
&lt;/twelf&gt;

#
#
# More on linear frames
&lt;twelf&gt;
lem27 : relavant ([m] N) -&gt; \{Fs\}\{Fs'\} eqf Fs Fs' -&gt; type.
%mode lem27 +R +Fs +Fs' -Q.
lem27_app1 : lem27 (relavant_app1 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_app2 : lem27 (relavant_app2 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_lam : lem27 (relavant_lam R) M M' Q
       &lt;- lem27 (R unit) M M' Q.
lem27_tlam : lem27 (relavant_tlam R) M M' Q
       &lt;- lem27 (R i) M M' Q.
lem27_tapp : lem27 (relavant_tapp R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_letb1 : lem27 (relavant_letb1 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_leb2 : lem27 (relavant_letb2 R) M M' Q
       &lt;- lem27 (R unit) M M' Q.
lem27_thunk : lem27 (relavant_thunk R) M M' Q
       &lt;- lem27 (R unit) M M' Q.
lem27_letu1 : lem27 (relavant_letu1 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_letu2 : lem27 (relavant_letu2 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_tens1 : lem27 (relavant_tens1 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_tens2 : lem27 (relavant_tens2 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_lett1 : lem27 (relavant_lett1 R) M M' Q
       &lt;- lem27 R M M' Q.
lem27_lett2 : lem27 (relavant_lett2 R) M M' Q
       &lt;- lem27 (R unit unit) M M' Q.
%worlds (blam) (lem27 _ _ _ _).
%freeze lem27.
%total D (lem27 D _ _ _).

lem28 : \{Fs'\}\{Fs_\} (\{m:term\} frameapply (Fs m) (N m) M1) -&gt; relavant N -&gt; eqf Fs' Fs_ -&gt; type.
%mode lem28 +Fs' +Fs_ +FA +R -Q.
lem28_id : lem28 Fs' Fs_ ([m] frameapply_cons _ (F m)) _ Q
         &lt;- lem26 _ _ F Q.
lem28_app1 : lem28 Fs' Fs_ ([m] frameapply_cons (FA m)
                   (frameapp_app : frameapp (fapp (N m)) (M3 m) (app (M3 m) (N m)))) R Q
         &lt;- lem28 Fs' Fs_ FA (relavant_app1 R) Q.
lem28_tapp : lem28 Fs' Fs_ ([m] frameapply_cons (FA m)
                   (frameapp_app : frameapp (ftapp T) (M3 m) (tapp (M3 m) T))) R Q
         &lt;- lem28 Fs' Fs_ FA (relavant_tapp R) Q.
lem28_letb : lem28 Fs' Fs_ ([m] frameapply_cons (FA m)
                   (frameapp_app : frameapp (fletb (N m)) (M3 m) (letb (M3 m) (N m)))) R Q
         &lt;- lem28 Fs' Fs_ FA (relavant_letb1 R) Q.
lem28_lett : lem28 Fs' Fs_ ([m] frameapply_cons (FA m)
                   (frameapp_app : frameapp (flett (N m)) (M3 m) (lett (M3 m) (N m)))) R Q
         &lt;- lem28 Fs' Fs_ FA (relavant_lett1 R) Q.
lem28_letu : lem28 Fs' Fs_ ([m] frameapply_cons (FA m)
                   (frameapp_app : frameapp (fletu (N m)) (M3 m) (letu (M3 m) (N m)))) R Q
         &lt;- lem28 Fs' Fs_ FA (relavant_letu1 R) Q.
lem28_nil : lem28 Fs' Fs_ ([m:term] (FA m) : frameapply nil (N2 m) N1) R Q
         &lt;- (\{m\} frameapply_nil_eq (FA m) (Q' m))
         &lt;- eq_relavant Q' R R'
         &lt;- lem27 R' Fs' Fs_ Q.
%worlds (blam) (lem28 _ _ _ _ _).
%freeze lem28.
%total D (lem28 _ _ D _ _).

lem19 : \{M':term\}\{M:term\} (\{a\} frameapply' (Fs a) a (R a)) -&gt; linear R -&gt;
                           eqf (Fs M') (Fs M) -&gt; type.
%mode lem19 +M +M' +FA +L -Q.

lem19_nil : lem19 M M' ([a] frameapply'_nil) L eqf_ref.

lem19_app1 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (fapp N2) _ _)
                        (FA a)) (linear_app1 L) Q
             &lt;- lem19 M M' FA L Q'
             &lt;- eqf_extend (fapp N2) Q' Q.

lem19_letu1 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (fletu N2) _ _)
                         (FA a)) (linear_letu1 L) Q
             &lt;- lem19 M M' FA L Q'
             &lt;- eqf_extend (fletu N2) Q' Q.

lem19_lett1 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (flett N2) _ _)
                         (FA a)) (linear_lett1 L) Q
             &lt;- lem19 M M' FA L Q'
             &lt;- eqf_extend (flett N2) Q' Q.

lem19_letb1 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (fletb N2) _ _)
                         (FA a)) (linear_letb1 L) Q
             &lt;- lem19 M M' FA L Q'
             &lt;- eqf_extend (fletb N2) Q' Q.

lem19_tapp : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (ftapp N2) _ _) 
                        (FA a)) (linear_tapp L) Q
             &lt;- lem19 M M' FA L Q'
             &lt;- eqf_extend (ftapp N2) Q' Q.

lem19_tens1 : lem19 M M' FA (linear_tens1 L) Q
             &lt;- lem20 M M' ([a] val_tens) FA Q.

lem19_tens2 : lem19 M M' FA (linear_tens2 L) Q
             &lt;- lem20 M M' ([a] val_tens) FA Q.

lem19_lam : lem19 M M' FA (linear_lam L) Q
             &lt;- lem20 M M' ([a] val_lam) FA Q.

lem19_tlam : lem19 M M' FA (linear_tlam L) Q
             &lt;- lem20 M M' ([a] val_tlam) FA Q.

lem19_app2 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (fapp (N2 a)) _ _)
                        (FA a : frameapply' (Fs a) a M1)) (linear_app2 L) Q
            &lt;- (\{y:term\} revFs_exists (Fs y) nil (Rev y))
            &lt;- (\{y:term\} frameapply_e1 (Rev y) (FA y) (FA' y))
            &lt;- lem28 _ _ FA' relavant_id Q.

lem19_letb2 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (fletb (N2 a)) _ _)
                         (FA a : frameapply' (Fs a) a M1)) (linear_letb2 L) Q
            &lt;- (\{y:term\} revFs_exists (Fs y) nil (Rev y))
            &lt;- (\{y:term\} frameapply_e1 (Rev y) (FA y) (FA' y))
            &lt;- lem28 _ _ FA' relavant_id Q.

lem19_letu2 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (fletu (N2 a)) _ _)
                         (FA a : frameapply' (Fs a) a M1)) (linear_letu2 L) Q
            &lt;- (\{y:term\} revFs_exists (Fs y) nil (Rev y))
            &lt;- (\{y:term\} frameapply_e1 (Rev y) (FA y) (FA' y))
            &lt;- lem28 _ _ FA' relavant_id Q.

lem19_lett2 : lem19 M M' ([a] frameapply'_cons (frameapp_app : frameapp (flett (N2 a)) _ _)
                         (FA a : frameapply' (Fs a) a M1)) (linear_lett2 L) Q
            &lt;- (\{y:term\} revFs_exists (Fs y) nil (Rev y))
            &lt;- (\{y:term\} frameapply_e1 (Rev y) (FA y) (FA' y))
            &lt;- lem28 _ _ FA' relavant_id Q.

%worlds (blam) (lem19 _ _ _ _ _).
%total D (lem19 _ _ _ D _).

lem18 : \{M':term\}\{M:term\} (\{a\} frameapply (Fs a) a (R a)) -&gt; linear R -&gt; eqf (Fs M') (Fs M) -&gt; type.
%mode lem18 +M +M' +FA +L -Q.

lem18_rule : lem18 M M' (FA : \{a\} frameapply (Fs a) _ _) L Q
        &lt;- (\{a\} revFs_exists (Fs a) nil (Rev a))
        &lt;- (\{a\} frameapply_e2 (Rev a) (FA a) (FA' a))
        &lt;- lem19 M M' FA' L Q'
        &lt;- rev_eq2 Q' (Rev M) R
        &lt;- rev_injective R (Rev M') Q.

%worlds (blam) (lem18 _ _ _ _ _).
%total \{\} (lem18 _ _ _ _ _).

apply_linear : linear M -&gt; linear N -&gt; linear R -&gt; (\{a\} frameapply' (Fs a) (N a) (R a)) -&gt;
                      (\{a\} frameapply' (Fs a) (M (N a)) (R' a)) -&gt; linear R' -&gt; type.
%mode apply_linear +LM +LN +LR +FA -FA' -LR'.

apply_linear_nil : apply_linear LM LN LR ([a:term] frameapply'_nil) ([a:term] frameapply'_nil) LR'
                       &lt;- sub_linear LM LN LR'.

apply_linear_app1 : apply_linear LM LN (linear_app1 L)
                                 ([a:term] frameapply'_cons (frameapp_app : frameapp (fapp M2) _ _)
                                                            (FA a))
                                 ([a:term] frameapply'_cons (frameapp_app) (FA' a))
                                 (linear_app1 LR')
                          &lt;- apply_linear LM LN L FA FA' LR'.

apply_linear_tapp1 : apply_linear LM LN (linear_tapp L)
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (ftapp M2) _ _)
                                                             (FA a))
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a))
                                  (linear_tapp LR')
                          &lt;- apply_linear LM LN L FA FA' LR'.

apply_linear_letu1 : apply_linear LM LN (linear_letu1 L)
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (fletu M2) _ _)
                                                             (FA a)) 
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a)) (linear_letu1 LR')
                          &lt;- apply_linear LM LN L FA FA' LR'.

apply_linear_letb1 : apply_linear LM LN (linear_letb1 L) 
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (fletb M2) _ _)
                                                             (FA a)) 
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a)) (linear_letb1 LR')
                          &lt;- apply_linear LM LN L FA FA' LR'.

apply_linear_lett1 : apply_linear LM LN (linear_lett1 L)
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (flett M2) _ _)
                                                             (FA a)) 
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a)) (linear_lett1 LR')
                          &lt;- apply_linear LM LN L FA FA' LR'.

apply_linear_app2 : apply_linear (LM : linear M) LN (linear_app2 L)
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (fapp _) _ _)
                                                             (FA a)) 
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a)) (linear_app2 L)
                          &lt;- lem45 M FA FA'.

apply_linear_letu2 : apply_linear (LM : linear M) LN (linear_letu2 L)
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (fletu _) _ _)
                                                             (FA a)) 
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a)) (linear_letu2 L)
                          &lt;- lem45 M FA FA'.

apply_linear_letb2 : apply_linear (LM : linear M) LN (linear_letb2 L)
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (fletb _) _ _)
                                                             (FA a)) 
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a)) (linear_letb2 L)
                          &lt;- lem45 M FA FA'.

apply_linear_lett2 : apply_linear (LM : linear M) LN (linear_lett2 L)
                                  ([a:term] frameapply'_cons (frameapp_app : frameapp (flett _) _ _)
                                                             (FA a)) 
                                  ([a:term] frameapply'_cons (frameapp_app) (FA' a)) (linear_lett2 L)
                          &lt;- lem45 M FA FA'.

%worlds () (apply_linear _ _ _ _ _ _).
%freeze apply_linear.
%total D (apply_linear _ _ _ D _ _).

apply_lin : linear M -&gt; linear N -&gt; linear R -&gt; (\{a\} frameapply (Fs a) (N a) (R a)) -&gt;
                      (\{a\} frameapply (Fs a) (M (N a)) (R' a)) -&gt; linear R' -&gt; type.
%mode apply_lin +LM +LN +LR +FA -FA' -LR'.

apply_lin_rule : apply_lin LM LN LR (FA : \{m\} frameapply (Fs m) (N m) _) FA4 L2
          &lt;- (\{m\} revFs_exists (Fs m) nil (Rev m : revFs (Fs m) nil (Fs' m)))
          &lt;- (\{m\} frameapply_e2 (Rev m) (FA m) (FA' m))
          &lt;- apply_linear LM LN LR FA' FA2 L2
          &lt;- (\{m\} revFs_exists (Fs' m) nil (Rev' m))
          &lt;- (\{m\} frameapply_e1 (Rev' m) (FA2 m) (FA3 m))
          &lt;- (\{m\} revrev_id (Rev m) (Rev' m) (Q m))
          &lt;- (\{m\} eqf_symm (Q m) (Q' m))
          &lt;- (\{m\} frameapply_eq (Q' m) (FA3 m) (FA4 m)).

%worlds () (apply_lin _ _ _ _ _ _).
%freeze apply_lin.
%total D (apply_lin _ _ _ D _ _).

add_frame : \{F\} (\{m:term\} frameapply (Fs m) m (R m)) -&gt; linear R -&gt; 
            (\{m:term\} frameapply (cons F (Fs m)) m (R' m)) -&gt; linear R' -&gt; type.
%mode add_frame +M +FA +L -FA' -L'.

add_frame_app : add_frame (fapp M) FA LR ([m] frameapply_cons (FA' m) frameapp_app) L'
              &lt;- apply_lin (linear_app1 linear_id : linear ([a] app a M)) linear_id LR FA FA' L'.

add_frame_tapp : add_frame (ftapp T) FA LR ([m] frameapply_cons (FA' m) frameapp_app) L'
              &lt;- apply_lin (linear_tapp linear_id : linear ([a] tapp a T)) linear_id LR FA FA' L'.

add_frame_lett : add_frame (flett M) FA LR ([m] frameapply_cons (FA' m) frameapp_app) L'
              &lt;- apply_lin (linear_lett1 linear_id : linear ([a] lett a M)) linear_id LR FA FA' L'.

add_frame_letb : add_frame (fletb M) FA LR ([m] frameapply_cons (FA' m) frameapp_app) L'
              &lt;- apply_lin (linear_letb1 linear_id : linear ([a] letb a M)) linear_id LR FA FA' L'.

add_frame_letu : add_frame (fletu M) FA LR ([m] frameapply_cons (FA' m) frameapp_app) L'
              &lt;- apply_lin (linear_letu1 linear_id : linear ([a] letu a M)) linear_id LR FA FA' L'.

%worlds () (add_frame _ _ _ _ _).
%freeze add_frame.
%total \{\} (add_frame _ _ _ _ _).
&lt;/twelf&gt;

#
#
# Strictness lemma preparations
Now we are ready for the strictness lemma.

#
#
# Height preservation
The proof relies on complete induction on the height of a derivation which is a little troublesome in Twelf.
&lt;twelf&gt;
nat : type.

zero : nat.
succ : nat -&gt; nat.

height_ok : frameterm _ _ -&gt; nat -&gt; type.
height_ok_bot : height_ok (frameterm_val _) N.
height_ok_app : height_ok (frameterm_app F)     ((succ N)) &lt;- height_ok F (N).
height_ok_tapp : height_ok (frameterm_tapp F)   ((succ N)) &lt;- height_ok F (N).
height_ok_letu : height_ok (frameterm_letu F)   ((succ N)) &lt;- height_ok F (N).
height_ok_lett : height_ok (frameterm_lett F)   ((succ N)) &lt;- height_ok F (N).
height_ok_letb : height_ok (frameterm_letb F)   ((succ N)) &lt;- height_ok F (N).
height_ok_lam : height_ok (frameterm_lam F)     ((succ N)) &lt;- height_ok F (N).
height_ok_tlam : height_ok (frameterm_tlam F)   ((succ N)) &lt;- height_ok F (N).
height_ok_unit : height_ok (frameterm_unit F)   ((succ N)) &lt;- height_ok F (N).
height_ok_tens : height_ok (frameterm_tens F)   ((succ N)) &lt;- height_ok F (N).
height_ok_thunk : height_ok (frameterm_thunk F) ((succ N)) &lt;- height_ok F (N).

height_ok_exists : \{ft:frameterm Fs M\} height_ok ft N -&gt; type.
%mode height_ok_exists +FT -H.
height_ok_exists_bot : height_ok_exists (frameterm_val _) (height_ok_bot : height_ok _ zero).
height_ok_exists_app : height_ok_exists (frameterm_app Ft) (height_ok_app H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_tapp : height_ok_exists (frameterm_tapp Ft) (height_ok_tapp H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_letu : height_ok_exists (frameterm_letu Ft) (height_ok_letu H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_lett : height_ok_exists (frameterm_lett Ft) (height_ok_lett H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_letb : height_ok_exists (frameterm_letb Ft) (height_ok_letb H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_lam : height_ok_exists (frameterm_lam Ft) (height_ok_lam H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_tlam : height_ok_exists (frameterm_tlam Ft) (height_ok_tlam H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_unit : height_ok_exists (frameterm_unit Ft) (height_ok_unit H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_tens : height_ok_exists (frameterm_tens Ft) (height_ok_tens H)
                          &lt;- height_ok_exists Ft H.
height_ok_exists_thunk : height_ok_exists (frameterm_thunk Ft) (height_ok_thunk H)
                          &lt;- height_ok_exists Ft H.
%worlds () (height_ok_exists _ _).
%total D (height_ok_exists D _).

succ_height_ok : height_ok Ft N -&gt; height_ok Ft (succ N) -&gt; type.
%mode succ_height_ok +H -H'.
succ_height_ok_bot : succ_height_ok height_ok_bot height_ok_bot.
succ_height_ok_app : succ_height_ok (height_ok_app H) (height_ok_app H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_tapp : succ_height_ok (height_ok_tapp H) (height_ok_tapp H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_letu : succ_height_ok (height_ok_letu H) (height_ok_letu H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_lett : succ_height_ok (height_ok_lett H) (height_ok_lett H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_letb : succ_height_ok (height_ok_letb H) (height_ok_letb H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_lam : succ_height_ok (height_ok_lam H) (height_ok_lam H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_tlam : succ_height_ok (height_ok_tlam H) (height_ok_tlam H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_unit : succ_height_ok (height_ok_unit H) (height_ok_unit H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_tens : succ_height_ok (height_ok_tens H) (height_ok_tens H')
                         &lt;- succ_height_ok H H'.
succ_height_ok_thunk : succ_height_ok (height_ok_thunk H) (height_ok_thunk H')
                         &lt;- succ_height_ok H H'.
%worlds () (succ_height_ok _ _).
%total D (succ_height_ok D _).

frameterm_eq_framesNum : eqf Fs Fs' -&gt; eq M M' -&gt; \{Ft : frameterm Fs M\} height_ok Ft Num -&gt;
                                                  \{Ft':frameterm Fs' M'\} height_ok Ft' Num -&gt; type.
%mode frameterm_eq_framesNum +Q +Q' +Ft +H -Ft' -H'.
frameterm_eq_framesNum_rule : frameterm_eq_framesNum eqf_ref eq_ref Ft H Ft H.
%worlds () (frameterm_eq_framesNum _ _ _ _ _ _).
%total \{\} (frameterm_eq_framesNum _ _ _ _ _ _).
&lt;/twelf&gt;

#
#
#
# Height reducing inversions
&lt;twelf&gt;
up_app : \{ft:frameterm Fs (app M1 M2)\} height_ok ft (succ N) -&gt;
         \{ft':frameterm (cons (fapp M2) Fs) M1\} height_ok ft' N -&gt; type.
%mode up_app +FT +H -FT' -H'.
up_app_rule : up_app (frameterm_app F) (height_ok_app H) F H.
%worlds () (up_app _ _ _ _).
%total D (up_app D _ _ _).

up_tapp : \{ft:frameterm Fs (tapp M T)\} height_ok ft (succ N) -&gt; 
          \{ft':frameterm (cons (ftapp T) Fs) M\} height_ok ft' N -&gt; type.
%mode up_tapp +FT +H -FT' -H'.
up_tapp_rule : up_tapp (frameterm_tapp F) (height_ok_tapp H) F H.
%worlds () (up_tapp _ _ _ _).
%total D (up_tapp D _ _ _).

up_lett : \{ft:frameterm Fs (lett M1 M2)\} height_ok ft (succ N) -&gt;
          \{ft':frameterm (cons (flett M2) Fs) M1\} height_ok ft' N -&gt; type.
%mode up_lett +FT +H -FT' -H'.
up_lett_rule : up_lett (frameterm_lett F) (height_ok_lett H) F H.
%worlds () (up_lett _ _ _ _).
%total D (up_lett D _ _ _).

up_letu : \{ft:frameterm Fs (letu M1 M2)\} height_ok ft (succ N) -&gt;
          \{ft':frameterm (cons (fletu M2) Fs) M1\} height_ok ft' N -&gt; type.
%mode up_letu +FT +H -FT' -H'.
up_letu_rule : up_letu (frameterm_letu F) (height_ok_letu H) F H.
%worlds () (up_letu _ _ _ _).
%total D (up_letu D _ _ _).

up_letb : \{ft:frameterm Fs (letb M1 M2)\} height_ok ft (succ N) -&gt;
          \{ft':frameterm (cons (fletb M2) Fs) M1\} height_ok ft' N -&gt; type.
%mode up_letb +FT +H -FT' -H'.
up_letb_rule : up_letb (frameterm_letb F) (height_ok_letb H) F H.
%worlds () (up_letb _ _ _ _).
%total D (up_letb D _ _ _).

up_lam : \{ft:frameterm (cons (fapp M2) Fs) (lam T M1')\} height_ok ft (succ N) -&gt;
         \{ft':frameterm Fs (M1' M2 )\} height_ok ft' N -&gt; type.
%mode up_lam +FT +H -FT' -H'.
up_lam_rule : up_lam (frameterm_lam F) (height_ok_lam H) F H.
%worlds () (up_lam _ _ _ _).
%total D (up_lam D _ _ _).

up_tlam : \{ft:frameterm (cons (ftapp T) Fs) (tlam M)\} height_ok ft (succ N) -&gt;
          \{ft':frameterm Fs (M T)\} height_ok ft' N -&gt; type.
%mode up_tlam +FT +H -FT' -H'.
up_tlam_rule : up_tlam (frameterm_tlam F) (height_ok_tlam H) F H.
%worlds () (up_tlam _ _ _ _).
%total D (up_tlam D _ _ _).

up_tens : \{ft:frameterm (cons (flett M3) Fs) (tens M1 M2)\} height_ok ft (succ N) -&gt;
          \{ft':frameterm Fs (M3 M1 M2)\} height_ok ft' N -&gt; type.
%mode up_tens +FT +H -FT' -H'.
up_tens_rule : up_tens (frameterm_tens F) (height_ok_tens H) F H.
%worlds () (up_tens _ _ _ _).
%total D (up_tens D _ _ _).

up_unit : \{ft:frameterm (cons (fletu M) Fs) unit\} height_ok ft (succ N) -&gt;
          \{ft':frameterm Fs M\} height_ok ft' N -&gt; type.
%mode up_unit +FT +H -FT' -H'.
up_unit_rule : up_unit (frameterm_unit F) (height_ok_unit H) F H.
%worlds () (up_unit _ _ _ _).
%total D (up_unit D _ _ _).

up_thunk : \{ft:frameterm (cons (fletb M2) Fs) (thunk T M1)\} height_ok ft (succ N) -&gt;
           \{ft':frameterm Fs (M2 (letb (thunk T M1) M1))\} height_ok ft' N -&gt; type.
%mode up_thunk +FT +H -FT' -H'.
up_thunk_rule : up_thunk (frameterm_thunk F) (height_ok_thunk H) F H.
%worlds () (up_thunk _ _ _ _).
%total D (up_thunk D _ _ _).
&lt;/twelf&gt;

#
#
# Special cases of type preservation
&lt;twelf&gt;
types_pres_app1_s : M \s/ V -&gt; app M N ? T -&gt; app V N ? T -&gt; type.
%mode types_pres_app1_s +E +D -D'.
types_pres_app1_s_rule : types_pres_app1_s E (of_app D2 D1) (of_app D2 D1')
          &lt;- tpres_s D1 E D1'.
%worlds () (types_pres_app1_s _ _ _).
%total \{\} (types_pres_app1_s _ _ _).

types_pres_app2_s : M \s/ V -&gt; app N M ? T -&gt; app N V ? T -&gt; type.
%mode types_pres_app2_s +E +D -D'.
types_pres_app2_s_rule : types_pres_app2_s E (of_app D2 D1) (of_app D2' D1)
          &lt;- tpres_s D2 E D2'.
%worlds () (types_pres_app2_s _ _ _).
%total \{\} (types_pres_app2_s _ _ _).

types_pres_tapp_s :M \s/ V -&gt; tapp M T ? T' -&gt; tapp V T ? T' -&gt; type.
%mode types_pres_tapp_s +E +D -D'.
types_pres_tapp_s_rule : types_pres_tapp_s E (of_tapp T D1) (of_tapp T D1')
                    &lt;- tpres_s D1 E D1'.
%worlds () (types_pres_tapp_s _ _ _).
%total \{\} (types_pres_tapp_s _ _ _).

types_pres_letu_s : M \s/ V -&gt; letu M N ? T -&gt; letu V N ? T -&gt; type.
%mode types_pres_letu_s +E +D -D'.
types_pres_letu_s_rule : types_pres_letu_s E (of_letu D2 D1) (of_letu D2 D1')
          &lt;- tpres_s D1 E D1'.
%worlds () (types_pres_letu_s _ _ _).
%total \{\} (types_pres_letu_s _ _ _).

types_pres_lett_s : M \s/ V -&gt; lett M N ? T -&gt; lett V N ? T -&gt; type.
%mode types_pres_lett_s +E +D -D'.
types_pres_lett_s_rule : types_pres_lett_s E (of_lett L1 L2 D2 D1) (of_lett L1 L2 D2 D1')
          &lt;- tpres_s D1 E D1'.
%worlds () (types_pres_lett_s _ _ _).
%total \{\} (types_pres_lett_s _ _ _).

types_pres_letb_s : M \s/ V -&gt; letb M N ? T -&gt; letb V N ? T -&gt; type.
%mode types_pres_letb_s +E +D -D'.
types_pres_letb_s_rule : types_pres_letb_s E (of_letb D2 D1) (of_letb D2 D1')
          &lt;- tpres_s D1 E D1'.
%worlds () (types_pres_letb_s _ _ _).
%freeze types_pres_letb_s.
%total \{\} (types_pres_letb_s _ _ _).

redex_rev_type : redex M M' -&gt; M ? T -&gt; M' ? T -&gt; type.
%mode redex_rev_type +R +D -D'.

redex_rev_type_app : redex_rev_type redex_app (of_app D2 D1) (D1' _ D2)
         &lt;- inverse_lam D1 D1' _.

redex_rev_type_tapp : redex_rev_type redex_tapp (of_tapp T (of_tlam D1)) (D1 T).

redex_rev_type_letu : redex_rev_type redex_letu (of_letu D2 D1) D2.

redex_rev_type_lett : redex_rev_type redex_lett (of_lett _ _ D3 (of_tens D2 D1)) (D3 _ D1 _ D2).

redex_rev_type_letb : redex_rev_type redex_letb (of_letb D2 (of_thunk D1)) (D2 _ (of_letb D1 (of_thunk D1))).

%worlds () (redex_rev_type _ _ _).
%total \{\} (redex_rev_type _ _ _).
&lt;/twelf&gt;

#
#
# The actual lemma
&lt;twelf&gt;
strictness_base : \{N\}\{M\} (N M) ? bang T -&gt; linear N -&gt; value (N M) -&gt; value M -&gt; type.
%mode strictness_base +N +M +D +L +V -V'.
strictness_base_rule : strictness_base _ _ _ linear_id V V.
%worlds () (strictness_base _ _ _ _ _ _).
%total \{\} (strictness_base _ _ _ _ _ _).

strictness_lem1 :
      % Assumptions:
             \{N\} \{Fs\} \{Num : nat\} \{Ft:frameterm (Fs M) (N M)\} height_ok Ft Num -&gt; 
             (\{a\} frameapply (Fs a) (N a) (FsN a)) -&gt; linear FsN -&gt;
             fstp (Fs M) T1 (bang T2) -&gt; N M ? T1 -&gt; % frameterm (Fs M) (N M) -&gt; 
      % Conclusion:
             \{Ft2 : frameterm (Fs V) (N V)\}  M \s/ V -&gt; 
             height_ok Ft2 Num -&gt; type.

%mode strictness_lem1 +N +Fs +Num +FtM +H +FA +L +FsT +DNM -FtV -EVs -H2.

strictness_lem1_base : strictness_lem1 N ([a] nil) Num (frameterm_val V) H FA L FsTp DNM 
                                       (frameterm_val V) Evs H
         &lt;- frameapply_nil_eq (FA M) Q
         &lt;- eq_val Q V V'
         &lt;- applysound nil FsTp DNM (FA M) DNMB
         &lt;- strictness_base _ M DNMB L V' VM
         &lt;- selfevals VM Evs.

strictness_lem1_app2 : strictness_lem1 ([a] a) Fs _ (frameterm_app Ft) (height_ok_app H)
                                        FA L FsTp
                                        D3 Ft6 (evs_app EvM12 EvM2 EvM1') H7
                &lt;- lem18 (app M1 M2) M1 FA L Q
                &lt;- frameterm_eq_framesNum Q eq_ref (frameterm_app Ft) (height_ok_app H) Ft1 H1
                &lt;- up_app Ft1 H1 Ft2 H2
                &lt;- eqf_fstp Q FsTp FsTp1
                &lt;- typed_step FsTp1 D3 evfs_app FsTp' D3'
                &lt;- add_frame (fapp M2) FA L FA' L'
                &lt;- eq_typings D3 (of_app _ D1)
                &lt;- strictness_lem1 ([a] a) ([a] cons (fapp M2) (Fs a)) _ Ft2 H2 FA' L' FsTp' D3' 
                                    Ft2' (EvM1 : M1 \s/ V1) H2'
                &lt;- tpres_s D1 EvM1 D1'
                &lt;- value_soundness_s EvM1 Val1
                &lt;- eq_val_funs Val1 D1' Q1
                &lt;- eq_type Q1 D1' D1_
                &lt;- eq_typings D1_ (of_lam (L1 : linear M1') D1**)
                &lt;- succ_height_ok H2' H2_
                &lt;- frameterm_eq_framesNum eqf_ref Q1 Ft2' H2_ Ft3 H3
                &lt;- up_lam Ft3 H3 Ft3' H3'
                &lt;- lem18 V1 M2 FA L Q2
                &lt;- frameterm_eq_framesNum Q2 eq_ref Ft3' H3' Ft4 H4
                &lt;- apply_lin L1 linear_id L FA FA2 L2
                &lt;- types_pres_app1_s EvM1 D3 D3_
                &lt;- eq_ctx Q1 ([a] app a M2) Q1'
                &lt;- eq_type Q1' D3_ D4
                &lt;- redex_rev_type redex_app D4 D4'
                &lt;- lem18 (app M1 M2) M2 FA L Q3
                &lt;- eqf_fstp Q3 FsTp FsTp2
                &lt;- strictness_lem1 M1' Fs _ Ft4 H4 FA2 L2 FsTp2 D4' Ft4' (EvM2 : M2 \s/ V2) H4'
                &lt;- lem18 V2 (M1' V2) FA L Q5
                &lt;- frameterm_eq_framesNum Q5 eq_ref Ft4' H4' Ft5 H5
                &lt;- types_pres_app2_s EvM2 D4 D5
                &lt;- redex_rev_type redex_app D5 D5'
                &lt;- lem18 M2 (M1' V2) FA L Q6
                &lt;- eqf_fstp Q6 FsTp2 FsTp3
                &lt;- strictness_lem1 ([a] a) Fs _ Ft5 H5 FA L FsTp3 D5' Ft6 EvM12 H6
                &lt;- eq_res_s Q1 EvM1 EvM1'
                &lt;- succ_height_ok H6 H7.

strictness_lem1_tapp2 : strictness_lem1 ([a] a) Fs _ Ft H FA L FsTp D2
                                         Ft4' (evs_tapp EvM1'T EvM1') H5
                &lt;- lem18 (tapp M1 T1) M1 FA L Q
                &lt;- frameterm_eq_framesNum Q eq_ref Ft H Ft1 H1
                &lt;- up_tapp Ft1 H1 Ft2 H2
                &lt;- eqf_fstp Q FsTp FsTp1
                &lt;- inverse_tapp D2 D1
                &lt;- typed_step FsTp1 D2 evfs_tapp FsTp' D2'
                &lt;- add_frame (ftapp T1) FA L FA' L'
                &lt;- strictness_lem1 ([a] a) ([a] cons (ftapp T1) (Fs a)) _ Ft2 H2 FA' L' FsTp' D2'
                                    Ft2' (EvM1 : M1 \s/ V1) H2'
                &lt;- tpres_s D1 EvM1 D1'
                &lt;- value_soundness_s EvM1 Val1
                &lt;- eq_val_all Val1 D1' Q1
                &lt;- eq_type Q1 D1' D1_
                &lt;- eq_typings D1_ (of_tlam (D1** : \{t:tp\} M1' t ? _))
                &lt;- succ_height_ok H2' H2_
                &lt;- frameterm_eq_framesNum eqf_ref Q1 Ft2' H2_ Ft2_ H2**
                &lt;- up_tlam Ft2_ H2** Ft3 H3
                &lt;- types_pres_tapp_s EvM1 D2 D3
                &lt;- eq_ctx Q1 ([a] tapp a T1) Q1'
                &lt;- eq_type Q1' D3 D4
                &lt;- redex_rev_type redex_tapp D4 D4'
                &lt;- lem18 M1 (M1' T1) FA L Q2
                &lt;- eqf_fstp Q2 FsTp1 FsTp1'
                &lt;- lem18 V1 (M1' T1) FA L Q3
                &lt;- frameterm_eq_framesNum Q3 eq_ref Ft3 H3 Ft4 H4
                &lt;- strictness_lem1 ([a] a) Fs _ Ft4 H4 FA L FsTp1' D4' Ft4' EvM1'T H4'
                &lt;- eq_res_s Q1 EvM1 EvM1'
                &lt;- succ_height_ok H4' H5.

strictness_lem1_lett2 : strictness_lem1 ([a] a) Fs _ Ft H
                        FA L FsTp D3 Ft4' (evs_lett EvM2 EvM1') H5
                &lt;- lem18 (lett M1 M2) M1 FA L Q
                &lt;- frameterm_eq_framesNum Q eq_ref Ft H Ft1 H1
                &lt;- up_lett Ft1 H1 Ft2 H2
                &lt;- eqf_fstp Q FsTp FsTp1
                &lt;- typed_step FsTp1 D3 evfs_lett FsTp' D3'
                &lt;- add_frame (flett M2) FA L FA' L'
                &lt;- strictness_lem1 ([a] a) ([a] cons (flett M2) (Fs a)) _ Ft2 H2 FA' L' FsTp' D3'
                                    Ft2' (EvM1 : M1 \s/ V1) H2'
                &lt;- eq_typings D3 (of_lett _ _ _ D1)
                &lt;- tpres_s D1 EvM1 D1'
                &lt;- value_soundness_s EvM1 Val1
                &lt;- eq_val_tensor Val1 D1' Q1
                &lt;- eq_type Q1 D1' D1_
                &lt;- eq_typings D1_ (of_tens (Dt2 : Mt2 ? _) (Dt1 : Mt1 ? _))
                &lt;- succ_height_ok H2' H2_
                &lt;- frameterm_eq_framesNum eqf_ref Q1 Ft2' H2_ Ft3 H3
                &lt;- up_tens Ft3 H3 Ft3' H3'
                &lt;- types_pres_lett_s EvM1 D3 D4
                &lt;- eq_ctx Q1 ([a] lett a M2) Q1'
                &lt;- eq_type Q1' D4 D4_
                &lt;- redex_rev_type redex_lett D4_ D4'
                &lt;- lem18 M1 (M2 Mt1 Mt2) FA L Q2
                &lt;- eqf_fstp Q2 FsTp1 FsTp1'
                &lt;- lem18 V1 (M2 Mt1 Mt2) FA L Q3
                &lt;- frameterm_eq_framesNum Q3 eq_ref Ft3' H3' Ft4 H4
                &lt;- strictness_lem1 ([a] a) Fs _ Ft4 H4 FA L FsTp1' D4' Ft4' EvM2 H4'
                &lt;- eq_res_s Q1 EvM1 EvM1'
                &lt;- succ_height_ok H4' H5.

strictness_lem1_letu2 : strictness_lem1 ([a] a) Fs _ Ft H 
                                        FA L FsTp D3 Ft4' (evs_letu EvM2 EvM1') H5
                &lt;- lem18 (letu M1 M2) M1 FA L Q
                &lt;- frameterm_eq_framesNum Q eq_ref Ft H Ft1 H1
                &lt;- up_letu Ft1 H1 Ft2 H2
                &lt;- eqf_fstp Q FsTp FsTp1
                &lt;- typed_step FsTp1 D3 evfs_letu FsTp' D3'
                &lt;- add_frame (fletu M2) FA L FA' L'
                &lt;- strictness_lem1 ([a] a) ([a] cons (fletu M2) (Fs a)) _ Ft2 H2 FA' L' FsTp' D3' Ft2'
                                   (EvM1: M1 \s/ V1) H2'
                &lt;- eq_typings D3 (of_letu _ D1)
                &lt;- tpres_s D1 EvM1 D1'
                &lt;- value_soundness_s EvM1 Val1
                &lt;- eq_val_unit Val1 D1' Q1
                &lt;- succ_height_ok H2' H2_
                &lt;- frameterm_eq_framesNum eqf_ref Q1 Ft2' H2_ Ft3 H3
                &lt;- up_unit Ft3 H3 Ft3' H3'
                &lt;- lem18 V1 M2 FA L Q2
                &lt;- lem18 M1 M2 FA L Q2'
                &lt;- frameterm_eq_framesNum Q2 eq_ref Ft3' H3' Ft4 H4
                &lt;- eqf_fstp Q2' FsTp1 FsTp1'
                &lt;- types_pres_letu_s EvM1 D3 D3_
                &lt;- eq_ctx Q1 ([a] letu a M2) Q3
                &lt;- eq_type Q3 D3_ D4
                &lt;- redex_rev_type redex_letu D4 D4'
                &lt;- strictness_lem1 ([a] a) Fs _ Ft4 H4 FA L FsTp1' D4' Ft4' EvM2 H4'
                &lt;- succ_height_ok H4' H5
                &lt;- eq_res_s Q1 EvM1 EvM1'.

strictness_lem1_letb2 : strictness_lem1 ([a] a) Fs _ Ft H 
                                        FA L FsTp D3 Ft4' (evs_letb EvM2 EvM1') H5
                &lt;- lem18 (letb M1 M2) M1 FA L Q
                &lt;- frameterm_eq_framesNum Q eq_ref Ft H Ft1 H1
                &lt;- up_letb Ft1 H1 Ft2 H2
                &lt;- eqf_fstp Q FsTp FsTp1
                &lt;- typed_step FsTp1 D3 evfs_letb FsTp' D3'
                &lt;- add_frame (fletb M2) FA L FA' L'
                &lt;- strictness_lem1 ([a] a) ([a] cons (fletb M2) (Fs a)) _ Ft2 H2 FA' L' FsTp' D3' Ft2'
                                   (EvM1 : M1 \s/ V1) H2'
                &lt;- eq_typings D3 (of_letb _ D1)
                &lt;- tpres_s D1 EvM1 D1'
                &lt;- value_soundness_s EvM1 Val1
                &lt;- eq_val_bang Val1 D1' Q1
                &lt;- eq_type Q1 D1' D1_
                &lt;- eq_thunk_type D1_ Q'
                &lt;- eqt_symm Q' Q_
                &lt;- eqt_ctx Q_ ([t] bang t) Q**
                &lt;- eq_type1 Q** D1_ D1**
                &lt;- eq_typings D1** (of_thunk (Dt1 : \{m:term\}\{d:m ? _\} (Mt1 m) ? _) : thunk Ty _ ? _)
                &lt;- succ_height_ok H2' H2_
                &lt;- frameterm_eq_framesNum eqf_ref Q1 Ft2' H2_ Ft3 H3
                &lt;- up_thunk Ft3 H3 Ft3' H3'
                &lt;- types_pres_letb_s EvM1 D3 D4
                &lt;- eq_ctx Q1 ([a] letb a M2) Q1'
                &lt;- eq_type Q1' D4 D4_
                &lt;- redex_rev_type redex_letb D4_ D4'
                &lt;- lem18 M1 (M2 (letb (thunk Ty Mt1) Mt1)) FA L Q2
                &lt;- eqf_fstp Q2 FsTp1 FsTp1'
                &lt;- lem18 V1 (M2 (letb (thunk Ty Mt1) Mt1)) FA L Q3
                &lt;- frameterm_eq_framesNum Q3 eq_ref Ft3' H3' Ft4 H4
                &lt;- strictness_lem1 ([a] a) Fs _ Ft4 H4 FA L FsTp1' D4' Ft4' EvM2 H4'
                &lt;- succ_height_ok H4' H5
                &lt;- eq_res_s Q1 EvM1 EvM1'.

strictness_lem1_app1 : strictness_lem1 ([a] app (N1 a) (N2 a)) Fs _ (frameterm_app Ft)
                                       (height_ok_app H) FA L FsTp (of_app DN2 DN1)
                                       (frameterm_app Ft') Evs (height_ok_app H')
         &lt;- strictness_lem1 N1 ([a] cons (fapp (N2 a)) (Fs a)) _ Ft H 
                            ([a] frameapply_cons (FA a) (frameapp_app : frameapp _ _ _))
                            L (ftp_cons FsTp [a][da] of_app DN2 da) DN1 Ft' Evs H'.

strictness_lem1_tapp1 : strictness_lem1 ([a] tapp (N1 a) T) Fs _ (frameterm_tapp Ft)
                                        (height_ok_tapp H) FA L FsTp (of_tapp _ DN1)
                                        (frameterm_tapp Ft') Evs (height_ok_tapp H')
         &lt;- strictness_lem1 N1 ([a] cons (ftapp T) (Fs a)) _ Ft H 
                               ([a] frameapply_cons (FA a) (frameapp_app : frameapp _ _ _))
                               L (ftp_cons FsTp [a][da] of_tapp _ da) DN1 Ft' Evs H'.

strictness_lem1_letu1 : strictness_lem1 ([a] letu (N1 a) (N2 a)) Fs _ (frameterm_letu Ft)
                                        (height_ok_letu H) FA L FsTp (of_letu DN2 DN1)
                                        (frameterm_letu Ft') Evs (height_ok_letu H')
         &lt;- strictness_lem1 N1 ([a] cons (fletu (N2 a)) (Fs a)) _ Ft H 
                           ([a] frameapply_cons (FA a) (frameapp_app : frameapp _ _ _))
                           L (ftp_cons FsTp [a][da] of_letu DN2 da) DN1 Ft' Evs H'.

strictness_lem1_letb1 : strictness_lem1 ([a] letb (N1 a) (N2 a)) Fs _ (frameterm_letb Ft)
                                        (height_ok_letb H) FA L FsTp (of_letb DN2 DN1)
                                        (frameterm_letb Ft') Evs (height_ok_letb H')
         &lt;- strictness_lem1 N1 ([a] cons (fletb (N2 a)) (Fs a)) _ Ft H 
                               ([a] frameapply_cons (FA a) (frameapp_app : frameapp _ _ _))
                               L (ftp_cons FsTp [a][da] of_letb DN2 da) DN1 Ft' Evs H'.

strictness_lem1_lett1 : strictness_lem1 ([a] lett (N1 a) (N2 a)) Fs _ (frameterm_lett Ft)
                                        (height_ok_lett H) FA L FsTp (of_lett L1 L2 DN2 DN1)
                                        (frameterm_lett Ft') Evs (height_ok_lett H')
         &lt;- strictness_lem1 N1 ([a] cons (flett (N2 a)) (Fs a)) _ Ft H 
                            ([a] frameapply_cons (FA a) (frameapp_app : frameapp _ _ _))
                            L (ftp_cons FsTp [a][da] of_lett L1 L2 DN2 da) DN1 Ft' Evs H'.

strictness_lem1_lam : strictness_lem1 ([a] lam T (M4 a)) ([a] cons (fapp (M5 a)) (Fs a))
                                      _ (frameterm_lam Ft) (height_ok_lam H)
                         ([a] frameapply_cons (FA a) (frameapp_app : frameapp (fapp (M5 a)) _ _))
                          L (ftp_cons FsTp FTp) D2 (frameterm_lam Ft') Evs (height_ok_lam H')
                &lt;- eq_typings ((FTp : \{m\} m ? func _ _ -&gt; app m _ ? T2) _ D2) D1
                &lt;- redex_rev_type redex_app D1 D'
                &lt;- frame_linear ([m] redex_app) D1 FA L FA1 L1
                &lt;- strictness_lem1 ([a] M4 a (M5 a)) Fs _ Ft H FA1 L1 FsTp D' Ft' Evs H'.

strictness_lem1_tens : strictness_lem1 ([a] tens (M3 a) (M4 a)) ([a] cons (flett (M5 a)) 
                           (Fs a)) _ (frameterm_tens Ft) (height_ok_tens H) 
                           ([a] frameapply_cons (FA a) (frameapp_app : frameapp (flett (M5 a)) _ _))
                            L (ftp_cons FsTp FTp) D2 (frameterm_tens Ft') Evs (height_ok_tens H')
                &lt;- eq_typings ((FTp : \{m\} m ? tensor _ _ -&gt; lett m _ ? T2) _ D2) Dt
                &lt;- redex_rev_type redex_lett Dt D'
                &lt;- frame_linear ([m] redex_lett) Dt FA L FA1 L'
                &lt;- strictness_lem1 ([a] M5 a (M3 a) (M4 a)) Fs _ Ft H FA1 L' FsTp D' Ft' Evs H'.

strictness_lem1_unit : strictness_lem1 ([a] unit) ([a] cons (fletu (M5 a)) (Fs a)) _
                           (frameterm_unit Ft) (height_ok_unit H) 
                           ([a] frameapply_cons (FA a) (frameapp_app : frameapp (fletu (M5 a)) _ _))
                            L (ftp_cons FsTp FTp) D2 (frameterm_unit Ft') Evs (height_ok_unit H')
                &lt;- eq_typings ((FTp : \{m\} m ? i -&gt; letu m _ ? T2) _ D2) Dt
                &lt;- redex_rev_type redex_letu Dt D'
                &lt;- frame_linear ([m] redex_letu) Dt FA L FA1 L'
                &lt;- strictness_lem1 ([a] M5 a) Fs _ Ft H FA1 L' FsTp D' Ft' Evs H'.

strictness_lem1_thunk : strictness_lem1 ([a] thunk T (M4 a)) ([a] cons (fletb (M5 a)) (Fs a))
                           _ (frameterm_thunk Ft) (height_ok_thunk H) 
                           ([a] frameapply_cons (FA a) (frameapp_app : frameapp (fletb (M5 a)) _ _))
                           L (ftp_cons FsTp FTp) D2 (frameterm_thunk Ft') Evs (height_ok_thunk H')
                &lt;- eq_typings ((FTp : \{m\} m ? bang _ -&gt; letb m _ ? T2) _ D2) Dt
                &lt;- redex_rev_type redex_letb Dt D'
                &lt;- frame_linear ([m] redex_letb) Dt FA L FA1 L'
                &lt;- strictness_lem1 ([a] M5 a (letb (thunk T (M4 a)) (M4 a))) Fs _ Ft H FA1 L'
                                    FsTp D' Ft' Evs H'.

strictness_lem1_tlam : strictness_lem1 ([a] tlam (M4 a)) ([a] cons (ftapp T) (Fs a))
                           _ (frameterm_tlam Ft) (height_ok_tlam H) 
                           ([a] frameapply_cons (FA a) (frameapp_app : frameapp (ftapp T) _ _))
                           L (ftp_cons FsTp FTp) D2 (frameterm_tlam Ft') Evs (height_ok_tlam H')
                &lt;- eq_typings ((FTp : \{m\} m ? all _ -&gt; tapp m _ ? T2) _ D2) D1
                &lt;- redex_rev_type redex_tapp D1 D'
                &lt;- frame_linear ([m] redex_tapp) D1 FA L FA1 L1
                &lt;- strictness_lem1 ([a] M4 a T) Fs _ Ft H FA1 L1 FsTp D' Ft' Evs H'.

strictness_lem1_unit2 : strictness_lem1 ([a] a) Fs _ Ft H FA L FsTp D2 Ft Evs H
                &lt;- selfevals val_unit Evs.

strictness_lem1_lam2 : strictness_lem1 ([a] a) Fs _ Ft H FA L FsTp D2 Ft Evs H
                &lt;- selfevals val_lam Evs.

strictness_lem1_tlam2 : strictness_lem1 ([a] a) Fs _ Ft H FA L FsTp D2 Ft Evs H
                &lt;- selfevals val_tlam Evs.

strictness_lem1_tens2 : strictness_lem1 ([a] a) Fs _ Ft H FA L FsTp D2 Ft Evs H
                &lt;- selfevals val_tens Evs.

strictness_lem1_thunk2 : strictness_lem1 ([a] a) Fs _ Ft H FA L FsTp D2 Ft Evs H
                &lt;- selfevals val_thunk Evs.

%worlds () (strictness_lem1 _ _ _ _ _ _ _ _ _ _ _ _).
% covers strictness_lem1 +N +Fs +Num +FtM +H +FA +L +FD +FsT -FtV -EVs -H'. 
% terminates D (strictness_lem1 _ _ D _ _ _ _ _ _ _ _ _).
%total D (strictness_lem1 _ _ D _ _ _ _ _ _ _ _ _).

strictness1 : (N M) ? bang T' -&gt; linear N -&gt; 
              (N M) \/ -&gt; M \s/ V' -&gt; (N V') \/ -&gt; type.
%mode strictness1 +D +L +Ev -S -Term.
strictness1_rule : strictness1 D1 L (terminate Ev) Evs (terminate Ev')
           &lt;- eval_frameterm Ev Ft
           &lt;- height_ok_exists Ft (H : height_ok _ Num)
           &lt;- strictness_lem1 N ([a:term] nil) Num Ft H ([a] frameapply_nil) L ftp_nil D1 Ft' Evs H'
           &lt;- frameterm_eval Ft' Ev'.
%worlds () (strictness1 _ _ _ _ _).
% covers strictness1 +D +L +Ev -S -Term.
%total \{\} (strictness1 _ _ _ _ _).

frameterm_eq_frames : eqf Fs Fs' -&gt; eq M M' -&gt; frameterm Fs M -&gt;
                                               frameterm Fs' M' -&gt; type.
%mode frameterm_eq_frames +Q +Q' +Ft -Ft'.
frameterm_eq_frames_rule : frameterm_eq_frames eqf_ref eq_ref Ft Ft.
%worlds () (frameterm_eq_frames _ _ _ _).
%total \{\} (frameterm_eq_frames _ _ _ _).

strictness2_lem1 :
      % Assumptions:
             \{N\} \{Fs\} frameterm (Fs V) (N V) -&gt; M \s/ V -&gt; 
      % Conclusion:
             frameterm (Fs M) (N M) -&gt; type.
             

%mode strictness2_lem1 +N +Fs +FtV +EVs -FtM.

strictness2_lem1_tens_val  : strictness2_lem1 ([a] tens _ _) ([a] nil) (frameterm_val _) _
                                              (frameterm_val val_tens).

strictness2_lem1_unit_val  : strictness2_lem1 ([a] unit) ([a] nil)  (frameterm_val _) _
                                              (frameterm_val val_unit).

strictness2_lem1_lam_val   : strictness2_lem1 ([a] lam T _) ([a] nil) (frameterm_val _) _
                                              (frameterm_val val_lam).

strictness2_lem1_tlam_val  : strictness2_lem1 ([a] tlam _) ([a] nil) (frameterm_val _) _
                                              (frameterm_val val_tlam).

strictness2_lem1_thunk_val : strictness2_lem1 ([a] thunk T _) ([a] nil) (frameterm_val _) _ 
                                              (frameterm_val val_thunk).

strictness2_lem1_unit2 : strictness2_lem1 ([a] a) Fs Ft evs_unit Ft.

strictness2_lem1_lam2 : strictness2_lem1 ([a] a) Fs Ft evs_lam Ft.

strictness2_lem1_tlam2 : strictness2_lem1 ([a] a) Fs Ft evs_tlam Ft.

strictness2_lem1_tens2 : strictness2_lem1 ([a] a) Fs Ft evs_tens Ft. 

strictness2_lem1_thunk2 : strictness2_lem1 ([a] a) Fs Ft evs_thunk Ft.

strictness2_lem1_app1 : strictness2_lem1 ([a] app (N1 a) (N2 a)) Fs (frameterm_app Ft) Evs 
                                         (frameterm_app Ft') 
         &lt;- strictness2_lem1 N1 ([a] cons (fapp (N2 a)) (Fs a)) Ft Evs Ft'.

strictness2_lem1_tapp1 : strictness2_lem1 ([a] tapp (N1 a) T) Fs (frameterm_tapp Ft) Evs 
                                          (frameterm_tapp Ft')
         &lt;- strictness2_lem1 N1 ([a] cons (ftapp T) (Fs a)) Ft Evs Ft'.

strictness2_lem1_letu1 : strictness2_lem1 ([a] letu (N1 a) (N2 a)) Fs (frameterm_letu Ft) Evs 
                                          (frameterm_letu Ft') 
         &lt;- strictness2_lem1 N1 ([a] cons (fletu (N2 a)) (Fs a)) Ft Evs Ft'.

strictness2_lem1_letb1 : strictness2_lem1 ([a] letb (N1 a) (N2 a)) Fs (frameterm_letb Ft) Evs
                                          (frameterm_letb Ft')
         &lt;- strictness2_lem1 N1 ([a] cons (fletb (N2 a)) (Fs a)) Ft Evs Ft'.

strictness2_lem1_lett1 : strictness2_lem1 ([a] lett (N1 a) (N2 a)) Fs (frameterm_lett Ft) Evs
                                          (frameterm_lett Ft')
         &lt;- strictness2_lem1 N1 ([a] cons (flett (N2 a)) (Fs a)) Ft Evs Ft'.

strictness2_lem1_lam : strictness2_lem1 ([a] lam T (M4 a)) ([a] cons (fapp (M5 a)) (Fs a))
                                        (frameterm_lam Ft) Evs (frameterm_lam Ft') 
                &lt;- strictness2_lem1 ([a] M4 a (M5 a)) Fs Ft Evs Ft'.

strictness2_lem1_tens : strictness2_lem1 ([a] tens (M3 a) (M4 a)) ([a] cons (flett (M5 a)) (Fs a))
                                         (frameterm_tens Ft) Evs (frameterm_tens Ft')
                &lt;- strictness2_lem1 ([a] M5 a (M3 a) (M4 a)) Fs Ft Evs Ft'.

strictness2_lem1_unit : strictness2_lem1 ([a] unit) ([a] cons (fletu (M5 a)) (Fs a))
                                         (frameterm_unit Ft) Evs (frameterm_unit Ft')
                &lt;- strictness2_lem1 ([a] M5 a) Fs Ft Evs Ft'.

strictness2_lem1_thunk : strictness2_lem1 ([a] thunk T (M4 a)) ([a] cons (fletb (M5 a)) (Fs a))
                                          (frameterm_thunk Ft) Evs (frameterm_thunk Ft')
                &lt;- strictness2_lem1 ([a] M5 a (letb (thunk T (M4 a)) (M4 a))) Fs Ft Evs Ft'.

strictness2_lem1_tlam : strictness2_lem1 ([a] tlam (M4 a)) ([a] cons (ftapp T) (Fs a))
                                         (frameterm_tlam Ft) Evs (frameterm_tlam Ft')
                &lt;- strictness2_lem1 ([a] M4 a T) Fs Ft Evs Ft'.

strictness2_lem1_app2 : strictness2_lem1 ([a] a) Fs Ft1 (evs_app EvM12 EvM2 EvM1) (frameterm_app Ft7)
                &lt;- strictness2_lem1 ([a] a) Fs Ft1 EvM12 Ft2 
                &lt;- strictness2_lem1 ([a] M1' a) ([a] (Fs (M1' a))) Ft2 EvM2 Ft4 
                &lt;- lem42 ([a] Fs a) ([a] a) (redex_app : redex (app (lam T M1') M2) _) Ft4 Ft5
                &lt;- inverse_ft_app Ft5 Ft6
                &lt;- strictness2_lem1 ([a] a) ([a] cons (fapp M2) (Fs (app a M2))) Ft6 EvM1 Ft7.

strictness2_lem1_tapp2 : strictness2_lem1 ([a] a) Fs Ft1 (evs_tapp EvM12 EvM1) (frameterm_tapp Ft5)
                &lt;- strictness2_lem1 ([a] a) Fs Ft1 EvM12 Ft2 
                &lt;- lem42 ([a] Fs a) ([a] a) (redex_tapp : redex (tapp (tlam M1') T) _) Ft2 Ft3
                &lt;- inverse_ft_tapp Ft3 Ft4
                &lt;- strictness2_lem1 ([a] a) ([a] cons (ftapp T) (Fs (tapp a T))) Ft4 EvM1 Ft5.

strictness2_lem1_letu2 : strictness2_lem1 ([a] a) Fs Ft1 (evs_letu EvM2 EvM1) (frameterm_letu Ft5)
                &lt;- strictness2_lem1 ([a] a) Fs Ft1 EvM2 Ft2 
                &lt;- lem42 ([a] Fs a) ([a] a) (redex_letu : redex (letu unit M2) _) Ft2 Ft3
                &lt;- inverse_ft_letu Ft3 Ft4
                &lt;- strictness2_lem1 ([a] a) ([a] cons (fletu M2) (Fs (letu a M2))) Ft4 EvM1 Ft5.

strictness2_lem1_lett2 : strictness2_lem1 ([a] a) Fs Ft1 (evs_lett EvM2 EvM1) (frameterm_lett Ft5)
                &lt;- strictness2_lem1 ([a] a) Fs Ft1 EvM2 Ft2 
                &lt;- lem42 ([a] Fs a) ([a] a) (redex_lett : redex (lett (tens M1 M2) M3) _) Ft2 Ft3
                &lt;- inverse_ft_lett Ft3 Ft4
                &lt;- strictness2_lem1 ([a] a) ([a] cons (flett M3) (Fs (lett a M3))) Ft4 EvM1 Ft5.

strictness2_lem1_letb2 : strictness2_lem1 ([a] a) Fs Ft1 (evs_letb EvM2 EvM1) (frameterm_letb Ft5)
                &lt;- strictness2_lem1 ([a] a) Fs Ft1 EvM2 Ft2 
                &lt;- lem42 ([a] Fs a) ([a] a) (redex_letb : redex (letb (thunk T M1) M2) _) Ft2 Ft3
                &lt;- inverse_ft_letb Ft3 Ft4
                &lt;- strictness2_lem1 ([a] a) ([a] cons (fletb M2) (Fs (letb a M2))) Ft4 EvM1 Ft5.

%worlds () (strictness2_lem1 _ _ _ _ _).
% covers strictness2_lem1 +N +Fs +FtV +EVs -FtM. 
% terminates \{E D\} (strictness2_lem1 _ _ D E _).
%total \{E D\} (strictness2_lem1 _ _ D E _).

strictness21 : \{N\} (N V) \/ -&gt; M \s/ V -&gt; (N M) \/ -&gt; type.
%mode strictness21 +N +Term +Ev -Term'.
strictness21_rule : strictness21 N (terminate Ev) Evs (terminate Ev')
           &lt;- eval_frameterm Ev Ft
           &lt;- strictness2_lem1 N ([a:term] nil) Ft Evs Ft'
           &lt;- frameterm_eval Ft' Ev'.
%worlds () (strictness21 _ _ _ _).
% covers strictness21 +N +Ev -S -Term.
%total \{\} (strictness21 _ _ _ _).
 

&lt;/twelf&gt;

&lt;twelflink&gt;See all code for this case study&lt;/twelflink&gt;. &lt;twelflink check="true"&gt;See Twelf's output&lt;/twelflink&gt;.

[Category:Twelf code](/wiki/category-twelf-code/)
\{\{case study\}\}
!}%
