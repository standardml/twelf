%%! title: "Catch-all case"

%{!
When defining relations in non-empty contexts, it is often necessary to put a case of the relation in the LF context. In some circumstances, it is possible to avoid doing so by writing a **catch-all case** instead. 
This technique works when you can cover the space of the relation that would be covered by a context case without mentioning any variables from the context explicitly.  

Using a catch-all case leads to simpler Twelf code because it saves you from having to repeat the context case at a variety of context extension points.  

As a motivating example, we use the theorem about the size of a STLC term from \{\{proving|title=Proving metatheorems in non-empty contexts\}\}.  For review, here are the relevant judgements:

&lt;twelf&gt;
tp    : type.
unit  : tp.
arrow : tp -&gt; tp -&gt; tp.

tm    : type.
empty : tm.
lam   : tp -&gt; (tm -&gt; tm) -&gt; tm.
app   : tm -&gt; tm -&gt; tm.

nat : type.
z   : nat.
s   : nat -&gt; nat.

plus   : nat -&gt; nat -&gt; nat -&gt; type.
%mode plus +X1 +X2 -X3.

plus-z : plus z N2 N2.
plus-s : plus (s N1) N2 (s N3)
	  &lt;- plus N1 N2 N3.

%worlds () (plus _ _ _).
%total N (plus N _ _).
&lt;/twelf&gt;
&lt;twelf hidden="true"&gt;
plus-exists : \{N1\} \{N2\} plus N1 N2 N3 -&gt; type.
%mode plus-exists +X1 +X2 -X3.

- : plus-exists z _ plus-z.
- : plus-exists (s N1) N2 (plus-s D)
     &lt;- plus-exists N1 N2 D.

%worlds () (plus-exists _ _ _).
%total N1 (plus-exists N1 _ _).

plus-z-rh : \{n:nat\} plus n z n -&gt; type.
%mode plus-z-rh +N -D.

- : plus-z-rh z plus-z.
- : plus-z-rh (s N) (plus-s D)
     &lt;- plus-z-rh N (D : plus N z N).

%worlds () (plus-z-rh _ _).
%total N (plus-z-rh N _).

plus-s-rh : plus N1 N2 N3 -&gt; plus N1 (s N2) (s N3) -&gt; type.
%mode plus-s-rh +D1 -D2.

- : plus-s-rh plus-z plus-z.
- : plus-s-rh (plus-s (D : plus N1' N2 N3')) (plus-s D')
     &lt;- plus-s-rh D (D' : plus N1' (s N2) (s N3')).

%worlds () (plus-s-rh _ _).
%total D (plus-s-rh D _).

plus-commute : plus N1 N2 N3 -&gt; plus N2 N1 N3 -&gt; type.
%mode plus-commute +D1 -D2.

-       : plus-commute (plus-z : plus z N N) D
           &lt;- plus-z-rh N D.
-       : plus-commute (plus-s D : plus (s N1) N2 (s N3)) D_
           &lt;- plus-commute D (D' : plus N2 N1 N3)
           &lt;- plus-s-rh D' (D_ : plus N2 (s N1) (s N3)).

%worlds () (plus-commute _ _).
%total D (plus-commute D _).

id/nat      : nat -&gt; nat -&gt; type.
id/nat-refl : id/nat N N.

id/nat-s-cong : id/nat N1 N2
                 -&gt; id/nat (s N1) (s N2)
                 -&gt; type.
%mode id/nat-s-cong +X1 -X2.

- : id/nat-s-cong id/nat-refl  id/nat-refl.

%worlds () (id/nat-s-cong _ _).
%total \{\} (id/nat-s-cong _ _).

plus-unique : plus N1 N2 N3
	      -&gt; plus N1 N2 N3'
	      -&gt; id/nat N3 N3'
	      -&gt; type.
%mode plus-unique +X1 +X2 -X3.

- : plus-unique D D id/nat-refl.
- : plus-unique (plus-s D) (plus-s D') DidS
     &lt;- plus-unique D D' Did
     &lt;- id/nat-s-cong Did DidS.

%worlds () (plus-unique _ _ _).
%total D (plus-unique D _ _).

plus-respects-id : plus N1 N2 N3
                   -&gt; id/nat N1 N1'
                   -&gt; id/nat N2 N2'
                   -&gt; id/nat N3 N3'
                   -&gt; plus N1' N2' N3'
                   -&gt; type.
%mode plus-respects-id +X1 +X2 +X3 +X4 -X5.

- : plus-respects-id D id/nat-refl id/nat-refl id/nat-refl  D.

%worlds () (plus-respects-id _ _ _ _ _).
%total \{\} (plus-respects-id _ _ _ _ _).

id/nat-sym : id/nat N1 N2
              -&gt; id/nat N2 N1
              -&gt; type.
%mode id/nat-sym +X1 -X2.

- : id/nat-sym id/nat-refl  id/nat-refl.

%worlds () (id/nat-sym _ _).
%total \{\} (id/nat-sym _ _).

plus-assoc : plus A B AB
             -&gt; plus B C BC
             -&gt; plus AB C ABC
             -&gt; plus A BC ABC
             -&gt; type.
%mode plus-assoc +X1 +X2 +X3 -X4.

- : plus-assoc 
     plus-z
     DplusB-C 
     DplusB-C' 
     Dplus
     &lt;- plus-unique DplusB-C DplusB-C' Did
     &lt;- plus-respects-id plus-z id/nat-refl id/nat-refl Did Dplus.

- : plus-assoc 
     (plus-s DplusA'-B)
     DplusB-C
     (plus-s DplusA'B-C) 
     (plus-s DplusA'-BC)
     &lt;- plus-assoc DplusA'-B DplusB-C DplusA'B-C DplusA'-BC.

%worlds () (plus-assoc _ _ _ _).
%total D (plus-assoc D _ _ _).

plus-assoc2 : plus A B AB
	       -&gt; plus B C BC
	       -&gt; plus AB C ABC
	       -&gt; plus A BC ABC
	       -&gt; type.
%mode plus-assoc2 +X1 +X2 -X3 +X4.

- : plus-assoc2 D1 D2 D3' D4
     &lt;- plus-exists _ _ D3
     &lt;- plus-assoc D1 D2 D3 D4'
     &lt;- plus-unique D4 D4' Did
     &lt;- id/nat-sym Did Did'
     &lt;- plus-respects-id D3 id/nat-refl id/nat-refl Did' D3'.

%worlds () (plus-assoc2 _ _ _ _).
%total \{\} (plus-assoc2 _ _ _ _).

lemma : plus N1 N2 Nsum	      
	 -&gt; plus Ndiff1 N1 N1'
	 -&gt; plus Ndiff2 N2 N2'
	 -&gt; plus N1' N2' Nsum'
	 -&gt; plus Ndiff Nsum  Nsum'
	 -&gt; type.
%mode lemma +X1 +X2 +X3 +X4 -X5.

- : lemma 
     (D    : plus N1 N2 Nsum)
     (D1pre   : plus Ndiff1 N1 N1')
     (D2pre   : plus Ndiff2 N2 N2')
     (D'   : plus N1' N2' Nsum')
     Dres'
     %% there's probably a way to do without these two commutes
     %% and the one at the end;
     %% proof was originally written with the other argument order
     &lt;- plus-commute D1pre D1
     &lt;- plus-commute D2pre D2
     &lt;- plus-exists Ndiff1 N2' (Ddiff1+2' : plus Ndiff1 N2' Ndiff1+2')
     &lt;- plus-assoc D1 Ddiff1+2' D' (Dassoc : plus N1 Ndiff1+2' Nsum')
     &lt;- plus-commute D2 (D2' : plus Ndiff2 N2 N2')
     &lt;- plus-exists Ndiff1 Ndiff2 (Ddiff1+2 : plus Ndiff1 Ndiff2 Ndiff1+2)
     &lt;- plus-assoc2 Ddiff1+2 D2' 
	(Dassoc' : plus Ndiff1+2 N2 Ndiff1+2')
	Ddiff1+2'
     &lt;- plus-commute Dassoc' 
	(Dassoc_ : plus N2 Ndiff1+2 Ndiff1+2')
     &lt;- plus-assoc2 D Dassoc_ Dres Dassoc
     &lt;- plus-commute Dres Dres'.

%worlds () (lemma _ _ _ _ _).
%total \{\}  (lemma _ _ _ _ _).
&lt;/twelf&gt;
&lt;twelf check="true"&gt;
size       : tm -&gt; nat -&gt; type.
%mode size +E -N.

size-empty : size empty (s z). 
size-lam   : size (lam _ E) (s N)
		&lt;- (\{x\} \{dx : size x (s z)\}
		      size (E x) N).
size-app   : size (app E1 E2) (s N)
		&lt;- size E1 N1
		&lt;- size E2 N2 
		&lt;- plus N1 N2 N.

%block size-block : block \{x : tm\} \{dx : size x (s z)\}.

%worlds (size-block) (size _ _).
%total E (size E _).
&lt;/twelf&gt;

#
# Original proof
&lt;twelf hidden="true"&gt;
size-at-least-one : size E N
		      -&gt; plus (s z) N' N
		      -&gt; type.
%mode size-at-least-one +X1 -X2.

- : size-at-least-one _ (plus-s plus-z).

%worlds (size-block) (size-at-least-one _ _).
%total \{\} (size-at-least-one _ _).
&lt;/twelf&gt;

In \{\{proving|title=Proving metatheorems in non-empty contexts\}\}, we proved the following theorem:

&lt;twelf&gt;
subst-size : \{E' : tm\}
	       (\{x : tm\} size x (s z) -&gt; size (E x) N)
	       -&gt; size (E E') N'
	       -&gt; plus Ndiff N N'
	       -&gt; type.
%mode subst-size +E' +D1 +D2 -DL.

%block sdblock : block \{y : tm\} 
		       \{dy : size y (s z)\}
		       \{_ : \{E' : tm\} subst-size E' ([x] [dx] dy) dy plus-z\}.

%worlds (sdblock) (subst-size _ _ _ _).
&lt;/twelf&gt;

The ``%block`` declaration includes a case of the theorem for the variable ``dy`` declared in the context.  

#
# Alternate proof using a catch-all case

In this instance, it is possible to avoid putting the theorem case in the context.  How?  We instead write a catch-all case that covers the context variable case **without mentioning the context variable explicitly**:

&lt;twelf check="true"&gt;
subst-size-ca : \{E' : tm\}
		  (\{x : tm\} size x (s z) -&gt; size (E x) N)
		  -&gt; size (E E') N'
		  -&gt; plus Ndiff N N'
		  -&gt; type.
%mode subst-size-ca +E' +D1 +D2 -DL.

- : subst-size-ca E'
     ([x] [dx] D)
     D
     plus-z.
&lt;/twelf&gt;

This case covers any first-argument derivation ``D`` that does not mention the bound variables ``x`` and ``dx``, as long as the second argument is also that derivation ``D``.  Note that the context case in the previous proof has this form.  To complete the proof for these inputs, we simply use ``plus-z : plus z N N`` to derive the result. This technique works because we do not actually need to use any reasoning specific to the variable from the context.

The remaining cases are the same as in the previous proof, except that 
* the catch-all case happens to cover the case for ``size-empty`` as well, so we can elide it.
* the case for ``size-lam`` no longer adds the theorem case to the context.

&lt;twelf check="true"&gt;
- : subst-size-ca E'
     ([x] [dx] dx)
     D
     Dplus'
     &lt;- size-at-least-one D Dplus
     &lt;- plus-commute Dplus Dplus'.
     
- : subst-size-ca E'
     ([x] [dx] 
	(size-lam ([y] [dy] D x dx y dy)
	   %% tell reconstruction that T doesn't depend on x
	   : size (lam T _) _))
     (size-lam D')
     Dplus'
     &lt;- (\{y : tm\}
	   \{dy : size y (s z)\}
	   subst-size-ca E' ([x] [dx] D x dx y dy) (D' y dy) Dplus)
     &lt;- plus-s-rh Dplus Dplus'.

- : subst-size-ca E'
     ([x] [dx] 
	size-app 
	(Dplus : plus N1 N2 Nsum)
	((D2 x dx) : size (E2 x) N2)
	((D1 x dx) : size (E1 x) N1)
	)
     (size-app 
	(Dplus' : plus N1' N2' Nsum')
	(D2' : size (E2 E') N2')
	(D1' : size (E1 E') N1'))
     DplusRes'
     &lt;- subst-size-ca E' D1 
	(D1' : size (E1 E') N1')
	(Dplus1 : plus Ndiff1 N1 N1')
     &lt;- subst-size-ca E' D2 
	(D2' : size (E2 E') N2')
	(Dplus2 : plus Ndiff2 N2 N2')
     &lt;- lemma Dplus Dplus1 Dplus2 Dplus' DplusRes
     &lt;- plus-s-rh DplusRes DplusRes'.
%worlds (size-block) (subst-size-ca _ _ _ _).
%total D (subst-size-ca _ D _ _).
&lt;/twelf&gt;

\{\{tutorial\}\}
!}%
