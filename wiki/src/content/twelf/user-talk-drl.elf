%%! title: "User talk:Drl"

%{! Hello! I actually like the monospaced presentation better:

&lt;math&gt;\texttt\{even\}(N) \over \texttt\{even\}(s \, (s \, N))&lt;/math&gt;

You've got admin rights, btw. — [Rob](/wiki/user-rsimmons/) (and his [talk](/wiki/user-talk-rsimmons/)) 16:02, 23 October 2006 (EDT)


## Sidebar

You might be interested in editing the [sidebar](/wiki/mediawiki-sidebar/). — [Rob](/wiki/user-rsimmons/) (and his [talk](/wiki/user-talk-rsimmons/)) 16:51, 23 October 2006 (EDT)

## Oh yeah

You did write one of those papers-about-twelf things, now didn't you? :-) — [Rob](/wiki/user-rsimmons/) (and his [talk](/wiki/user-talk-rsimmons/)) 21:50, 20 March 2007 (EDT)

## Aite

I'm showering, driving to school, and emailing! — [Rob](/wiki/user-rsimmons/) (and his [talk](/wiki/user-talk-rsimmons/)) 09:18, 21 March 2007 (EDT)

## Some small feature requests (didn't want to lose track of these completely)

* %reduces under a binder (comes up, e.g. in [strengthening](/wiki/strengthening/)).  When you know (forall x. A x &lt; B), you could at least conclude A &lt; B when x doesn't occur, which as I recall is enough for this example.
* new emacs mode with karl's macros
* for world violations, move some of the info that gets printed on higher chatter to the default, so it's easier to debug

## Example (which Adam did much &lt;strike&gt;better&lt;/strike&gt; slower than me) !}%
    
tp : type.
unit : tp.
arrow : tp -> tp -> tp.

exp : type.
lam : (exp -> exp) -> exp.
app : exp -> exp -> exp.

of : exp -> tp -> type.
of/app : of (app E1 E2) T
        <- of E1 (arrow T2 T)
        <- of E2 T2.
of/lam : of (lam E) (arrow T2 T)
       <- {x : exp} of x T2 -> of (E x) T.

false : type.

%block ofb : some {T : tp} block {x : exp} {dx : of x T}.

id : tp -> tp -> type.
refl : id T T.

lemma : ({x} {dx : of x T} of x T')
      -> ({x} of x T -> of x (arrow T' T0)) 
      -> false
      -> type.
%mode lemma +X1 +X2 -X3.

%worlds (ofb) (lemma _ _ _).
%total {} (lemma _ _ _).

thm : of (lam [x] (app x x)) T -> false -> type.
%mode thm +X1 -X2.

- : thm (of/lam [x] [dx] (of/app (D x dx) (D' x dx))) XXX
  <- lemma D D' XXX. 

%worlds (ofb) (thm X Y).
%total {} (thm X Y).

%{! ### Any var, not just the last one !}%
    
tp : type.                                                                                                                                                                        ar : tp -> tp -> tp. %infix right 10 ar.                                                                                                                                          
b : tp.                                                                                                                                                                           
                                                                                                                                                                                  
exp : type.                                                                                                                                                                       
app : exp -> exp -> exp.                                                
lam : (exp -> exp) -> exp.                                                                                                                                                        
                                                                                                                                                                                  
of : exp -> tp -> type.                                                                                                                                                           
of_app : of E1 (T1 ar T2) -> of E2 T1 -> of (app E1 E2) T2.                                                                                                                       
of_lam : ({x}of x T1 -> of (E x) T2) -> of (lam E) (T1 ar T2).                                                                                                                    
                                                                                                                                                                                  
%block ofblock : some {T:tp} block {x:exp}{u: of x T}.                                                                                                                            
%worlds (ofblock) (of _ _).                                                                                                                                                       
                                                                                                                                                                                  
false : type.                                                                                                                                                                     
                                                                                                                                                                                  
isvar : exp -> type.                                                                                                                                                              
                                                                                                                                                                                  
                                                                                                                                                                                  
                                                                                                                                                                                  
%block varBlock : some {T:tp} block {x:exp}{u: of x T}{v:isvar x}.                                                                                                                
                                                                                                                                                                                  
contra : isvar X -> of X T1 -> of X (T1 ar T2) -> false -> type.                                                                                                                  
%mode contra +V +D1 +D2 -E.                                                                                                                                                       
%worlds (varBlock) (contra _ _ _ _).                                                                                                                                              
%total {E1 D1 D2} (contra E1 D1 D2 _).                                                                                                                                            
                                                                                                                                                                                  
boo : isvar X -> of (app X X) T -> false -> type.                                                                                                                                 
%mode boo +X +D -E.                                                                                                                                                               
boo_lam : boo X (of_app D1 D2) B                                                                                                                                                  
           <- contra X D2 D1 B.                                                                                                                                                                                                                                                                                                                                   
                                                                                                                                                                                  
%worlds (varBlock) (boo _ _ _).                                                                                                                                                   
%total {} (boo _ _ _).

%{! ### Delphin Version by Adam

&lt;code&gt;
sig &lt;tp : type&gt; %name A t                                                                                                                                                         
    &lt;ar : tp -&gt; tp -&gt; tp&gt; %infix right 10                                                                                                                                         
    &lt;b : tp&gt; ;                                                                                                                                                                    
                                                                                                                                                                                  
sig &lt;exp : type&gt;                                                                                                                                                                  
    &lt;app : exp -&gt; exp -&gt; exp&gt;                                                                                                                                                     
    &lt;lam : (exp -&gt; exp) -&gt; exp&gt;;                                                                                                                                                  
                                                                                                                                                                                  
sig &lt;of : exp -&gt; tp -&gt; type&gt;                                                                                                                                                      
    &lt;of_app : of E1 (T1 ar T2) -&gt; of E2 T1 -&gt; of (app E1 E2) T2&gt;                                                                                                                  
    &lt;of_lam : (\{x\}of x T1 -&gt; of (E x) T2) -&gt; of (lam E) (T1 ar T2)&gt;;                                                                                                              
                                                                                                                                                                                  
sig &lt;false : type&gt;;                                                                                                                                                               
                                                                                                                                                                                  
sig &lt;eq : tp -&gt; tp -&gt; type&gt; -&gt; of X (T1 ar T2) -&gt; false -&gt; type.                                                                                                                  
    &lt;eqid : eq T1 T1&gt;;                                                                                                                                                            
                                                                                                                                                                                  
params = &lt;exp&gt;, &lt;of (E#) T&gt;;                                                                                                                                                      
                                                                                                                                                                                  
                                                                                                                                                                                  
type contextProp = &lt;x:exp#&gt; -&gt; &lt;(of x T1)&gt; -&gt; &lt;(of x T2)&gt; -&gt; &lt;eq T1 T2&gt;;                                                                                                          
                                                                                                                                                                                                                                                                                                                                 

fun contraEq : &lt;eq (T1 ar T2) T1&gt; -&gt; &lt;false&gt; = fn .;                                                                                                                              
                                                                                                                                                                                  
fun impossible1 : contextProp -&gt; &lt;of (lam [x] app x x) T&gt; -&gt; &lt;false&gt;                                                                                                              
   = fn C &lt;of_lam ([x][d] of_app (D1 x d) (D2 x d))&gt; =&gt;                                                                                                                           
           (case \{&lt;x&gt;\}\{&lt;d:of x T1&gt;\} contraEq ((C with &lt;x&gt; &lt;d&gt; &lt;d&gt; =&gt; &lt;eqid&gt;) &lt;x&gt; &lt;D1 x d&gt; &lt;D2 x d&gt;)                                                                               
             of \{&lt;x&gt;\}\{&lt;d&gt;\}&lt;bot&gt; =&gt; &lt;bot&gt;);                                                                                                                                        
                                                                                            d                                                                                     
                                                                                                                                                                                  
fun impossibleGeneral : contextProp -&gt; &lt;x:exp#&gt; -&gt; &lt;of (app x x) T&gt; -&gt; &lt;false&gt;                                                                                                    
   = fn C &lt;x&gt; &lt;of_app D1 D2&gt; =&gt; contraEq (C &lt;x&gt; &lt;D1&gt; &lt;D2&gt;); 
&lt;/code&gt; !}%

%{!
-----
This page was copied from the MediaWiki version of the Twelf Wiki.
If anything looks wrong, you can refer to the
[wayback machine's version here](https://web.archive.org/web/20240303030303/http://twelf.org/wiki/User_talk:Drl).
!}%
