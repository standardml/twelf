%%! title: "POPL Tutorial/cps-ctp"

%{!
#
# CPS conversion with target types


&lt;twelf&gt;
%% Source types

tp : type.
o : tp.
# &gt; : tp -&gt; tp -&gt; tp.           %infix right 3 =&gt;.

%% Destination types
ctp : type.
co : ctp.
cnot : ctp -&gt; ctp.
cand : ctp -&gt; ctp -&gt; ctp.      %infix right 3 cand.

%% Source expressions and values annotated by the translation of their types.
e : ctp -&gt; type.
v : ctp -&gt; type.
app : e (cnot (A cand (cnot B))) -&gt; e A -&gt; e B.
lam : (v A -&gt; e B) -&gt; v (cnot (A cand (cnot B))).
inj : v A -&gt; e A.
%block sourceb : some \{A : ctp\} block \{x : v A\}.
%worlds (sourceb) (e _) (v _).

%% Destination expression and values annotated by their types.
ce : type.
cv : ctp -&gt; type.
% This is the only kind of conjunction we need but it seems pretty odd.
capp : cv A -&gt; cv (cnot B) -&gt; (cv (cnot (cnot (A cand (cnot B))))).
clam : (cv A -&gt; cv (cnot B) -&gt; ce) -&gt; cv (cnot (A cand (cnot B))).
cnoti : (cv A -&gt; ce) -&gt; cv (cnot A).
throw : cv A -&gt; cv (cnot A) -&gt; ce.
%block targetb : some \{A : ctp\} block \{x : cv A\}.
%worlds (targetb) (ce) (cv _).

cps : v A -&gt; cv A -&gt; type.
%mode cps +X1 -X2.

cpse : e A -&gt; (cv (cnot A) -&gt; ce) -&gt; type.
%mode cpse +X1 -X2.

cps/lam : cps (lam (E:v A -&gt; e B)) (clam (E':cv A -&gt; cv (cnot B) -&gt; ce))
              &lt;- (\{x:v A\}\{x':cv A\} cps x x' -&gt; cpse (E x) (E' x')).
cpse/app : cpse (app (E1:e (cnot (B cand (cnot A)))) (E2:e B))
                ([c:cv (cnot A)] E2' (cnoti ([arg:cv B]
                                               E1' (capp arg c))))
                &lt;- cpse E1 (E1':(cv (cnot (cnot (B cand (cnot A))))) -&gt; ce)
                &lt;- cpse E2 (E2':(cv (cnot B)) -&gt; ce).
cpse/inj : cpse (inj (V:v A)) ([c:cv (cnot A)] throw V' c)
                &lt;- cps V (V':cv A).

%block cpsb : some \{A : ctp\} block \{x : v A\} \{x' : cv A\} \{d : cps x x'\}.
%worlds (cpsb) (cps _ _) (cpse _ _).
%total (E V) (cps E _) (cpse V _).
&lt;/twelf&gt;
!}%
