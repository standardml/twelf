%%! title: "Canonical form"

%{! : _This page describes the canonical forms of the LF type theory.  You might also be looking for the [canonical forms lemma](/wiki/canonical-forms-lemma/) used to prove the [progress](/wiki/canonical-forms-lemma/) theorem about a programming language.

**Canonical forms** are terms in a type theory that are both [β-normal](/wiki/beta-equivalence/) and [η-long](/wiki/eta-equivalence/).

The [LF](/wiki/lf/) type theory is defined so that all well-typed terms are **canonical forms**.  This is useful because the LF methodology for representing object languages consists of creating an isomorphic representation of the object language as the canonical forms of particular LF types.  Defining the type theory with only canonical forms  uses an algorithm called [hereditary substitution](/wiki/hereditary-substitution/).   

## Syntax of LF

<DisplayMath formula=" K ::= \texttt{type} \, | \, \Pi x:A. K  "/>

<DisplayMath formula=" A ::= b \, | \, A \, M \, | \, \Pi x:A_1. A_2  "/>

<DisplayMath formula=" R ::= c \, | \, x \, | \, R \, M  "/>

<DisplayMath formula=" M ::= R \, | \, \lambda x. M "/>

In Twelf's concrete syntax, the type <Math formula="\texttt{}\Pi x:A_1.A_2"/> is written ``\{x:A1\} A2``, the kind <Math formula="\texttt{}\Pi x:A.K"/> is written ``\{x:A\} K``, and the term <Math formula="\texttt{}\lambda x.M"/> is written ``[x] M``.  The type families include both dependent function types and applications <Math formula="A \, M"/> of type families to terms.  The kind level classifies type families. Type families of kind <Math formula="\texttt{type}"/> classify terms. Type families that are not yet fully instantiated have kinds <Math formula=" {x:A} K"/>.  In both types and kinds, we use ``->`` as an abbreviation when the argument is not free in the result.  

## Motivation for canonical forms

The above syntax describes what we call _[canonical form](/wiki/canonical-form/)s_.  Note what is _not_ a canonical form: there is no syntactic way to apply a lambda-abstraction <Math formula="\texttt{}\lambda x.M"/> to an argument.  Based on your past experience with programming languages, it may seem strange to define LF so that only canonical forms exist—we are not allowed to write down any programs that have any computation left to do.  However, this restriction makes sense if you think about our methodology for representing object languages in LF.  For example, we represent [natural numbers](/wiki/natural-numbers/) with the following LF signature: !}%
    
nat : type.
z   : nat.
s   : nat -> nat.

%{! For this representation to be [adequate](/wiki/adequacy/), the only LF terms of type ``nat`` must be ``z``, ``s z``, ``s (s z)``, and so on.  It is easy to see that non-canonical LF terms interfere with this encoding.  For example, the LF term <Math formula="(\lambda x. \texttt{s} \, x) \, \texttt{z}"/> would have type ``nat``, but it is not the representation of any informal natural number. 

## Canonical LF

If you have encountered [beta-reduction](/wiki/beta-equivalence/) and [eta-expansion](/wiki/eta-equivalence/) before in your study of programming languages, it may help your intuition to know that the canonical forms of LF coincide with the beta-normal, eta-long terms of the lambda calculus.  What we were saying above is that the syntax of canonical forms forces them to be beta-normal,  and that the typing rules for canonical forms ensure that they are eta-long.  In logic, canonical forms correspond to normal and neutral natural deduction proofs and cut-free sequent calculus proofs.

We do not present the typing rules for canonical forms here (see, e.g., _Mechanizing Metatheory_&lt;ref&gt;\{\{bibtex:hl07mechanizing\}\}&lt;/ref&gt;).  However, we note two details:

Terms <Math formula="\texttt{}R"/> are only canonical at base type <Math formula="\texttt{}a"/>, not at function type.  For example, the constant ``s`` is _not_ a canonical form of type ``nat -> nat``.  However, the term <Math formula="\lambda x.\texttt{s} x"/>, which is equivalent, is a canonical form.  

In a dependently typed language, the application typing rules must substitute the argument into the body of the dependent function type:

<DisplayMath formula=" {R : \Pi x : A. B \;\;\;\; M : A \over R \; M : [M/x]B} "/>

In LF, this substitution is in fact a [hereditary substitution](/wiki/hereditary-substitution/), ensuring that the terms embedded in the result of the substitution are in canonical form.  The typing rule for family applications <Math formula="\mathsf{}A \; M"/> has a similar substitution into the result kind.

## See also
* See the [introductions to Twelf](/wiki/introductions-to-twelf/) to learn how object languages are represented as the canonical forms of LF.

## References
&lt;references/&gt;

\{\{stub\}\} !}%

%{!
-----
This page was copied from the MediaWiki version of the Twelf Wiki.
If anything looks wrong, you can refer to the
[wayback machine's version here](https://web.archive.org/web/20240303030303/http://twelf.org/wiki/Canonical_form).
!}%
