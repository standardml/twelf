%%! title: "Alpha-equivalence"

%{! Alpha-equivalence is a notion of equivalence on terms with binding structure.  It captures the notion that the names of bound variables are unimportant; all that matters is the binding structure they induce.

Consider the untyped lambda-calculus.

<DisplayMath formula="e ::= x \mid \lambda x.\, e \mid e_1\ e_2"/>

Alpha-equivalence for terms <Math formula="\texttt{}e"/> is the least [congruence relation](/wiki/congruence-relation/) <Math formula="\texttt{}e_1 =_\alpha e_2"/> closed under the <Math formula="\texttt{}\alpha"/> axiom:

<DisplayMath formula="{(y \not = x \,and\, y \not\in \mathit{FV}(e)) \over \lambda x.\, e =_\alpha \lambda y.\,  [y/x]e}\alpha"/>

Alpha-equivalence generalizes in a straightforward manner to any term language with binding structure.

Twelf's notion of term equality respects alpha-equivalence; when an object-language is represented using [higher-order abstract syntax](/wiki/higher-order-abstract-syntax/), the representation enjoys alpha-equivalence for free. !}%

%{!
-----
This page was copied from the MediaWiki version of the Twelf Wiki.
If anything looks wrong, you can refer to the
[wayback machine's version here](https://web.archive.org/web/20240303030303/http://twelf.org/wiki/Alpha-equivalence).
!}%
