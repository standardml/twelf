%%! title: "Representing the syntax of the STLC"
%%! description: "Taking the tools learned from encoding natural numbers, we describe the lambda calculus in LF in a way that gives us substitution for free (Part of the introduction to proving metatheorems in Twelf)"
%%! prev:
%%!   label: "Natural numbers: summary and exercises"
%%!   link: /wiki/proving-metatheorems-summary-the-natural-numbers/
%%! next:
%%!   label: "Representing the judgements of th STLC"
%%!   link: /wiki/proving-metatheorems-representing-the-judgements-of-the-stlc/


%{!

_This page is part of the introduction to [proving metatheorems with Twelf](/wiki/proving-metatheorems-with-twelf/)._

In this section, we discuss how to represent the syntax of a simply typed λ-calculus in LF.

## Representing STLC types

We consider a λ-calculus with <Math formula="\mathsf{unit}"/> as a base type:

```math
\tau ::= \mathsf{unit} \mid \tau_1 \rightarrow \tau_2
```
The representation of types is no more complicated than the representation of natural numbers in the previous section: !}%
    
tp    : type.
unit  : tp.
arrow : tp -> tp -> tp.

%{! We leave it to the reader to formulate an appropriate encoding judgement between STLC types <Math formula="\tau"/> and closed LF terms of type ``tp`` and to prove that this encoding is adequate in the usual sense.  

## Representing STLC terms

### Informal definition

The terms of the STLC are variables <Math formula="x"/>, the 0-element tuple <Math formula="\langle\rangle"/>, lambda abstraction (with a type annotation), and application:

```math
e ::= x \mid \langle\rangle \mid \lambda x{:}\tau.e \mid e_1\,e_2
```

The variable <Math formula="x"/> is considered to be bound by the expression <Math formula="\lambda x{:}\tau.e"/>.  Following standard practice, we implicitly consider terms modulo renaming of bound variables.

### LF representation

We represent these terms in LF with the following signature: !}%
    
tm    : type.
empty : tm.
app   : tm -> tm -> tm.
lam   : tp -> (tm -> tm) -> tm.

%{! The representation of <Math formula="\langle\rangle"/> as ``empty`` and application as ``app`` is no different than what we did when representing natural numbers.  Two questions you are may be asking are:

1. How does this LF signature represent variables <Math formula="x"/>, since these don't appear in the LF signature, and
2. What's going on with the type of ``lam``?

The answer is that we are using a representation technique called _higher-order abstract syntax_ (HOAS): we use LF variables to represent object-language variables.  Here are some example representations: 

 - The term <Math formula="\lambda x{:}{\mathsf{unit}}. x"/> 
   is represented in LF as `lam unit ([x] x)`.
 - The term <Math formula="\lambda x{:}{\mathsf{unit} \rightarrow \mathsf{unit}}. x\,\langle\rangle"/> is represented in LF as `lam (arrow unit unit) ([x] app x empty)`


As you can see, we represent an object-language variable by an LF variable with the same name.  To represent an object-language term <Math formula="\lambda x {:}\tau . e"/>, we first represent the body <Math formula="e"/> as an LF term ``M`` in which the LF variable ``x`` occurs free.  Then, we bind this variable using an LF abstraction ``[x] M``.  This abstraction, which represents the body of the object-language lambda, has LF type ``tm -> tm``.  That's where the higher-order type of the constant ``lam`` comes from.

Using higher-order abstract syntax (HOAS) in this fashion makes two operations on syntax primitive:
* **α-equivalence**: Because LF terms are considered modulo α-renaming of bound variables, and LF bound variables are used to model object-language bound variables, the type ``tm`` represents α-equivalence classes of object-language terms.  For example, because there is no way to distinguish ``([x] app x empty)`` and ``([y] app y empty)`` in LF, so there is no way to distinguish ``lam (arrow unit unit) ([x] app x empty)`` and ``lam (arrow unit unit) ([y] app y empty)``.  
* **capture-avoiding substitution**: an object-language substitution, written <Math formula="\{e_2/x\}e"/>, is modeled by an LF substitution ``[E2/x] E``.  

## Adequacy

The adequacy theorem for terms shows that the LF operations correctly implement the object-language operations:

### Adequacy for terms

There is a bijection <Math formula="e \gg \mathtt{E}"/> &lt;math&gt;e \gg \texttt\{E\}&lt;/math&gt; between (α-equivalence classes of) STLC terms <Math formula="e"/> with free variables in <Math formula="x_1,\ldots,x_n"/> and (α-equivalence classes of) LF terms ``E : tm`` in the LF context ``x1:tm, ..., xn:tm``.  

Moreover, this bijection is compositional in the following sense: if <Math formula="e \gg \mathtt{E}"/> and <Math formula="e' \gg \texttt{E'}"/> then <Math formula="\{e'/x\}e \gg \texttt{[E'/x] E}"/>.  

If you're interested in the details of how this adequacy theorem is stated and proved, you can read more about it Harper and Licata's paper [_Mechanizing Metatheory in a Logical Framework_](https://www.cambridge.org/core/journals/journal-of-functional-programming/article/mechanizing-metatheory-in-a-logical-framework/E4EC2F77CEF3DC56EABCF6F6658B179E). However, there are a few high-level ideas in this proof that we should call out here:

**Adequacy for terms requires adequacy for types.**  Because the syntax of terms mentions the syntax of types, the proof of adequacy for terms requires knowing that ``tp`` adequately represents types <Math formula="\tau"/>.  Above, we (well, we left it as an exercise for you) proved that types<Math formula="\tau"/> are adequately represented by _closed_ LF terms of type ``tp``.  Thus, there is a danger here: the syntax of STLC types might not be adequately represented in the LF contexts we consider here, which have the form ``x1:tm, ..., xn:tm``.  

In fact, the representation of STLC types remains adequate in contexts of this form because adding variables of type ``tm`` to the context does not change the canonical forms of type ``tp``.  This kind of argument can be made precise using [subordination](/wiki/subordination/), which tracks when terms of one type may appear in terms of another.  Informally, the idea is that the canonical forms of a type only depend on the canonical forms of subordinate types.  Here, ``tm`` is not subordinate to ``tp`` (because STLC terms do not appear in STLC types), so adding canonical forms of type ``tm`` does not change the canonical forms of type ``tp``.  We will discuss another application of subordination [later in this introduction when we discuss totality assertions in non-empty contexts](/wiki/proving-metatheorems-proving-totality-assertions-in-non-empty-contexts/).

**The power of weak frameworks.** When we consider closed LF terms of type ``nat`` or ``tp``, the only possible terms of those types are applications of the appropriate constants.  The reason our higher-order representation of STLC terms works in LF is that, when we consider open LF terms in contexts containing assumptions ``x:tm``, the only LF terms of type ``tm`` are either those variables or applications of the appropriate constants.  

Specifically, it is important that LF does not provide any elimination forms for constants.  For example, suppose LF provided a ``case`` construct for case-analyzing the terms of a type, as one would have if ``tm`` were considered to be an inductive definition within the type theory.  Then the term ``([x:tm] case x of empty => empty | ...)`` would need to be considered a canonical form of type ``tm -> tm`` (without knowing what the variable stands for, there is no way to reduce the case).  However, this term does not correspond to any object-language term-with-a-free-variable, so having such a case construct would ruin the adequacy of the representation.  

!}%
