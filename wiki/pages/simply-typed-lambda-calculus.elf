%%! title: "Simply-typed lambda calculus"
%%! description: "The simply-typed lambda calculus is a common example of a simple typed programming language. This article discusses its encoding in Twelf."

%{! The **simply-typed lambda calculus** (or STLC) is a common example of a simple typed programming language. This article discusses its encoding in Twelf. 

If you're trying to learn Twelf from this example, you may wish to read the discussion starting in ["Representing the syntax of the STLC" from the Introduction to Proving Metatheorems in Twelf](/wiki/proving-metatheorems-representing-the-syntax-of-the-stlc/).  That introductory guide discusses this representation of the STLC and why it works in more detail.  This page summarizes the judgements of the STLC and the corresponding LF code for reference, but does not explain them in detail.

## What is illustrated by this example?

There are simpler examples of LF representations (see, e.g., the [natural numbers](/wiki/natural-numbers/)). However, the STLC is a good first example of a representation that uses [higher-order abstract syntax](/wiki/higher-order-abstract-syntax/) and [higher-order judgments](/wiki/higher-order-judgements/).  These two representation techniques drastically simplify the process of representing and proving theorems about many programming languages and logics.  The idea is that the binding structure of LF is used to represent the binding structure of the object language.  At the level of syntax, this gives [alpha-equivalence](/wiki/alpha-equivalence/) and capture-avoiding substitution "for free" from the representation.  At the level of judgements, this gives the properties of a [hypothetical judgement](/wiki/hypothetical-judgment/), such as weakening and substitution, for free.

This encoding of the STLC is adapted from [_Mechanizing Metatheory in a Logical Framework_ by Harper and Licata](https://www.cambridge.org/core/journals/journal-of-functional-programming/article/mechanizing-metatheory-in-a-logical-framework/E4EC2F77CEF3DC56EABCF6F6658B179E). The Twelf in this article closely tracks Figure 7 and Figure 13 from that paper, and Section 3 of that paper exhaustively discusses the [adequacy](/wiki/adequacy/) of this encoding.

## Encoding of syntax

The types of the simply typed lambda calculus are simply the unit type and the arrow or function type.

```math
\tau ::= \mathsf{unit} \mid \tau_1 \rightarrow \tau_2
```
!}%
    
tp : type.
arrow : tp -> tp -> tp.
unit : tp.

%worlds () (tp).

%{! The terms are the variable <Math formula="x"/>, the empty pair (which has type <Math formula="\mathsf{unit}"/>), lambda abstraction (with a type annotation), and application.

```math
e ::= x \mid \langle\rangle \mid \lambda x{:}\tau.e \mid e_1\,e_2
```
 !}%
    
tm : type.
empty : tm.
app : tm -> tm -> tm.
lam : tp -> (tm -> tm) -> tm.

%block tmvar : block {x : tm}.
%worlds (tmvar) (tm).

%{! ## Encoding of judgments

### Static semantics

The typing rules for the simply typed lambda calculus use a typing context <Math formula="\gamma"/> to record the type annotations that have been encountered at lambda-bindings. 

```math
{
    \over
    \gamma \vdash \langle\rangle : \mathsf{unit}
}\mathit{of\textit{-}empty}
\qquad
{
    x : \tau \in \gamma
    \over
    \gamma \vdash x : \tau 
}\mathit{of\textit{-}var}
```
```math
{
    \gamma, x :\tau_2 \vdash e : \tau
    \over
    \gamma \vdash \lambda x{:}\tau_2.e : (\tau_2 \rightarrow \tau)
}\mathit{of\textit{-}lam}
\qquad
{
    \gamma \vdash e_1 : (\tau_2 \rightarrow \tau)
    \qquad
    \gamma \vdash e_2 : \tau_2
    \over
    \gamma \vdash e_1\,e_2 : \tau
}\mathit{of\textit{-}app}
```



This judgement is represented by the following LF signature: !}%
    
of : tm -> tp -> type.
of-empty : of empty unit.
of-lam : of (lam T2 ([x] E x)) (arrow T2 T)
          <- ({x: tm} of x T2 -> of (E x) T).
of-app : of (app E1 E2) T
          <- of E1 (arrow T2 T)
          <- of E2 T2.

%block tmof : some {T : tp} block {x : tm} {d : of x T}.
%worlds (tmof) (of _ _).


%{! Assumptions <Math formula="x : \tau"/> in the typing context <Math formula="\gamma"/> are represented as a pair of objects `x:tm` and `d: of x T` in the LF context <Math formula="\Gamma"/> (where `T` is the LF representation of some type <Math formula="\tau"/>).  This can be seen in the encoding of the judgment ``of-lam``. There is no need to write out the equivalent of the `of-var` rule, because the necessary judgment is directly assumed by the ``of-lam`` rule. This method avoids the need for a [substitution lemma](/wiki/substitution-lemma/): the article on that subject discusses the matter further.

### Dynamic semantics

We define the dynamic semantics of the STLC by a call-by-value, left-to-right structural operational semantics on closed terms.  

The judgement <Math formula="e\,\mathtt{value}"/> identifies the values:

```math
{
    \over
    \langle\rangle\,\mathtt{value}
}\mathit{value\textit{-}empty}
\qquad
{
    \over
    \gamma x{:}\tau.e\,\mathtt{value}
}\mathit{value\textit{-}lam}
```

Next, we define the operational semantics with a judgement <Math formula="e \mapsto e'"/>:

```math
{
    e_1 \mapsto e_1'
    \over
    e_1\,e_2 \mapsto e_1'\,e_2
}\mathit{step\textit{-}app_1}
\qquad
{
    e_1\,\mathtt{value}
    \qquad
    e_2 \mapsto e_2'
    \over
    e_1\,e_2 \mapsto e_1\,e_2'
}\mathit{step\textit{-}app_2}
```
```math
{
    e_2\,\mathtt{value}
    \over
    (\lambda x{:}\tau.e)\,e_2 \mapsto e[e_2/x]
}\mathit{step\textit{-}app\textit{-}beta}
```

These judgments are represented by the following Twelf signature: !}%
    
value : tm -> type.
value-empty : value empty.
value-lam : value (lam T ([x] E x)).

step : tm -> tm -> type.
step-app-1 : step (app E1 E2) (app E1' E2)
              <- step E1 E1'.
step-app-2 : step (app E1 E2) (app E1 E2') 
              <- value E1
              <- step E2 E2'.
step-app-beta : step (app (lam T2 ([x] E x)) E2) (E E2)
                 <- value E2.

%worlds () (value _) (step _ _).

%{!
## Metatheorems

Several metatheorems about this formulation of the simply typed lambda-calculus are proved on this wiki.  See, for example:
* [Proving metatheorems about the STLC](/wiki/proving-metatheorems-proving-metatheorems-about-the-stlc/) for a proof of type preservation
* [Output factoring](/wiki/output-factoring/) for a proof of progress
* [Uniqueness lemma](/wiki/uniqueness-lemma/)s for a proof of determinacy of the operational semantics
* [Proving totality assertions in non-empty contexts](/wiki/proving-metatheorems-proving-totality-assertions-in-non-empty-contexts/) for a height judgement
* [Proving metatheorems in non-empty contexts](/wiki/proving-metatheorems-proving-metatheorems-in-non-empty-contexts/) for a proof that the height of a term can only be increased by substitution.

!}%
